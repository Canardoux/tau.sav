// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/web_audio_api.dart';
import '../third_party/web_audio_api/media_streams.dart';
import '../third_party/web_audio_api/node.dart';
import '../third_party/web_audio_api/worklet.dart';
import 'media_element.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

abstract class AnalyserNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class AnalyserNodeMiscExt {
  Uint8List getByteTimeDomainData({required int len});

  Float32List getFloatTimeDomainData({required int len});
}

abstract class AudioBufferSourceNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class AudioBufferSourceNodeMiscExt {
  void setBuffer({required AudioBuffer audioBuffer});
}

abstract class AudioBufferSourceNodeScheduledSourceNodeMiscExt {
  void setOnEnded({required FutureOr<void> Function(Event) callback});
}

abstract class AudioContextExt {
  MediaElementAudioSourceNode createMediaElementSource(
      {required MyMediaElement mediaElement});

  AudioBuffer decodeAudioDataSync({required String inputPath});

  void setOnStateChange({required FutureOr<void> Function(Event) callback});

  void setSinkId({required String sinkId});
}

abstract class AudioDestinationNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class AudioParamExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class BiquadFilterNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ChannelMergerNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ChannelSplitterNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ConstantSourceNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ConstantSourceNodeScheduledSourceNodeMiscExt {
  void setOnEnded({required FutureOr<void> Function(Event) callback});
}

abstract class ConvolverNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class DelayNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class DynamicsCompressorNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class EventExt {
  String get type;
}

abstract class GainNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class IIRFilterNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class MediaElementAudioSourceNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class MediaStreamAudioDestinationNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class MediaStreamAudioSourceNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class MediaStreamExt {
  List<MediaStreamTrack> getTracks();
}

abstract class MediaStreamTrackAudioSourceNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class OfflineAudioContextExt {
  void setOnComplete(
      {required FutureOr<void> Function(OfflineAudioCompletionEvent) callback});
}

abstract class OscillatorNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class OscillatorNodeScheduledSourceNodeMiscExt {
  void setOnEnded({required FutureOr<void> Function(Event) callback});
}

abstract class PannerNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ScriptProcessorNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class ScriptProcessorNodeMiscExt {
  void setOnaudioprocess(
      {required FutureOr<void> Function(AudioProcessingEvent) callback});
}

abstract class StereoPannerNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class WaveShaperNodeExt {
  void connect({required AudioNode dest});

  void setOnProcessorError({required FutureOr<void> Function(String) callback});
}

abstract class WaveShaperNodeMiscExt {
  Float32List? curve();
}
