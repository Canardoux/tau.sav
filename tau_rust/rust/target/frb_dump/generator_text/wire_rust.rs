"// This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n#![allow(\nnon_camel_case_types,\nunused,\nnon_snake_case,\nclippy::needless_return,\nclippy::redundant_closure_call,\nclippy::redundant_closure,\nclippy::useless_conversion,\nclippy::unit_arg,\nclippy::unused_unit,\nclippy::double_parens,\nclippy::let_and_return,\nclippy::too_many_arguments,\nclippy::match_single_binding,\nclippy::clone_on_copy,\nclippy::let_unit_value,\nclippy::deref_addrof,\nclippy::explicit_auto_deref,\nclippy::borrow_deref_ref,\nclippy::needless_borrow\n)]\n\n// Section: imports\n\nuse web_audio_api::worklet::*;\nuse web_audio_api::*;\nuse web_audio_api::node::*;\nuse crate::api::media_element::*;\nuse web_audio_api::media_streams::*;\nuse web_audio_api::media_devices::*;\nuse web_audio_api::media_recorder::*;\nuse web_audio_api::context::*;use web_audio_api::node::AudioNode;\nuse crate::api::override_web_audio_api::AudioParamExt;\nuse crate::api::override_web_audio_api::EventExt;\nuse web_audio_api::context::BaseAudioContext;\nuse crate::api::override_web_audio_api::AudioContextExt;\nuse crate::api::override_web_audio_api::OfflineAudioContextExt;\nuse crate::api::override_web_audio_api::MediaStreamExt;\nuse crate::api::override_web_audio_api::AnalyserNodeExt;\nuse web_audio_api::node::AudioScheduledSourceNode;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeExt;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::AudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::BiquadFilterNodeExt;\nuse crate::api::override_web_audio_api::ChannelMergerNodeExt;\nuse crate::api::override_web_audio_api::ChannelSplitterNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::ConvolverNodeExt;\nuse crate::api::override_web_audio_api::DelayNodeExt;\nuse crate::api::override_web_audio_api::DynamicsCompressorNodeExt;\nuse crate::api::override_web_audio_api::GainNodeExt;\nuse crate::api::override_web_audio_api::IIRFilterNodeExt;\nuse crate::api::override_web_audio_api::MediaElementAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamTrackAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::PannerNodeExt;\nuse crate::api::override_web_audio_api::ScriptProcessorNodeExt;\nuse crate::api::override_web_audio_api::StereoPannerNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeMiscExt;\nuse flutter_rust_bridge::{Handler, IntoIntoDart};\nuse flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};\nuse flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};\n\n// Section: boilerplate\n\nflutter_rust_bridge::frb_generated_boilerplate!(\n                    default_stream_sink_codec = SseCodec,\n                    default_rust_opaque = RustOpaqueMoi,\n                    default_rust_auto_opaque = RustAutoOpaqueMoi,\n                );\n                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = \"2.0.0\";\n                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 477632442;\n            \n\n// Section: executor\n\nflutter_rust_bridge::frb_generated_default_handler!();\n\n// Section: wire_funcs\n\nfn wire__crate__api__media_element__MyMediaElement_current_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_current_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(crate::api::media_element::MyMediaElement::current_time(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_loop__impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_loop_\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(crate::api::media_element::MyMediaElement::loop_(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_new_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_new\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_file = <String>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {\n                     let output_ok = crate::api::media_element::MyMediaElement::new(api_file)?;   Ok(output_ok)\n                })()) })\n            }fn wire__crate__api__media_element__MyMediaElement_pause_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_pause\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ crate::api::media_element::MyMediaElement::pause(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_paused_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_paused\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(crate::api::media_element::MyMediaElement::paused(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_play_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_play\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ crate::api::media_element::MyMediaElement::play(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_playback_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_playback_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(crate::api::media_element::MyMediaElement::playback_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_set_current_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_set_current_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ crate::api::media_element::MyMediaElement::set_current_time(&*api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_set_loop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_set_loop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);\nlet api_value = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ crate::api::media_element::MyMediaElement::set_loop(&*api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__media_element__MyMediaElement_set_playback_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MyMediaElement_set_playback_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ crate::api::media_element::MyMediaElement::set_playback_rate(&*api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__mimi__mimi_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"mimi\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::mimi::mimi())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__simple__greet_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"greet\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_name = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::simple::greet(api_name))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__simple__init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"init_app\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok({ crate::api::simple::init_app(); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__simple__init_tau_core_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"init_tau_core\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                         let output_ok = Result::<_,()>::Ok(crate::api::simple::init_tau_core().await)?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__crate__api__simple__rust_set_log_level_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"rust_set_log_level\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_level = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok({ crate::api::simple::rust_set_log_level(api_level); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__simple__trace_logger_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"trace_logger\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_sink = <StreamSink<crate::api::simple::LogEntry,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok({ crate::api::simple::trace_logger(api_sink); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__toto__toto_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"toto\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::toto::toto())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__toto__zozo_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"zozo\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::toto::zozo())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__zozo__sum_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"sum\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_a = <usize>::sse_decode(&mut deserializer);\nlet api_b = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::zozo::sum(api_a, api_b))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__crate__api__zozo__sum_long_running_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"sum_long_running\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_a = <usize>::sse_decode(&mut deserializer);\nlet api_b = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(crate::api::zozo::sum_long_running(api_a, api_b))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_duration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_duration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::duration(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_from_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_from\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_samples = <Vec<Vec<f32>>>::sse_decode(&mut deserializer);\nlet api_sample_rate = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::from(api_samples, api_sample_rate))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_get_channel_data_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_get_channel_data\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);\nlet api_channel_number = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioBuffer::get_channel_data(&*api_that_guard, api_channel_number); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_get_channel_data_mut_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_get_channel_data_mut\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);\nlet api_channel_number = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioBuffer::get_channel_data_mut(&mut *api_that_guard, api_channel_number); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_length_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_length\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::length(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_new\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_options = <web_audio_api::AudioBufferOptions>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::new(api_options))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_number_of_channels_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_number_of_channels\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::number_of_channels(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioBuffer_sample_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBuffer_sample_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioBuffer::sample_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_automation_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_automation_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::automation_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_cancel_and_hold_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_cancel_and_hold_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_cancel_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::cancel_and_hold_at_time(&*api_that_guard, api_cancel_time); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_cancel_scheduled_values_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_cancel_scheduled_values\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_cancel_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::cancel_scheduled_values(&*api_that_guard, api_cancel_time); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_default_value_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_default_value\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::default_value(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_exponential_ramp_to_value_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_exponential_ramp_to_value_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <f32>::sse_decode(&mut deserializer);\nlet api_end_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::exponential_ramp_to_value_at_time(&*api_that_guard, api_value, api_end_time); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_linear_ramp_to_value_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_linear_ramp_to_value_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <f32>::sse_decode(&mut deserializer);\nlet api_end_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::linear_ramp_to_value_at_time(&*api_that_guard, api_value, api_end_time); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_max_value_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_max_value\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::max_value(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_min_value_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_min_value\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::min_value(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_set_automation_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_automation_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <web_audio_api::AutomationRate>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_automation_rate(&*api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_set_target_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_target_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <f32>::sse_decode(&mut deserializer);\nlet api_start_time = <f64>::sse_decode(&mut deserializer);\nlet api_time_constant = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_target_at_time(&*api_that_guard, api_value, api_start_time, api_time_constant); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_set_value_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_value\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <f32>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_value(&*api_that_guard, api_value); })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioParam_set_value_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_value_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_value = <f32>::sse_decode(&mut deserializer);\nlet api_start_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_value_at_time(&*api_that_guard, api_value, api_start_time); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_set_value_curve_at_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_set_value_curve_at_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);\nlet api_values = <Vec<f32>>::sse_decode(&mut deserializer);\nlet api_start_time = <f64>::sse_decode(&mut deserializer);\nlet api_duration = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioParam::set_value_curve_at_time(&*api_that_guard, &api_values, api_start_time, api_duration); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioParam_value_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioParam_value\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::AudioParam::value(&*api_that_guard))?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_input_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_get_input_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.input_buffer.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_output_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_get_output_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.output_buffer.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_playback_time_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_get_playback_time\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.playback_time.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_input_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_set_input_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);\nlet api_input_buffer = <AudioBuffer>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.input_buffer = api_input_buffer; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_output_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_set_output_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);\nlet api_output_buffer = <AudioBuffer>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.output_buffer = api_output_buffer; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_playback_time_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioProcessingEvent_auto_accessor_set_playback_time\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(&mut deserializer);\nlet api_playback_time = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.playback_time = api_playback_time; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_average_load_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_get_average_load\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.average_load.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_get_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.event.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_peak_load_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_get_peak_load\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.peak_load.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_timestamp_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_get_timestamp\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.timestamp.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_underrun_ratio_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_get_underrun_ratio\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.underrun_ratio.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_average_load_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_set_average_load\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);\nlet api_average_load = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.average_load = api_average_load; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_set_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);\nlet api_event = <Event>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.event = api_event; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_peak_load_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_set_peak_load\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);\nlet api_peak_load = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.peak_load = api_peak_load; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_timestamp_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_set_timestamp\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);\nlet api_timestamp = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.timestamp = api_timestamp; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_underrun_ratio_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacityEvent_auto_accessor_set_underrun_ratio\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(&mut deserializer);\nlet api_underrun_ratio = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.underrun_ratio = api_underrun_ratio; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__AudioRenderCapacity_clear_onupdate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacity_clear_onupdate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioRenderCapacity::clear_onupdate(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioRenderCapacity_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacity_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>>::sse_decode(&mut deserializer);\nlet api_options = <web_audio_api::AudioRenderCapacityOptions>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioRenderCapacity::start(&*api_that_guard, api_options); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__AudioRenderCapacity_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioRenderCapacity_stop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::AudioRenderCapacity::stop(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__Event_type__impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"Event_type_\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::Event::type_(&*api_that_guard))?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_get_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioCompletionEvent_auto_accessor_get_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.event.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_get_rendered_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioCompletionEvent_auto_accessor_get_rendered_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.rendered_buffer.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_set_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioCompletionEvent_auto_accessor_set_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_decode(&mut deserializer);\nlet api_event = <Event>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.event = api_event; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_set_rendered_buffer_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioCompletionEvent_auto_accessor_set_rendered_buffer\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_decode(&mut deserializer);\nlet api_rendered_buffer = <AudioBuffer>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.rendered_buffer = api_rendered_buffer; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__PeriodicWave_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PeriodicWave_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::PeriodicWave::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__audio_render_capacity_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"audio_render_capacity_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::AudioRenderCapacityOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__periodic_wave_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"periodic_wave_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::PeriodicWaveOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_base_latency_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_base_latency\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::base_latency(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_clear_onsinkchange_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_clear_onsinkchange\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::clear_onsinkchange(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_clear_onstatechange_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_clear_onstatechange\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::clear_onstatechange(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_close_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_close\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::close(&*api_that_guard).await; })?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__web_audio_api__context__AudioContext_close_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_close_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::close_sync(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_analyser_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_analyser\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_analyser(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_audio_param_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_audio_param\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_opts = <web_audio_api::AudioParamDescriptor>::sse_decode(&mut deserializer);\nlet api_dest = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_audio_param(&*api_that_guard, api_opts, &*api_dest_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_biquad_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_biquad_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_biquad_filter(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_buffer_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_buffer\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_channels = <usize>::sse_decode(&mut deserializer);\nlet api_length = <usize>::sse_decode(&mut deserializer);\nlet api_sample_rate = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_buffer(&*api_that_guard, api_number_of_channels, api_length, api_sample_rate))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_buffer_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_buffer_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_buffer_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_channel_merger_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_channel_merger\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_inputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_channel_merger(&*api_that_guard, api_number_of_inputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_channel_splitter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_channel_splitter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_outputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_channel_splitter(&*api_that_guard, api_number_of_outputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_constant_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_constant_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_constant_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_convolver_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_convolver\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_convolver(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_delay_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_delay\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_max_delay_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_delay(&*api_that_guard, api_max_delay_time))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_dynamics_compressor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_dynamics_compressor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_dynamics_compressor(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_gain_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_gain\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_gain(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_iir_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_iir_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_feedforward = <Vec<f64>>::sse_decode(&mut deserializer);\nlet api_feedback = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_iir_filter(&*api_that_guard, api_feedforward, api_feedback))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_media_stream_destination_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_media_stream_destination\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_media_stream_destination(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_media_stream_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_media_stream_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_media = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_media_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_media, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_media_guard = Some(api_media.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_media_guard = api_media_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_media_stream_source(&*api_that_guard, &*api_media_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_media_stream_track_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_media_stream_track_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_media = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_media_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_media, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_media_guard = Some(api_media.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_media_guard = api_media_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_media_stream_track_source(&*api_that_guard, &*api_media_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_oscillator_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_oscillator\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_oscillator(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_periodic_wave_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_periodic_wave\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_options = <web_audio_api::PeriodicWaveOptions>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_periodic_wave(&*api_that_guard, api_options))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_script_processor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_script_processor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_buffer_size = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_input_channels = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_output_channels = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_script_processor(&*api_that_guard, api_buffer_size, api_number_of_input_channels, api_number_of_output_channels))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_stereo_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_stereo_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_stereo_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_create_wave_shaper_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_create_wave_shaper\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::create_wave_shaper(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_current_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_current_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::current_time(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_destination_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_destination\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::destination(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_frb_override_create_media_element_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_frb_override_create_media_element_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_media_element = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_media_element_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_media_element, 1, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_media_element_guard = Some(api_media_element.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet mut api_media_element_guard = api_media_element_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::frb_override_create_media_element_source(&*api_that_guard, &mut *api_media_element_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_frb_override_decode_audio_data_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_frb_override_decode_audio_data_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_input_path = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = web_audio_api::context::AudioContext::frb_override_decode_audio_data_sync(&*api_that_guard, api_input_path)?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_listener_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_listener\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::listener(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_new_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_new\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_options = <web_audio_api::context::AudioContextOptions>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                     let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::new(api_options))?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__context__AudioContext_output_latency_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_output_latency\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::output_latency(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_render_capacity_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_render_capacity\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::render_capacity(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_resume_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_resume_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::resume_sync(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_sample_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_sample_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::sample_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_set_on_state_change_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_set_on_state_change\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::set_on_state_change(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_set_sink_id_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_set_sink_id\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);\nlet api_sink_id = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = web_audio_api::context::AudioContext::set_sink_id(&*api_that_guard, api_sink_id)?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_sink_id_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_sink_id\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::sink_id(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_state_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_state\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContext::state(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__AudioContext_suspend_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_suspend\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::suspend(&*api_that_guard).await; })?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__web_audio_api__context__AudioContext_suspend_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioContext_suspend_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::AudioContext::suspend_sync(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_clear_onstatechange_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_clear_onstatechange\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::ConcreteBaseAudioContext::clear_onstatechange(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_analyser_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_analyser\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_analyser(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_audio_param_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_audio_param\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_opts = <web_audio_api::AudioParamDescriptor>::sse_decode(&mut deserializer);\nlet api_dest = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_audio_param(&*api_that_guard, api_opts, &*api_dest_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_biquad_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_biquad_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_biquad_filter(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_buffer_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_buffer\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_channels = <usize>::sse_decode(&mut deserializer);\nlet api_length = <usize>::sse_decode(&mut deserializer);\nlet api_sample_rate = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_buffer(&*api_that_guard, api_number_of_channels, api_length, api_sample_rate))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_buffer_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_buffer_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_buffer_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_channel_merger_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_channel_merger\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_inputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_channel_merger(&*api_that_guard, api_number_of_inputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_channel_splitter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_channel_splitter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_outputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_channel_splitter(&*api_that_guard, api_number_of_outputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_constant_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_constant_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_constant_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_convolver_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_convolver\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_convolver(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_delay_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_delay\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_max_delay_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_delay(&*api_that_guard, api_max_delay_time))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_dynamics_compressor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_dynamics_compressor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_dynamics_compressor(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_gain_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_gain\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_gain(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_iir_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_iir_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_feedforward = <Vec<f64>>::sse_decode(&mut deserializer);\nlet api_feedback = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_iir_filter(&*api_that_guard, api_feedforward, api_feedback))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_oscillator_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_oscillator\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_oscillator(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_periodic_wave_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_periodic_wave\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_options = <web_audio_api::PeriodicWaveOptions>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_periodic_wave(&*api_that_guard, api_options))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_script_processor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_script_processor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_buffer_size = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_input_channels = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_output_channels = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_script_processor(&*api_that_guard, api_buffer_size, api_number_of_input_channels, api_number_of_output_channels))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_stereo_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_stereo_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_stereo_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_create_wave_shaper_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_create_wave_shaper\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::create_wave_shaper(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_current_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_current_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::current_time(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_destination_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_destination\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::destination(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_listener_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_listener\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::listener(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_mark_cycle_breaker_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_mark_cycle_breaker\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);\nlet api_reg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_reg_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_reg, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_reg_guard = Some(api_reg.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_reg_guard = api_reg_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::ConcreteBaseAudioContext::mark_cycle_breaker(&*api_that_guard, &*api_reg_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_sample_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_sample_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::sample_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__ConcreteBaseAudioContext_state_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConcreteBaseAudioContext_state\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::ConcreteBaseAudioContext::state(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_clear_oncomplete_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_clear_oncomplete\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::OfflineAudioContext::clear_oncomplete(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_clear_onstatechange_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_clear_onstatechange\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::OfflineAudioContext::clear_onstatechange(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_analyser_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_analyser\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_analyser(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_audio_param_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_audio_param\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_opts = <web_audio_api::AudioParamDescriptor>::sse_decode(&mut deserializer);\nlet api_dest = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_audio_param(&*api_that_guard, api_opts, &*api_dest_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_biquad_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_biquad_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_biquad_filter(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_buffer_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_buffer\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_channels = <usize>::sse_decode(&mut deserializer);\nlet api_length = <usize>::sse_decode(&mut deserializer);\nlet api_sample_rate = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_buffer(&*api_that_guard, api_number_of_channels, api_length, api_sample_rate))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_buffer_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_buffer_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_buffer_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_channel_merger_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_channel_merger\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_inputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_channel_merger(&*api_that_guard, api_number_of_inputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_channel_splitter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_channel_splitter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_number_of_outputs = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_channel_splitter(&*api_that_guard, api_number_of_outputs))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_constant_source_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_constant_source\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_constant_source(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_convolver_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_convolver\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_convolver(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_delay_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_delay\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_max_delay_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_delay(&*api_that_guard, api_max_delay_time))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_dynamics_compressor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_dynamics_compressor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_dynamics_compressor(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_gain_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_gain\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_gain(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_iir_filter_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_iir_filter\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_feedforward = <Vec<f64>>::sse_decode(&mut deserializer);\nlet api_feedback = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_iir_filter(&*api_that_guard, api_feedforward, api_feedback))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_oscillator_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_oscillator\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_oscillator(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_periodic_wave_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_periodic_wave\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_options = <web_audio_api::PeriodicWaveOptions>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_periodic_wave(&*api_that_guard, api_options))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_script_processor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_script_processor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_buffer_size = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_input_channels = <usize>::sse_decode(&mut deserializer);\nlet api_number_of_output_channels = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_script_processor(&*api_that_guard, api_buffer_size, api_number_of_input_channels, api_number_of_output_channels))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_stereo_panner_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_stereo_panner\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_stereo_panner(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_create_wave_shaper_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_create_wave_shaper\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::create_wave_shaper(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_current_time_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_current_time\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::current_time(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_destination_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_destination\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::destination(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_length_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_length\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::length(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_listener_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_listener\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::listener(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_new\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_number_of_channels = <usize>::sse_decode(&mut deserializer);\nlet api_length = <usize>::sse_decode(&mut deserializer);\nlet api_sample_rate = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::new(api_number_of_channels, api_length, api_sample_rate))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_resume_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_resume\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::OfflineAudioContext::resume(&*api_that_guard).await; })?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_sample_rate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_sample_rate\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::sample_rate(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_set_on_complete_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_set_on_complete\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::OfflineAudioContext::set_on_complete(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_start_rendering_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_start_rendering\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::start_rendering(&*api_that_guard).await)?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_start_rendering_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_start_rendering_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::start_rendering_sync(&mut *api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_state_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_state\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::context::OfflineAudioContext::state(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__OfflineAudioContext_suspend_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OfflineAudioContext_suspend\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(&mut deserializer);\nlet api_suspend_time = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {\n                    transform_result_sse::<_, ()>((move || async move {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_async_ref().await),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::context::OfflineAudioContext::suspend(&*api_that_guard, api_suspend_time).await; })?;   Ok(output_ok)\n                    })().await)\n                } })\n            }fn wire__web_audio_api__context__audio_context_latency_category_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"audio_context_latency_category_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContextLatencyCategory::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__context__audio_context_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"audio_context_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::context::AudioContextOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_devices__get_user_media_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"get_user_media_sync\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_constraints = <MediaStreamConstraints>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::media_devices::get_user_media_sync(api_constraints))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_blob_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_get_blob\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.blob.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_get_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.event.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_timecode_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_get_timecode\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(api_that_guard.timecode.clone())?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_blob_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_set_blob\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);\nlet api_blob = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.blob = api_blob; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_event_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_set_event\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);\nlet api_event = <Event>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.event = api_event; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_timecode_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BlobEvent_auto_accessor_set_timecode\", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(&mut deserializer);\nlet api_timecode = <f64>::sse_decode(&mut deserializer);deserializer.end();\n                transform_result_sse::<_, ()>((move || {\n                    let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ { api_that_guard.timecode = api_timecode; }; })?;   Ok(output_ok)\n                })()) })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_clear_ondataavailable_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_clear_ondataavailable\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_recorder::MediaRecorder::clear_ondataavailable(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_clear_onerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_clear_onerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_recorder::MediaRecorder::clear_onerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_clear_onstop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_clear_onstop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_recorder::MediaRecorder::clear_onstop(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_new\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_stream = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_stream_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_stream, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_stream_guard = Some(api_stream.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_stream_guard = api_stream_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::media_recorder::MediaRecorder::new(&*api_stream_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_recorder::MediaRecorder::start(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_recorder__MediaRecorder_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaRecorder_stop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_recorder::MediaRecorder::stop(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_streams__MediaStreamTrack_close_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrack_close\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::media_streams::MediaStreamTrack::close(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_streams__MediaStreamTrack_ready_state_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrack_ready_state\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::media_streams::MediaStreamTrack::ready_state(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_streams__MediaStream_frb_override_get_tracks_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStream_frb_override_get_tracks\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::media_streams::MediaStream::frb_override_get_tracks(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__media_streams__MediaStream_from_tracks_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStream_from_tracks\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_tracks = <Vec<MediaStreamTrack>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::media_streams::MediaStream::from_tracks(api_tracks))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_fft_size_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_fft_size\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::fft_size(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_frequency_bin_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_frequency_bin_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::frequency_bin_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_max_decibels_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_max_decibels\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::max_decibels(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_min_decibels_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_min_decibels\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::min_decibels(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_set_fft_size_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_set_fft_size\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_fft_size = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::set_fft_size(&mut *api_that_guard, api_fft_size); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_set_max_decibels_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_set_max_decibels\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::set_max_decibels(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_set_min_decibels_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_set_min_decibels\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::set_min_decibels(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_set_smoothing_time_constant_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_set_smoothing_time_constant\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AnalyserNode::set_smoothing_time_constant(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AnalyserNode_smoothing_time_constant_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AnalyserNode_smoothing_time_constant\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserNode::smoothing_time_constant(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_clear_onended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_clear_onended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::clear_onended(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_loop__impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_loop_\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::loop_(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_loop_end_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_loop_end\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::loop_end(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_loop_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_loop_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::loop_start(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_position_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_position\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceNode::position(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_buffer_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_buffer\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_audio_buffer = <AudioBuffer>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_buffer(&mut *api_that_guard, api_audio_buffer); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_loop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_loop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_value = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_loop(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_loop_end_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_loop_end\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_loop_end(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_loop_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_loop_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_loop_start(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_on_ended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_on_ended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_on_ended(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::start(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_start_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_start_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::start_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_start_at_with_offset_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_start_at_with_offset\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_start = <f64>::sse_decode(&mut deserializer);\nlet api_offset = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::start_at_with_offset(&mut *api_that_guard, api_start, api_offset); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_start_at_with_offset_and_duration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_start_at_with_offset_and_duration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_start = <f64>::sse_decode(&mut deserializer);\nlet api_offset = <f64>::sse_decode(&mut deserializer);\nlet api_duration = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::start_at_with_offset_and_duration(&mut *api_that_guard, api_start, api_offset, api_duration); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_stop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::stop(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioBufferSourceNode_stop_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioBufferSourceNode_stop_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioBufferSourceNode::stop_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_max_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_max_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::max_channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioDestinationNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__AudioDestinationNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioDestinationNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::AudioDestinationNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_set_type_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_set_type\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);\nlet api_type_ = <web_audio_api::node::BiquadFilterType>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::BiquadFilterNode::set_type(&mut *api_that_guard, api_type_); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__BiquadFilterNode_type__impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"BiquadFilterNode_type_\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterNode::type_(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelConfig_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelConfig_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelConfig::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelMergerNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelMergerNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelMergerNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ChannelSplitterNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ChannelSplitterNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ChannelSplitterNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_clear_onended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_clear_onended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::clear_onended(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_set_on_ended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_set_on_ended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::set_on_ended(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::start(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_start_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_start_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::start_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_stop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::stop(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConstantSourceNode_stop_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConstantSourceNode_stop_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConstantSourceNode::stop_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_normalize_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_normalize\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::normalize(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_set_buffer_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_set_buffer\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);\nlet api_buffer = <AudioBuffer>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::set_buffer(&mut *api_that_guard, api_buffer); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_set_normalize_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_set_normalize\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);\nlet api_value = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::set_normalize(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ConvolverNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ConvolverNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ConvolverNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DelayNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DelayNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DelayNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_reduction_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_reduction\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorNode::reduction(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__DynamicsCompressorNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"DynamicsCompressorNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::DynamicsCompressorNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__GainNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"GainNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::GainNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::IIRFilterNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::IIRFilterNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::IIRFilterNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::IIRFilterNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::IIRFilterNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__IirFilterNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"IirFilterNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::IIRFilterNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaElementAudioSourceNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaElementAudioSourceNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaElementAudioSourceNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaElementAudioSourceNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaElementAudioSourceNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaElementAudioSourceNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaElementAudioSourceNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaElementAudioSourceNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioDestinationNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioDestinationNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioDestinationNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioDestinationNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioDestinationNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioDestinationNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioDestinationNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioDestinationNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioSourceNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioSourceNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioSourceNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioSourceNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamAudioSourceNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamAudioSourceNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamAudioSourceNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamAudioSourceNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamTrackAudioSourceNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamTrackAudioSourceNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamTrackAudioSourceNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamTrackAudioSourceNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::MediaStreamTrackAudioSourceNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"MediaStreamTrackAudioSourceNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::MediaStreamTrackAudioSourceNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_clear_onended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_clear_onended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::clear_onended(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_set_on_ended_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_set_on_ended\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::set_on_ended(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_set_periodic_wave_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_set_periodic_wave\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_periodic_wave = <PeriodicWave>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::set_periodic_wave(&mut *api_that_guard, api_periodic_wave); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_set_type_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_set_type\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_type_ = <web_audio_api::node::OscillatorType>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::set_type(&mut *api_that_guard, api_type_); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_start\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::start(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_start_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_start_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::start_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_stop\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::stop(&mut *api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_stop_at_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_stop_at\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);\nlet api_when = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::OscillatorNode::stop_at(&mut *api_that_guard, api_when); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__OscillatorNode_type__impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"OscillatorNode_type_\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorNode::type_(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_cone_inner_angle_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_cone_inner_angle\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::cone_inner_angle(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_cone_outer_angle_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_cone_outer_angle\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::cone_outer_angle(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_cone_outer_gain_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_cone_outer_gain\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::cone_outer_gain(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_distance_model_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_distance_model\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::distance_model(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_max_distance_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_max_distance\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::max_distance(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_panning_model_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_panning_model\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::panning_model(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_ref_distance_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_ref_distance\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::ref_distance(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_rolloff_factor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_rolloff_factor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerNode::rolloff_factor(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_cone_inner_angle_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_cone_inner_angle\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_cone_inner_angle(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_cone_outer_angle_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_cone_outer_angle\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_cone_outer_angle(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_cone_outer_gain_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_cone_outer_gain\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_cone_outer_gain(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_distance_model_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_distance_model\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <web_audio_api::node::DistanceModelType>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_distance_model(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_max_distance_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_max_distance\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_max_distance(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_orientation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_orientation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_x = <f32>::sse_decode(&mut deserializer);\nlet api_y = <f32>::sse_decode(&mut deserializer);\nlet api_z = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_orientation(&*api_that_guard, api_x, api_y, api_z); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_panning_model_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_panning_model\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <web_audio_api::node::PanningModelType>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_panning_model(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_position_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_position\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_x = <f32>::sse_decode(&mut deserializer);\nlet api_y = <f32>::sse_decode(&mut deserializer);\nlet api_z = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_position(&*api_that_guard, api_x, api_y, api_z); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_ref_distance_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_ref_distance\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_ref_distance(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__PannerNode_set_rolloff_factor_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"PannerNode_set_rolloff_factor\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(&mut deserializer);\nlet api_value = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::PannerNode::set_rolloff_factor(&mut *api_that_guard, api_value); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_buffer_size_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_buffer_size\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::buffer_size(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_clear_onaudioprocess_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_clear_onaudioprocess\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::clear_onaudioprocess(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::ScriptProcessorNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__ScriptProcessorNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"ScriptProcessorNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::ScriptProcessorNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__StereoPannerNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"StereoPannerNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::StereoPannerNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_frb_override_connect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_frb_override_connect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);\nlet api_dest = <crate::frb_generated::AudioNodeImplementor>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet mut api_dest_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false), flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_dest, 1, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n1 => api_dest_guard = Some(api_dest.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\nlet api_dest_guard = api_dest_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::frb_override_connect(&*api_that_guard, &*api_dest_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_frb_override_curve_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_frb_override_curve\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::frb_override_curve(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_oversample_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_oversample\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperNode::oversample(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_set_curve_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_set_curve\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);\nlet api_curve = <Vec<f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::set_curve(&mut *api_that_guard, api_curve); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_set_on_processor_error_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_set_on_processor_error\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);\nlet api_callback = decode_DartFn_Inputs_String_Output_unit_AnyhowException(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::set_on_processor_error(&*api_that_guard, api_callback); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__WaveShaperNode_set_oversample_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"WaveShaperNode_set_oversample\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(&mut deserializer);\nlet api_oversample = <web_audio_api::node::OverSampleType>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, true)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),\n                _ => unreachable!(),\n            }\n        }\n        let mut api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::node::WaveShaperNode::set_oversample(&mut *api_that_guard, api_oversample); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__analyser_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"analyser_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::AnalyserOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__audio_buffer_source_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"audio_buffer_source_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioBufferSourceOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__audio_node_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"audio_node_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::AudioNodeOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__biquad_filter_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"biquad_filter_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__biquad_filter_type_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"biquad_filter_type_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::BiquadFilterType::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__channel_merger_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"channel_merger_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelMergerOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__channel_splitter_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"channel_splitter_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::ChannelSplitterOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__constant_source_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"constant_source_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConstantSourceOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__convolver_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"convolver_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::ConvolverOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__delay_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"delay_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::DelayOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__distance_model_type_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"distance_model_type_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::DistanceModelType::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__dynamics_compressor_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"dynamics_compressor_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::DynamicsCompressorOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__gain_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"gain_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::GainOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__oscillator_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"oscillator_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__oscillator_type_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"oscillator_type_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::OscillatorType::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__over_sample_type_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"over_sample_type_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::OverSampleType::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__panner_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"panner_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::PannerOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__panning_model_type_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"panning_model_type_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::PanningModelType::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__stereo_panner_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"stereo_panner_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::StereoPannerOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__node__wave_shaper_options_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"wave_shaper_options_default\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                         let output_ok = Result::<_,()>::Ok(web_audio_api::node::WaveShaperOptions::default())?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_channel_config_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_channel_config\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::channel_config(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_channel_count_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_channel_count\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::worklet::AudioWorkletNode::channel_count(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_channel_count_mode_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_channel_count_mode\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::worklet::AudioWorkletNode::channel_count_mode(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_channel_interpretation_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_channel_interpretation\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::worklet::AudioWorkletNode::channel_interpretation(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_clear_onprocessorerror_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_clear_onprocessorerror\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::clear_onprocessorerror(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_disconnect\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::disconnect(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_disconnect_output_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_disconnect_output\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);\nlet api_output = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::disconnect_output(&*api_that_guard, api_output); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_number_of_inputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_number_of_inputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::worklet::AudioWorkletNode::number_of_inputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_number_of_outputs_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_number_of_outputs\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok(web_audio_api::worklet::AudioWorkletNode::number_of_outputs(&*api_that_guard))?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_parameters_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_parameters\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::parameters(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }fn wire__web_audio_api__worklet__AudioWorkletNode_registration_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {\n                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: \"AudioWorkletNode_registration\", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { \n            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };\n            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {\n                    transform_result_sse::<_, ()>((move ||  {\n                        let mut api_that_guard = None;\nlet decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);\n        for i in decode_indices_ {\n            match i {\n                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),\n                _ => unreachable!(),\n            }\n        }\n        let api_that_guard = api_that_guard.unwrap();\n let output_ok = Result::<_,()>::Ok({ web_audio_api::worklet::AudioWorkletNode::registration(&*api_that_guard); })?;   Ok(output_ok)\n                    })())\n                } })\n            }\n\n// Section: static_checks\n\n#[allow(clippy::unnecessary_literal_unwrap)]\nconst _: fn() = || {\n{ let AnalyserOptions = None::<web_audio_api::node::AnalyserOptions>.unwrap(); let _: usize = AnalyserOptions.fft_size;\nlet _: f64 = AnalyserOptions.max_decibels;\nlet _: f64 = AnalyserOptions.min_decibels;\nlet _: f64 = AnalyserOptions.smoothing_time_constant;\nlet _: web_audio_api::node::AudioNodeOptions = AnalyserOptions.audio_node_options;\n } \n{ let AudioBufferOptions = None::<web_audio_api::AudioBufferOptions>.unwrap(); let _: usize = AudioBufferOptions.number_of_channels;\nlet _: usize = AudioBufferOptions.length;\nlet _: f32 = AudioBufferOptions.sample_rate;\n } \n{ let AudioBufferSourceOptions = None::<web_audio_api::node::AudioBufferSourceOptions>.unwrap(); let _: Option<AudioBuffer> = AudioBufferSourceOptions.buffer;\nlet _: f32 = AudioBufferSourceOptions.detune;\nlet _: bool = AudioBufferSourceOptions.loop_;\nlet _: f64 = AudioBufferSourceOptions.loop_start;\nlet _: f64 = AudioBufferSourceOptions.loop_end;\nlet _: f32 = AudioBufferSourceOptions.playback_rate;\n } \nmatch None::<web_audio_api::context::AudioContextLatencyCategory>.unwrap() { web_audio_api::context::AudioContextLatencyCategory::Balanced => {},web_audio_api::context::AudioContextLatencyCategory::Interactive => {},web_audio_api::context::AudioContextLatencyCategory::Playback => {},web_audio_api::context::AudioContextLatencyCategory::Custom(field0) => { let _: f64 = field0;\n } }\n{ let AudioContextOptions = None::<web_audio_api::context::AudioContextOptions>.unwrap(); let _: web_audio_api::context::AudioContextLatencyCategory = AudioContextOptions.latency_hint;\nlet _: Option<f32> = AudioContextOptions.sample_rate;\nlet _: String = AudioContextOptions.sink_id;\nlet _: web_audio_api::context::AudioContextRenderSizeCategory = AudioContextOptions.render_size_hint;\n } \n{ let AudioNodeOptions = None::<web_audio_api::node::AudioNodeOptions>.unwrap(); let _: usize = AudioNodeOptions.channel_count;\nlet _: web_audio_api::node::ChannelCountMode = AudioNodeOptions.channel_count_mode;\nlet _: web_audio_api::node::ChannelInterpretation = AudioNodeOptions.channel_interpretation;\n } \n{ let AudioParamDescriptor = None::<web_audio_api::AudioParamDescriptor>.unwrap(); let _: String = AudioParamDescriptor.name;\nlet _: web_audio_api::AutomationRate = AudioParamDescriptor.automation_rate;\nlet _: f32 = AudioParamDescriptor.default_value;\nlet _: f32 = AudioParamDescriptor.min_value;\nlet _: f32 = AudioParamDescriptor.max_value;\n } \n{ let AudioRenderCapacityOptions = None::<web_audio_api::AudioRenderCapacityOptions>.unwrap(); let _: f64 = AudioRenderCapacityOptions.update_interval;\n } \n{ let BiquadFilterOptions = None::<web_audio_api::node::BiquadFilterOptions>.unwrap(); let _: f32 = BiquadFilterOptions.q;\nlet _: f32 = BiquadFilterOptions.detune;\nlet _: f32 = BiquadFilterOptions.frequency;\nlet _: f32 = BiquadFilterOptions.gain;\nlet _: web_audio_api::node::BiquadFilterType = BiquadFilterOptions.type_;\nlet _: web_audio_api::node::AudioNodeOptions = BiquadFilterOptions.audio_node_options;\n } \n{ let ChannelMergerOptions = None::<web_audio_api::node::ChannelMergerOptions>.unwrap(); let _: usize = ChannelMergerOptions.number_of_inputs;\nlet _: web_audio_api::node::AudioNodeOptions = ChannelMergerOptions.audio_node_options;\n } \n{ let ChannelSplitterOptions = None::<web_audio_api::node::ChannelSplitterOptions>.unwrap(); let _: usize = ChannelSplitterOptions.number_of_outputs;\nlet _: web_audio_api::node::AudioNodeOptions = ChannelSplitterOptions.audio_node_options;\n } \n{ let ConstantSourceOptions = None::<web_audio_api::node::ConstantSourceOptions>.unwrap(); let _: f32 = ConstantSourceOptions.offset;\n } \n{ let ConvolverOptions = None::<web_audio_api::node::ConvolverOptions>.unwrap(); let _: Option<AudioBuffer> = ConvolverOptions.buffer;\nlet _: bool = ConvolverOptions.disable_normalization;\nlet _: web_audio_api::node::AudioNodeOptions = ConvolverOptions.audio_node_options;\n } \n{ let DelayOptions = None::<web_audio_api::node::DelayOptions>.unwrap(); let _: f64 = DelayOptions.max_delay_time;\nlet _: f64 = DelayOptions.delay_time;\nlet _: web_audio_api::node::AudioNodeOptions = DelayOptions.audio_node_options;\n } \n{ let DynamicsCompressorOptions = None::<web_audio_api::node::DynamicsCompressorOptions>.unwrap(); let _: f32 = DynamicsCompressorOptions.attack;\nlet _: f32 = DynamicsCompressorOptions.knee;\nlet _: f32 = DynamicsCompressorOptions.ratio;\nlet _: f32 = DynamicsCompressorOptions.release;\nlet _: f32 = DynamicsCompressorOptions.threshold;\nlet _: web_audio_api::node::AudioNodeOptions = DynamicsCompressorOptions.audio_node_options;\n } \n{ let GainOptions = None::<web_audio_api::node::GainOptions>.unwrap(); let _: f32 = GainOptions.gain;\nlet _: web_audio_api::node::AudioNodeOptions = GainOptions.audio_node_options;\n } \n{ let LogEntry = None::<crate::api::simple::LogEntry>.unwrap(); let _: i64 = LogEntry.time_millis;\nlet _: String = LogEntry.msg;\nlet _: crate::api::simple::Level = LogEntry.log_level;\nlet _: String = LogEntry.lbl;\n } \n{ let OscillatorOptions = None::<web_audio_api::node::OscillatorOptions>.unwrap(); let _: web_audio_api::node::OscillatorType = OscillatorOptions.type_;\nlet _: f32 = OscillatorOptions.frequency;\nlet _: f32 = OscillatorOptions.detune;\nlet _: Option<PeriodicWave> = OscillatorOptions.periodic_wave;\nlet _: web_audio_api::node::AudioNodeOptions = OscillatorOptions.audio_node_options;\n } \n{ let PannerOptions = None::<web_audio_api::node::PannerOptions>.unwrap(); let _: web_audio_api::node::PanningModelType = PannerOptions.panning_model;\nlet _: web_audio_api::node::DistanceModelType = PannerOptions.distance_model;\nlet _: f32 = PannerOptions.position_x;\nlet _: f32 = PannerOptions.position_y;\nlet _: f32 = PannerOptions.position_z;\nlet _: f32 = PannerOptions.orientation_x;\nlet _: f32 = PannerOptions.orientation_y;\nlet _: f32 = PannerOptions.orientation_z;\nlet _: f64 = PannerOptions.ref_distance;\nlet _: f64 = PannerOptions.max_distance;\nlet _: f64 = PannerOptions.rolloff_factor;\nlet _: f64 = PannerOptions.cone_inner_angle;\nlet _: f64 = PannerOptions.cone_outer_angle;\nlet _: f64 = PannerOptions.cone_outer_gain;\nlet _: web_audio_api::node::AudioNodeOptions = PannerOptions.audio_node_options;\n } \n{ let PeriodicWaveOptions = None::<web_audio_api::PeriodicWaveOptions>.unwrap(); let _: Option<Vec<f32>> = PeriodicWaveOptions.real;\nlet _: Option<Vec<f32>> = PeriodicWaveOptions.imag;\nlet _: bool = PeriodicWaveOptions.disable_normalization;\n } \n{ let StereoPannerOptions = None::<web_audio_api::node::StereoPannerOptions>.unwrap(); let _: f32 = StereoPannerOptions.pan;\nlet _: web_audio_api::node::AudioNodeOptions = StereoPannerOptions.audio_node_options;\n } \n{ let WaveShaperOptions = None::<web_audio_api::node::WaveShaperOptions>.unwrap(); let _: Option<Vec<f32>> = WaveShaperOptions.curve;\nlet _: web_audio_api::node::OverSampleType = WaveShaperOptions.oversample;\nlet _: web_audio_api::node::AudioNodeOptions = WaveShaperOptions.audio_node_options;\n } \n};\n\n// Section: related_funcs\n\nfn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(\n                    dart_opaque: flutter_rust_bridge::DartOpaque,\n                ) -> impl Fn(Event) -> flutter_rust_bridge::DartFnFuture<()> {\n                    use flutter_rust_bridge::IntoDart;\n\n                    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: Event) -> () {\n                        let args = vec![arg0.into_into_dart().into_dart(),];\n                        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;\n\n                        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n                        let action = deserializer.cursor.read_u8().unwrap();\n                        let ans = match action {\n                            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),\n                            1 => std::result::Result::Err(<flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer)),\n                            _ => unreachable!(),\n                        };\n                        deserializer.end();\n                        let ans = ans.expect(\"Dart throws exception but Rust side assume it is not failable\");ans\n                    }\n\n                    move |arg0: Event| {\n                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(\n                            dart_opaque.clone(), arg0\n                        ))\n                    }\n                }fn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(\n                    dart_opaque: flutter_rust_bridge::DartOpaque,\n                ) -> impl Fn(OfflineAudioCompletionEvent) -> flutter_rust_bridge::DartFnFuture<()> {\n                    use flutter_rust_bridge::IntoDart;\n\n                    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: OfflineAudioCompletionEvent) -> () {\n                        let args = vec![arg0.into_into_dart().into_dart(),];\n                        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;\n\n                        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n                        let action = deserializer.cursor.read_u8().unwrap();\n                        let ans = match action {\n                            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),\n                            1 => std::result::Result::Err(<flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer)),\n                            _ => unreachable!(),\n                        };\n                        deserializer.end();\n                        let ans = ans.expect(\"Dart throws exception but Rust side assume it is not failable\");ans\n                    }\n\n                    move |arg0: OfflineAudioCompletionEvent| {\n                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(\n                            dart_opaque.clone(), arg0\n                        ))\n                    }\n                }fn decode_DartFn_Inputs_String_Output_unit_AnyhowException(\n                    dart_opaque: flutter_rust_bridge::DartOpaque,\n                ) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<()> {\n                    use flutter_rust_bridge::IntoDart;\n\n                    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> () {\n                        let args = vec![arg0.into_into_dart().into_dart(),];\n                        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;\n\n                        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);\n                        let action = deserializer.cursor.read_u8().unwrap();\n                        let ans = match action {\n                            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),\n                            1 => std::result::Result::Err(<flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer)),\n                            _ => unreachable!(),\n                        };\n                        deserializer.end();\n                        let ans = ans.expect(\"Dart throws exception but Rust side assume it is not failable\");ans\n                    }\n\n                    move |arg0: String| {\n                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(\n                            dart_opaque.clone(), arg0\n                        ))\n                    }\n                }flutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>);\nflutter_rust_bridge::frb_generated_moi_arc_impl_value!(flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>);\n\n\n// Section: extra_from_parser\n\npub enum AudioNodeImplementor {\n            Variant0(RustAutoOpaque<AnalyserNode>),\nVariant1(RustAutoOpaque<AudioBufferSourceNode>),\nVariant2(RustAutoOpaque<AudioDestinationNode>),\nVariant3(RustAutoOpaque<AudioParam>),\nVariant4(RustAutoOpaque<AudioWorkletNode>),\nVariant5(RustAutoOpaque<BiquadFilterNode>),\nVariant6(RustAutoOpaque<ChannelMergerNode>),\nVariant7(RustAutoOpaque<ChannelSplitterNode>),\nVariant8(RustAutoOpaque<ConstantSourceNode>),\nVariant9(RustAutoOpaque<ConvolverNode>),\nVariant10(RustAutoOpaque<DelayNode>),\nVariant11(RustAutoOpaque<DynamicsCompressorNode>),\nVariant12(RustAutoOpaque<GainNode>),\nVariant13(RustAutoOpaque<IIRFilterNode>),\nVariant14(RustAutoOpaque<MediaElementAudioSourceNode>),\nVariant15(RustAutoOpaque<MediaStreamAudioDestinationNode>),\nVariant16(RustAutoOpaque<MediaStreamAudioSourceNode>),\nVariant17(RustAutoOpaque<MediaStreamTrackAudioSourceNode>),\nVariant18(RustAutoOpaque<OscillatorNode>),\nVariant19(RustAutoOpaque<PannerNode>),\nVariant20(RustAutoOpaque<ScriptProcessorNode>),\nVariant21(RustAutoOpaque<StereoPannerNode>),\nVariant22(RustAutoOpaque<WaveShaperNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_AudioNodeImplementor(a: AudioNodeImplementor) { }\n                \n        impl AudioNodeImplementor {\n            pub fn blocking_read(&self) -> AudioNodeImplementorRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockReadGuard::Variant0(inner.blocking_read()),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockReadGuard::Variant1(inner.blocking_read()),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockReadGuard::Variant2(inner.blocking_read()),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockReadGuard::Variant3(inner.blocking_read()),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockReadGuard::Variant4(inner.blocking_read()),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockReadGuard::Variant5(inner.blocking_read()),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockReadGuard::Variant6(inner.blocking_read()),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockReadGuard::Variant7(inner.blocking_read()),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockReadGuard::Variant8(inner.blocking_read()),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockReadGuard::Variant9(inner.blocking_read()),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockReadGuard::Variant10(inner.blocking_read()),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockReadGuard::Variant11(inner.blocking_read()),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockReadGuard::Variant12(inner.blocking_read()),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockReadGuard::Variant13(inner.blocking_read()),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockReadGuard::Variant14(inner.blocking_read()),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockReadGuard::Variant15(inner.blocking_read()),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockReadGuard::Variant16(inner.blocking_read()),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockReadGuard::Variant17(inner.blocking_read()),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockReadGuard::Variant18(inner.blocking_read()),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockReadGuard::Variant19(inner.blocking_read()),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockReadGuard::Variant20(inner.blocking_read()),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockReadGuard::Variant21(inner.blocking_read()),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockReadGuard::Variant22(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> AudioNodeImplementorRwLockWriteGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockWriteGuard::Variant0(inner.blocking_write()),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockWriteGuard::Variant1(inner.blocking_write()),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockWriteGuard::Variant2(inner.blocking_write()),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockWriteGuard::Variant3(inner.blocking_write()),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockWriteGuard::Variant4(inner.blocking_write()),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockWriteGuard::Variant5(inner.blocking_write()),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockWriteGuard::Variant6(inner.blocking_write()),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockWriteGuard::Variant7(inner.blocking_write()),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockWriteGuard::Variant8(inner.blocking_write()),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockWriteGuard::Variant9(inner.blocking_write()),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockWriteGuard::Variant10(inner.blocking_write()),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockWriteGuard::Variant11(inner.blocking_write()),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockWriteGuard::Variant12(inner.blocking_write()),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockWriteGuard::Variant13(inner.blocking_write()),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockWriteGuard::Variant14(inner.blocking_write()),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockWriteGuard::Variant15(inner.blocking_write()),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockWriteGuard::Variant16(inner.blocking_write()),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockWriteGuard::Variant17(inner.blocking_write()),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockWriteGuard::Variant18(inner.blocking_write()),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockWriteGuard::Variant19(inner.blocking_write()),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockWriteGuard::Variant20(inner.blocking_write()),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockWriteGuard::Variant21(inner.blocking_write()),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockWriteGuard::Variant22(inner.blocking_write()),\n\n        }\n            }\n\n            pub async fn read(&self) -> AudioNodeImplementorRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockReadGuard::Variant0(inner.read().await),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockReadGuard::Variant1(inner.read().await),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockReadGuard::Variant2(inner.read().await),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockReadGuard::Variant3(inner.read().await),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockReadGuard::Variant4(inner.read().await),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockReadGuard::Variant5(inner.read().await),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockReadGuard::Variant6(inner.read().await),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockReadGuard::Variant7(inner.read().await),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockReadGuard::Variant8(inner.read().await),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockReadGuard::Variant9(inner.read().await),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockReadGuard::Variant10(inner.read().await),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockReadGuard::Variant11(inner.read().await),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockReadGuard::Variant12(inner.read().await),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockReadGuard::Variant13(inner.read().await),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockReadGuard::Variant14(inner.read().await),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockReadGuard::Variant15(inner.read().await),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockReadGuard::Variant16(inner.read().await),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockReadGuard::Variant17(inner.read().await),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockReadGuard::Variant18(inner.read().await),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockReadGuard::Variant19(inner.read().await),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockReadGuard::Variant20(inner.read().await),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockReadGuard::Variant21(inner.read().await),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockReadGuard::Variant22(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> AudioNodeImplementorRwLockWriteGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockWriteGuard::Variant0(inner.write().await),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockWriteGuard::Variant1(inner.write().await),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockWriteGuard::Variant2(inner.write().await),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockWriteGuard::Variant3(inner.write().await),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockWriteGuard::Variant4(inner.write().await),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockWriteGuard::Variant5(inner.write().await),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockWriteGuard::Variant6(inner.write().await),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockWriteGuard::Variant7(inner.write().await),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockWriteGuard::Variant8(inner.write().await),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockWriteGuard::Variant9(inner.write().await),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockWriteGuard::Variant10(inner.write().await),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockWriteGuard::Variant11(inner.write().await),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockWriteGuard::Variant12(inner.write().await),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockWriteGuard::Variant13(inner.write().await),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockWriteGuard::Variant14(inner.write().await),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockWriteGuard::Variant15(inner.write().await),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockWriteGuard::Variant16(inner.write().await),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockWriteGuard::Variant17(inner.write().await),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockWriteGuard::Variant18(inner.write().await),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockWriteGuard::Variant19(inner.write().await),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockWriteGuard::Variant20(inner.write().await),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockWriteGuard::Variant21(inner.write().await),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockWriteGuard::Variant22(inner.write().await),\n\n        }\n            }\n        }\n\n        impl Lockable for AudioNodeImplementor {\n            type RwLockReadGuard<'a> = AudioNodeImplementorRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = AudioNodeImplementorRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant1(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant2(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant3(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant4(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant5(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant6(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant7(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant8(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant9(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant10(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant11(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant12(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant13(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant14(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant15(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant16(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant17(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant18(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant19(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant20(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant21(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant22(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum AudioNodeImplementorRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AnalyserNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioDestinationNode>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioParam>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioWorkletNode>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ChannelMergerNode>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ChannelSplitterNode>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConstantSourceNode>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConvolverNode>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DelayNode>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, GainNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, IIRFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaElementAudioSourceNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioDestinationNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioSourceNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamTrackAudioSourceNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ScriptProcessorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, StereoPannerNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, WaveShaperNode>),\n\n        }\n\n        \n        impl std::ops::Deref for AudioNodeImplementorRwLockReadGuard<'_> {\n            type Target = dyn AudioNode;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref(),\nSelf::Variant1(inner) => inner.deref(),\nSelf::Variant2(inner) => inner.deref(),\nSelf::Variant3(inner) => inner.deref(),\nSelf::Variant4(inner) => inner.deref(),\nSelf::Variant5(inner) => inner.deref(),\nSelf::Variant6(inner) => inner.deref(),\nSelf::Variant7(inner) => inner.deref(),\nSelf::Variant8(inner) => inner.deref(),\nSelf::Variant9(inner) => inner.deref(),\nSelf::Variant10(inner) => inner.deref(),\nSelf::Variant11(inner) => inner.deref(),\nSelf::Variant12(inner) => inner.deref(),\nSelf::Variant13(inner) => inner.deref(),\nSelf::Variant14(inner) => inner.deref(),\nSelf::Variant15(inner) => inner.deref(),\nSelf::Variant16(inner) => inner.deref(),\nSelf::Variant17(inner) => inner.deref(),\nSelf::Variant18(inner) => inner.deref(),\nSelf::Variant19(inner) => inner.deref(),\nSelf::Variant20(inner) => inner.deref(),\nSelf::Variant21(inner) => inner.deref(),\nSelf::Variant22(inner) => inner.deref(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum AudioNodeImplementorRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AnalyserNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioDestinationNode>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioParam>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioWorkletNode>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ChannelMergerNode>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ChannelSplitterNode>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConstantSourceNode>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConvolverNode>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DelayNode>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, GainNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, IIRFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaElementAudioSourceNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioDestinationNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioSourceNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamTrackAudioSourceNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ScriptProcessorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, StereoPannerNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, WaveShaperNode>),\n\n        }\n\n        \n        impl std::ops::Deref for AudioNodeImplementorRwLockWriteGuard<'_> {\n            type Target = dyn AudioNode;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref(),\nSelf::Variant1(inner) => inner.deref(),\nSelf::Variant2(inner) => inner.deref(),\nSelf::Variant3(inner) => inner.deref(),\nSelf::Variant4(inner) => inner.deref(),\nSelf::Variant5(inner) => inner.deref(),\nSelf::Variant6(inner) => inner.deref(),\nSelf::Variant7(inner) => inner.deref(),\nSelf::Variant8(inner) => inner.deref(),\nSelf::Variant9(inner) => inner.deref(),\nSelf::Variant10(inner) => inner.deref(),\nSelf::Variant11(inner) => inner.deref(),\nSelf::Variant12(inner) => inner.deref(),\nSelf::Variant13(inner) => inner.deref(),\nSelf::Variant14(inner) => inner.deref(),\nSelf::Variant15(inner) => inner.deref(),\nSelf::Variant16(inner) => inner.deref(),\nSelf::Variant17(inner) => inner.deref(),\nSelf::Variant18(inner) => inner.deref(),\nSelf::Variant19(inner) => inner.deref(),\nSelf::Variant20(inner) => inner.deref(),\nSelf::Variant21(inner) => inner.deref(),\nSelf::Variant22(inner) => inner.deref(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for AudioNodeImplementorRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    match self {\n            Self::Variant0(inner) => inner.deref_mut(),\nSelf::Variant1(inner) => inner.deref_mut(),\nSelf::Variant2(inner) => inner.deref_mut(),\nSelf::Variant3(inner) => inner.deref_mut(),\nSelf::Variant4(inner) => inner.deref_mut(),\nSelf::Variant5(inner) => inner.deref_mut(),\nSelf::Variant6(inner) => inner.deref_mut(),\nSelf::Variant7(inner) => inner.deref_mut(),\nSelf::Variant8(inner) => inner.deref_mut(),\nSelf::Variant9(inner) => inner.deref_mut(),\nSelf::Variant10(inner) => inner.deref_mut(),\nSelf::Variant11(inner) => inner.deref_mut(),\nSelf::Variant12(inner) => inner.deref_mut(),\nSelf::Variant13(inner) => inner.deref_mut(),\nSelf::Variant14(inner) => inner.deref_mut(),\nSelf::Variant15(inner) => inner.deref_mut(),\nSelf::Variant16(inner) => inner.deref_mut(),\nSelf::Variant17(inner) => inner.deref_mut(),\nSelf::Variant18(inner) => inner.deref_mut(),\nSelf::Variant19(inner) => inner.deref_mut(),\nSelf::Variant20(inner) => inner.deref_mut(),\nSelf::Variant21(inner) => inner.deref_mut(),\nSelf::Variant22(inner) => inner.deref_mut(),\n\n        }\n                }\n            }\n            \n        pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            Variant0(RustAutoOpaque<AudioBufferSourceNode>),\nVariant1(RustAutoOpaque<AudioBufferSourceNode>),\nVariant2(RustAutoOpaque<AudioListener>),\nVariant3(RustAutoOpaque<AudioListener>),\nVariant4(RustAutoOpaque<AudioListener>),\nVariant5(RustAutoOpaque<AudioListener>),\nVariant6(RustAutoOpaque<AudioListener>),\nVariant7(RustAutoOpaque<AudioListener>),\nVariant8(RustAutoOpaque<AudioListener>),\nVariant9(RustAutoOpaque<AudioListener>),\nVariant10(RustAutoOpaque<AudioListener>),\nVariant11(RustAutoOpaque<BiquadFilterNode>),\nVariant12(RustAutoOpaque<BiquadFilterNode>),\nVariant13(RustAutoOpaque<BiquadFilterNode>),\nVariant14(RustAutoOpaque<BiquadFilterNode>),\nVariant15(RustAutoOpaque<ConstantSourceNode>),\nVariant16(RustAutoOpaque<DelayNode>),\nVariant17(RustAutoOpaque<DynamicsCompressorNode>),\nVariant18(RustAutoOpaque<DynamicsCompressorNode>),\nVariant19(RustAutoOpaque<DynamicsCompressorNode>),\nVariant20(RustAutoOpaque<DynamicsCompressorNode>),\nVariant21(RustAutoOpaque<DynamicsCompressorNode>),\nVariant22(RustAutoOpaque<GainNode>),\nVariant23(RustAutoOpaque<OscillatorNode>),\nVariant24(RustAutoOpaque<OscillatorNode>),\nVariant25(RustAutoOpaque<PannerNode>),\nVariant26(RustAutoOpaque<PannerNode>),\nVariant27(RustAutoOpaque<PannerNode>),\nVariant28(RustAutoOpaque<PannerNode>),\nVariant29(RustAutoOpaque<PannerNode>),\nVariant30(RustAutoOpaque<PannerNode>),\nVariant31(RustAutoOpaque<StereoPannerNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum(a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum) { }\n                \n        impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),\nSelf::Variant1(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant1(inner.blocking_read()),\nSelf::Variant2(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant2(inner.blocking_read()),\nSelf::Variant3(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant3(inner.blocking_read()),\nSelf::Variant4(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant4(inner.blocking_read()),\nSelf::Variant5(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant5(inner.blocking_read()),\nSelf::Variant6(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant6(inner.blocking_read()),\nSelf::Variant7(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant7(inner.blocking_read()),\nSelf::Variant8(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant8(inner.blocking_read()),\nSelf::Variant9(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant9(inner.blocking_read()),\nSelf::Variant10(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant10(inner.blocking_read()),\nSelf::Variant11(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant11(inner.blocking_read()),\nSelf::Variant12(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant12(inner.blocking_read()),\nSelf::Variant13(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant13(inner.blocking_read()),\nSelf::Variant14(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant14(inner.blocking_read()),\nSelf::Variant15(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant15(inner.blocking_read()),\nSelf::Variant16(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant16(inner.blocking_read()),\nSelf::Variant17(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant17(inner.blocking_read()),\nSelf::Variant18(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant18(inner.blocking_read()),\nSelf::Variant19(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant19(inner.blocking_read()),\nSelf::Variant20(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant20(inner.blocking_read()),\nSelf::Variant21(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant21(inner.blocking_read()),\nSelf::Variant22(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant22(inner.blocking_read()),\nSelf::Variant23(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant23(inner.blocking_read()),\nSelf::Variant24(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant24(inner.blocking_read()),\nSelf::Variant25(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant25(inner.blocking_read()),\nSelf::Variant26(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant26(inner.blocking_read()),\nSelf::Variant27(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant27(inner.blocking_read()),\nSelf::Variant28(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant28(inner.blocking_read()),\nSelf::Variant29(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant29(inner.blocking_read()),\nSelf::Variant30(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant30(inner.blocking_read()),\nSelf::Variant31(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant31(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n\n            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant0(inner.read().await),\nSelf::Variant1(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant1(inner.read().await),\nSelf::Variant2(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant2(inner.read().await),\nSelf::Variant3(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant3(inner.read().await),\nSelf::Variant4(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant4(inner.read().await),\nSelf::Variant5(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant5(inner.read().await),\nSelf::Variant6(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant6(inner.read().await),\nSelf::Variant7(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant7(inner.read().await),\nSelf::Variant8(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant8(inner.read().await),\nSelf::Variant9(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant9(inner.read().await),\nSelf::Variant10(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant10(inner.read().await),\nSelf::Variant11(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant11(inner.read().await),\nSelf::Variant12(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant12(inner.read().await),\nSelf::Variant13(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant13(inner.read().await),\nSelf::Variant14(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant14(inner.read().await),\nSelf::Variant15(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant15(inner.read().await),\nSelf::Variant16(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant16(inner.read().await),\nSelf::Variant17(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant17(inner.read().await),\nSelf::Variant18(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant18(inner.read().await),\nSelf::Variant19(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant19(inner.read().await),\nSelf::Variant20(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant20(inner.read().await),\nSelf::Variant21(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant21(inner.read().await),\nSelf::Variant22(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant22(inner.read().await),\nSelf::Variant23(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant23(inner.read().await),\nSelf::Variant24(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant24(inner.read().await),\nSelf::Variant25(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant25(inner.read().await),\nSelf::Variant26(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant26(inner.read().await),\nSelf::Variant27(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant27(inner.read().await),\nSelf::Variant28(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant28(inner.read().await),\nSelf::Variant29(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant29(inner.read().await),\nSelf::Variant30(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant30(inner.read().await),\nSelf::Variant31(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant31(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n        }\n\n        impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant1(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant2(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant3(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant4(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant5(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant6(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant7(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant8(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant9(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant10(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant11(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant12(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant13(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant14(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant15(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant16(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant17(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant18(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant19(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant20(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant21(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant22(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant23(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant24(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant25(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant26(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant27(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant28(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant29(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant30(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant31(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConstantSourceNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DelayNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, GainNode>),\nVariant23(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant24(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant25(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant26(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant27(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant28(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant29(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant30(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant31(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, StereoPannerNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'_> {\n            type Target = AudioParam;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().detune(),\nSelf::Variant1(inner) => inner.deref().playback_rate(),\nSelf::Variant2(inner) => inner.deref().forward_x(),\nSelf::Variant3(inner) => inner.deref().forward_y(),\nSelf::Variant4(inner) => inner.deref().forward_z(),\nSelf::Variant5(inner) => inner.deref().position_x(),\nSelf::Variant6(inner) => inner.deref().position_y(),\nSelf::Variant7(inner) => inner.deref().position_z(),\nSelf::Variant8(inner) => inner.deref().up_x(),\nSelf::Variant9(inner) => inner.deref().up_y(),\nSelf::Variant10(inner) => inner.deref().up_z(),\nSelf::Variant11(inner) => inner.deref().detune(),\nSelf::Variant12(inner) => inner.deref().frequency(),\nSelf::Variant13(inner) => inner.deref().gain(),\nSelf::Variant14(inner) => inner.deref().q(),\nSelf::Variant15(inner) => inner.deref().offset(),\nSelf::Variant16(inner) => inner.deref().delay_time(),\nSelf::Variant17(inner) => inner.deref().attack(),\nSelf::Variant18(inner) => inner.deref().knee(),\nSelf::Variant19(inner) => inner.deref().ratio(),\nSelf::Variant20(inner) => inner.deref().release(),\nSelf::Variant21(inner) => inner.deref().threshold(),\nSelf::Variant22(inner) => inner.deref().gain(),\nSelf::Variant23(inner) => inner.deref().detune(),\nSelf::Variant24(inner) => inner.deref().frequency(),\nSelf::Variant25(inner) => inner.deref().orientation_x(),\nSelf::Variant26(inner) => inner.deref().orientation_y(),\nSelf::Variant27(inner) => inner.deref().orientation_z(),\nSelf::Variant28(inner) => inner.deref().position_x(),\nSelf::Variant29(inner) => inner.deref().position_y(),\nSelf::Variant30(inner) => inner.deref().position_z(),\nSelf::Variant31(inner) => inner.deref().pan(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConstantSourceNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DelayNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, GainNode>),\nVariant23(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant24(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant25(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant26(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant27(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant28(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant29(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant30(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant31(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, StereoPannerNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'_> {\n            type Target = AudioParam;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().detune(),\nSelf::Variant1(inner) => inner.deref().playback_rate(),\nSelf::Variant2(inner) => inner.deref().forward_x(),\nSelf::Variant3(inner) => inner.deref().forward_y(),\nSelf::Variant4(inner) => inner.deref().forward_z(),\nSelf::Variant5(inner) => inner.deref().position_x(),\nSelf::Variant6(inner) => inner.deref().position_y(),\nSelf::Variant7(inner) => inner.deref().position_z(),\nSelf::Variant8(inner) => inner.deref().up_x(),\nSelf::Variant9(inner) => inner.deref().up_y(),\nSelf::Variant10(inner) => inner.deref().up_z(),\nSelf::Variant11(inner) => inner.deref().detune(),\nSelf::Variant12(inner) => inner.deref().frequency(),\nSelf::Variant13(inner) => inner.deref().gain(),\nSelf::Variant14(inner) => inner.deref().q(),\nSelf::Variant15(inner) => inner.deref().offset(),\nSelf::Variant16(inner) => inner.deref().delay_time(),\nSelf::Variant17(inner) => inner.deref().attack(),\nSelf::Variant18(inner) => inner.deref().knee(),\nSelf::Variant19(inner) => inner.deref().ratio(),\nSelf::Variant20(inner) => inner.deref().release(),\nSelf::Variant21(inner) => inner.deref().threshold(),\nSelf::Variant22(inner) => inner.deref().gain(),\nSelf::Variant23(inner) => inner.deref().detune(),\nSelf::Variant24(inner) => inner.deref().frequency(),\nSelf::Variant25(inner) => inner.deref().orientation_x(),\nSelf::Variant26(inner) => inner.deref().orientation_y(),\nSelf::Variant27(inner) => inner.deref().orientation_z(),\nSelf::Variant28(inner) => inner.deref().position_x(),\nSelf::Variant29(inner) => inner.deref().position_y(),\nSelf::Variant30(inner) => inner.deref().position_z(),\nSelf::Variant31(inner) => inner.deref().pan(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    unreachable!()\n                }\n            }\n            \n        pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            Variant0(RustAutoOpaque<MediaStreamAudioDestinationNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum(a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum) { }\n                \n        impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n\n            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard::Variant0(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n        }\n\n        impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioDestinationNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'_> {\n            type Target = MediaStream;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().stream(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioDestinationNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'_> {\n            type Target = MediaStream;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().stream(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    unreachable!()\n                }\n            }\n            \n        \n\n// Section: dart2rust\n\n\n                impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <String>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::anyhow::anyhow!(\"{}\", inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AnalyserNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AudioBufferSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AudioDestinationNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AudioListener> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AudioParam> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<AudioWorkletNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<BiquadFilterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<ChannelMergerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<ChannelSplitterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<ConstantSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<ConvolverNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<DelayNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<DynamicsCompressorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<GainNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<IIRFilterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<MediaElementAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<MediaStreamAudioDestinationNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<MediaStreamAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<MediaStreamTrackAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<OscillatorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<PannerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<ScriptProcessorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<StereoPannerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for RustAutoOpaqueMoi<WaveShaperNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);}\n                }\n                \n                impl SseDecode for  AnalyserNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AnalyserNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioBuffer {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  AudioBufferSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AudioBufferSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  AudioDestinationNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AudioDestinationNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioListener {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioParam {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioParamId {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioProcessingEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioRenderCapacity {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioRenderCapacityEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for AudioWorkletNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  BiquadFilterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BiquadFilterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for BlobEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for ChannelConfig {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  ChannelMergerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ChannelMergerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  ChannelSplitterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ChannelSplitterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for ConcreteBaseAudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  ConstantSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ConstantSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  ConvolverNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ConvolverNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  DelayNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< DelayNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  DynamicsCompressorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< DynamicsCompressorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for Event {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  GainNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< GainNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  IIRFilterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IIRFilterNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MediaElementAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MediaRecorder {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MediaStream {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  MediaStreamAudioDestinationNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamAudioDestinationNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  MediaStreamAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MediaStreamConstraints {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MediaStreamTrack {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  MediaStreamTrackAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamTrackAudioSourceNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for MyMediaElement {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for OfflineAudioCompletionEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for OfflineAudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  OscillatorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< OscillatorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  PannerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PannerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for PeriodicWave {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  ScriptProcessorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ScriptProcessorNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  StereoPannerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< StereoPannerNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for  WaveShaperNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< WaveShaperNode>>>::sse_decode(deserializer);\n        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);}\n                }\n                \n                impl SseDecode for flutter_rust_bridge::DartOpaque {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <usize>::sse_decode(deserializer);\n        return decode_rust_opaque_moi(inner);}\n                }\n                \n                impl SseDecode for StreamSink<crate::api::simple::LogEntry,flutter_rust_bridge::for_generated::SseCodec> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <String>::sse_decode(deserializer);\n        return StreamSink::deserialize(inner);}\n                }\n                \n                impl SseDecode for String {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <Vec<u8>>::sse_decode(deserializer);\n        return String::from_utf8(inner).unwrap();}\n                }\n                \n                impl SseDecode for web_audio_api::node::AnalyserOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_fftSize = <usize>::sse_decode(deserializer);\nlet mut var_maxDecibels = <f64>::sse_decode(deserializer);\nlet mut var_minDecibels = <f64>::sse_decode(deserializer);\nlet mut var_smoothingTimeConstant = <f64>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::AnalyserOptions{fft_size: var_fftSize, max_decibels: var_maxDecibels, min_decibels: var_minDecibels, smoothing_time_constant: var_smoothingTimeConstant, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::AudioBufferOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_numberOfChannels = <usize>::sse_decode(deserializer);\nlet mut var_length = <usize>::sse_decode(deserializer);\nlet mut var_sampleRate = <f32>::sse_decode(deserializer);\nreturn web_audio_api::AudioBufferOptions{number_of_channels: var_numberOfChannels, length: var_length, sample_rate: var_sampleRate};}\n                }\n                \n                impl SseDecode for web_audio_api::node::AudioBufferSourceOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_buffer = <Option<AudioBuffer>>::sse_decode(deserializer);\nlet mut var_detune = <f32>::sse_decode(deserializer);\nlet mut var_loop = <bool>::sse_decode(deserializer);\nlet mut var_loopStart = <f64>::sse_decode(deserializer);\nlet mut var_loopEnd = <f64>::sse_decode(deserializer);\nlet mut var_playbackRate = <f32>::sse_decode(deserializer);\nreturn web_audio_api::node::AudioBufferSourceOptions{buffer: var_buffer, detune: var_detune, loop_: var_loop, loop_start: var_loopStart, loop_end: var_loopEnd, playback_rate: var_playbackRate};}\n                }\n                \n                impl SseDecode for web_audio_api::context::AudioContextLatencyCategory {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);\n            match tag_ {0 => { return web_audio_api::context::AudioContextLatencyCategory::Balanced; }\n1 => { return web_audio_api::context::AudioContextLatencyCategory::Interactive; }\n2 => { return web_audio_api::context::AudioContextLatencyCategory::Playback; }\n3 => { let mut var_field0 = <f64>::sse_decode(deserializer);\nreturn web_audio_api::context::AudioContextLatencyCategory::Custom(var_field0); }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseDecode for web_audio_api::context::AudioContextOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_latencyHint = <web_audio_api::context::AudioContextLatencyCategory>::sse_decode(deserializer);\nlet mut var_sampleRate = <Option<f32>>::sse_decode(deserializer);\nlet mut var_sinkId = <String>::sse_decode(deserializer);\nlet mut var_renderSizeHint = <web_audio_api::context::AudioContextRenderSizeCategory>::sse_decode(deserializer);\nreturn web_audio_api::context::AudioContextOptions{latency_hint: var_latencyHint, sample_rate: var_sampleRate, sink_id: var_sinkId, render_size_hint: var_renderSizeHint};}\n                }\n                \n                impl SseDecode for web_audio_api::context::AudioContextRenderSizeCategory {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::context::AudioContextRenderSizeCategory::Default,\n            _ => unreachable!(\"Invalid variant for AudioContextRenderSizeCategory: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::context::AudioContextState {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::context::AudioContextState::Suspended,\n1 => web_audio_api::context::AudioContextState::Running,\n2 => web_audio_api::context::AudioContextState::Closed,\n            _ => unreachable!(\"Invalid variant for AudioContextState: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for crate::frb_generated::AudioNodeImplementor {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);\n            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<AnalyserNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant0(var_field0); }\n1 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant1(var_field0); }\n2 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioDestinationNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant2(var_field0); }\n3 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioParam>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant3(var_field0); }\n4 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioWorkletNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant4(var_field0); }\n5 => { let mut var_field0 = <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant5(var_field0); }\n6 => { let mut var_field0 = <RustAutoOpaqueMoi<ChannelMergerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant6(var_field0); }\n7 => { let mut var_field0 = <RustAutoOpaqueMoi<ChannelSplitterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant7(var_field0); }\n8 => { let mut var_field0 = <RustAutoOpaqueMoi<ConstantSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant8(var_field0); }\n9 => { let mut var_field0 = <RustAutoOpaqueMoi<ConvolverNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant9(var_field0); }\n10 => { let mut var_field0 = <RustAutoOpaqueMoi<DelayNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant10(var_field0); }\n11 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant11(var_field0); }\n12 => { let mut var_field0 = <RustAutoOpaqueMoi<GainNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant12(var_field0); }\n13 => { let mut var_field0 = <RustAutoOpaqueMoi<IIRFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant13(var_field0); }\n14 => { let mut var_field0 = <RustAutoOpaqueMoi<MediaElementAudioSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant14(var_field0); }\n15 => { let mut var_field0 = <RustAutoOpaqueMoi<MediaStreamAudioDestinationNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant15(var_field0); }\n16 => { let mut var_field0 = <RustAutoOpaqueMoi<MediaStreamAudioSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant16(var_field0); }\n17 => { let mut var_field0 = <RustAutoOpaqueMoi<MediaStreamTrackAudioSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant17(var_field0); }\n18 => { let mut var_field0 = <RustAutoOpaqueMoi<OscillatorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant18(var_field0); }\n19 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant19(var_field0); }\n20 => { let mut var_field0 = <RustAutoOpaqueMoi<ScriptProcessorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant20(var_field0); }\n21 => { let mut var_field0 = <RustAutoOpaqueMoi<StereoPannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant21(var_field0); }\n22 => { let mut var_field0 = <RustAutoOpaqueMoi<WaveShaperNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::AudioNodeImplementor::Variant22(var_field0); }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseDecode for web_audio_api::node::AudioNodeOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_channelCount = <usize>::sse_decode(deserializer);\nlet mut var_channelCountMode = <web_audio_api::node::ChannelCountMode>::sse_decode(deserializer);\nlet mut var_channelInterpretation = <web_audio_api::node::ChannelInterpretation>::sse_decode(deserializer);\nreturn web_audio_api::node::AudioNodeOptions{channel_count: var_channelCount, channel_count_mode: var_channelCountMode, channel_interpretation: var_channelInterpretation};}\n                }\n                \n                impl SseDecode for web_audio_api::AudioParamDescriptor {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_name = <String>::sse_decode(deserializer);\nlet mut var_automationRate = <web_audio_api::AutomationRate>::sse_decode(deserializer);\nlet mut var_defaultValue = <f32>::sse_decode(deserializer);\nlet mut var_minValue = <f32>::sse_decode(deserializer);\nlet mut var_maxValue = <f32>::sse_decode(deserializer);\nreturn web_audio_api::AudioParamDescriptor{name: var_name, automation_rate: var_automationRate, default_value: var_defaultValue, min_value: var_minValue, max_value: var_maxValue};}\n                }\n                \n                impl SseDecode for web_audio_api::AudioRenderCapacityOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_updateInterval = <f64>::sse_decode(deserializer);\nreturn web_audio_api::AudioRenderCapacityOptions{update_interval: var_updateInterval};}\n                }\n                \n                impl SseDecode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);\n            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant0(var_field0); }\n1 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant1(var_field0); }\n2 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant2(var_field0); }\n3 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant3(var_field0); }\n4 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant4(var_field0); }\n5 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant5(var_field0); }\n6 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant6(var_field0); }\n7 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant7(var_field0); }\n8 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant8(var_field0); }\n9 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant9(var_field0); }\n10 => { let mut var_field0 = <RustAutoOpaqueMoi<AudioListener>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant10(var_field0); }\n11 => { let mut var_field0 = <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant11(var_field0); }\n12 => { let mut var_field0 = <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant12(var_field0); }\n13 => { let mut var_field0 = <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant13(var_field0); }\n14 => { let mut var_field0 = <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant14(var_field0); }\n15 => { let mut var_field0 = <RustAutoOpaqueMoi<ConstantSourceNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant15(var_field0); }\n16 => { let mut var_field0 = <RustAutoOpaqueMoi<DelayNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant16(var_field0); }\n17 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant17(var_field0); }\n18 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant18(var_field0); }\n19 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant19(var_field0); }\n20 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant20(var_field0); }\n21 => { let mut var_field0 = <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant21(var_field0); }\n22 => { let mut var_field0 = <RustAutoOpaqueMoi<GainNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant22(var_field0); }\n23 => { let mut var_field0 = <RustAutoOpaqueMoi<OscillatorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant23(var_field0); }\n24 => { let mut var_field0 = <RustAutoOpaqueMoi<OscillatorNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant24(var_field0); }\n25 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant25(var_field0); }\n26 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant26(var_field0); }\n27 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant27(var_field0); }\n28 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant28(var_field0); }\n29 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant29(var_field0); }\n30 => { let mut var_field0 = <RustAutoOpaqueMoi<PannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant30(var_field0); }\n31 => { let mut var_field0 = <RustAutoOpaqueMoi<StereoPannerNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant31(var_field0); }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseDecode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);\n            match tag_ {0 => { let mut var_field0 = <RustAutoOpaqueMoi<MediaStreamAudioDestinationNode>>::sse_decode(deserializer);\nreturn crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum::Variant0(var_field0); }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseDecode for web_audio_api::AutomationRate {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::AutomationRate::A,\n1 => web_audio_api::AutomationRate::K,\n            _ => unreachable!(\"Invalid variant for AutomationRate: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::BiquadFilterOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_q = <f32>::sse_decode(deserializer);\nlet mut var_detune = <f32>::sse_decode(deserializer);\nlet mut var_frequency = <f32>::sse_decode(deserializer);\nlet mut var_gain = <f32>::sse_decode(deserializer);\nlet mut var_type = <web_audio_api::node::BiquadFilterType>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::BiquadFilterOptions{q: var_q, detune: var_detune, frequency: var_frequency, gain: var_gain, type_: var_type, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::BiquadFilterType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::BiquadFilterType::Lowpass,\n1 => web_audio_api::node::BiquadFilterType::Highpass,\n2 => web_audio_api::node::BiquadFilterType::Bandpass,\n3 => web_audio_api::node::BiquadFilterType::Notch,\n4 => web_audio_api::node::BiquadFilterType::Allpass,\n5 => web_audio_api::node::BiquadFilterType::Peaking,\n6 => web_audio_api::node::BiquadFilterType::Lowshelf,\n7 => web_audio_api::node::BiquadFilterType::Highshelf,\n            _ => unreachable!(\"Invalid variant for BiquadFilterType: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for bool {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap() != 0}\n                }\n                \n                impl SseDecode for web_audio_api::node::ChannelCountMode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::ChannelCountMode::Max,\n1 => web_audio_api::node::ChannelCountMode::ClampedMax,\n2 => web_audio_api::node::ChannelCountMode::Explicit,\n            _ => unreachable!(\"Invalid variant for ChannelCountMode: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::ChannelInterpretation {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::ChannelInterpretation::Speakers,\n1 => web_audio_api::node::ChannelInterpretation::Discrete,\n            _ => unreachable!(\"Invalid variant for ChannelInterpretation: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::ChannelMergerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_numberOfInputs = <usize>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::ChannelMergerOptions{number_of_inputs: var_numberOfInputs, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::ChannelSplitterOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_numberOfOutputs = <usize>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::ChannelSplitterOptions{number_of_outputs: var_numberOfOutputs, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::ConstantSourceOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_offset = <f32>::sse_decode(deserializer);\nreturn web_audio_api::node::ConstantSourceOptions{offset: var_offset};}\n                }\n                \n                impl SseDecode for web_audio_api::node::ConvolverOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_buffer = <Option<AudioBuffer>>::sse_decode(deserializer);\nlet mut var_disableNormalization = <bool>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::ConvolverOptions{buffer: var_buffer, disable_normalization: var_disableNormalization, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::DelayOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_maxDelayTime = <f64>::sse_decode(deserializer);\nlet mut var_delayTime = <f64>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::DelayOptions{max_delay_time: var_maxDelayTime, delay_time: var_delayTime, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::DistanceModelType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::DistanceModelType::Linear,\n1 => web_audio_api::node::DistanceModelType::Inverse,\n2 => web_audio_api::node::DistanceModelType::Exponential,\n            _ => unreachable!(\"Invalid variant for DistanceModelType: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::DynamicsCompressorOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_attack = <f32>::sse_decode(deserializer);\nlet mut var_knee = <f32>::sse_decode(deserializer);\nlet mut var_ratio = <f32>::sse_decode(deserializer);\nlet mut var_release = <f32>::sse_decode(deserializer);\nlet mut var_threshold = <f32>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::DynamicsCompressorOptions{attack: var_attack, knee: var_knee, ratio: var_ratio, release: var_release, threshold: var_threshold, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for f32 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_f32::<NativeEndian>().unwrap()}\n                }\n                \n                impl SseDecode for f64 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_f64::<NativeEndian>().unwrap()}\n                }\n                \n                impl SseDecode for web_audio_api::node::GainOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_gain = <f32>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::GainOptions{gain: var_gain, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for i32 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i32::<NativeEndian>().unwrap()}\n                }\n                \n                impl SseDecode for i64 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i64::<NativeEndian>().unwrap()}\n                }\n                \n                impl SseDecode for crate::api::simple::Level {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => crate::api::simple::Level::Error,\n1 => crate::api::simple::Level::Warn,\n2 => crate::api::simple::Level::Info,\n3 => crate::api::simple::Level::Debug,\n4 => crate::api::simple::Level::Trace,\n            _ => unreachable!(\"Invalid variant for Level: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for Vec<MediaStreamTrack> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<MediaStreamTrack>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for Vec<web_audio_api::AudioParamDescriptor> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<web_audio_api::AudioParamDescriptor>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for Vec<Vec<f32>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<Vec<f32>>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for Vec<f32> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<f32>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for Vec<f64> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<f64>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for Vec<u8> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);\n        let mut ans_ = vec![];\n        for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }\n        return ans_;}\n                }\n                \n                impl SseDecode for crate::api::simple::LogEntry {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_timeMillis = <i64>::sse_decode(deserializer);\nlet mut var_msg = <String>::sse_decode(deserializer);\nlet mut var_logLevel = <crate::api::simple::Level>::sse_decode(deserializer);\nlet mut var_lbl = <String>::sse_decode(deserializer);\nreturn crate::api::simple::LogEntry{time_millis: var_timeMillis, msg: var_msg, log_level: var_logLevel, lbl: var_lbl};}\n                }\n                \n                impl SseDecode for web_audio_api::media_streams::MediaStreamTrackState {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::media_streams::MediaStreamTrackState::Live,\n1 => web_audio_api::media_streams::MediaStreamTrackState::Ended,\n            _ => unreachable!(\"Invalid variant for MediaStreamTrackState: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for Option<AudioBuffer> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {\n                return Some(<AudioBuffer>::sse_decode(deserializer));\n            } else {\n                return None;\n            }}\n                }\n                \n                impl SseDecode for Option<PeriodicWave> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {\n                return Some(<PeriodicWave>::sse_decode(deserializer));\n            } else {\n                return None;\n            }}\n                }\n                \n                impl SseDecode for Option<f32> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {\n                return Some(<f32>::sse_decode(deserializer));\n            } else {\n                return None;\n            }}\n                }\n                \n                impl SseDecode for Option<Vec<f32>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {\n                return Some(<Vec<f32>>::sse_decode(deserializer));\n            } else {\n                return None;\n            }}\n                }\n                \n                impl SseDecode for web_audio_api::node::OscillatorOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_type = <web_audio_api::node::OscillatorType>::sse_decode(deserializer);\nlet mut var_frequency = <f32>::sse_decode(deserializer);\nlet mut var_detune = <f32>::sse_decode(deserializer);\nlet mut var_periodicWave = <Option<PeriodicWave>>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::OscillatorOptions{type_: var_type, frequency: var_frequency, detune: var_detune, periodic_wave: var_periodicWave, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::OscillatorType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::OscillatorType::Sine,\n1 => web_audio_api::node::OscillatorType::Square,\n2 => web_audio_api::node::OscillatorType::Sawtooth,\n3 => web_audio_api::node::OscillatorType::Triangle,\n4 => web_audio_api::node::OscillatorType::Custom,\n            _ => unreachable!(\"Invalid variant for OscillatorType: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::OverSampleType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::OverSampleType::None,\n1 => web_audio_api::node::OverSampleType::X2,\n2 => web_audio_api::node::OverSampleType::X4,\n            _ => unreachable!(\"Invalid variant for OverSampleType: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::node::PannerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_panningModel = <web_audio_api::node::PanningModelType>::sse_decode(deserializer);\nlet mut var_distanceModel = <web_audio_api::node::DistanceModelType>::sse_decode(deserializer);\nlet mut var_positionX = <f32>::sse_decode(deserializer);\nlet mut var_positionY = <f32>::sse_decode(deserializer);\nlet mut var_positionZ = <f32>::sse_decode(deserializer);\nlet mut var_orientationX = <f32>::sse_decode(deserializer);\nlet mut var_orientationY = <f32>::sse_decode(deserializer);\nlet mut var_orientationZ = <f32>::sse_decode(deserializer);\nlet mut var_refDistance = <f64>::sse_decode(deserializer);\nlet mut var_maxDistance = <f64>::sse_decode(deserializer);\nlet mut var_rolloffFactor = <f64>::sse_decode(deserializer);\nlet mut var_coneInnerAngle = <f64>::sse_decode(deserializer);\nlet mut var_coneOuterAngle = <f64>::sse_decode(deserializer);\nlet mut var_coneOuterGain = <f64>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::PannerOptions{panning_model: var_panningModel, distance_model: var_distanceModel, position_x: var_positionX, position_y: var_positionY, position_z: var_positionZ, orientation_x: var_orientationX, orientation_y: var_orientationY, orientation_z: var_orientationZ, ref_distance: var_refDistance, max_distance: var_maxDistance, rolloff_factor: var_rolloffFactor, cone_inner_angle: var_coneInnerAngle, cone_outer_angle: var_coneOuterAngle, cone_outer_gain: var_coneOuterGain, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for web_audio_api::node::PanningModelType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);\n        return match inner {\n            0 => web_audio_api::node::PanningModelType::EqualPower,\n1 => web_audio_api::node::PanningModelType::HRTF,\n            _ => unreachable!(\"Invalid variant for PanningModelType: {}\", inner),\n        };}\n                }\n                \n                impl SseDecode for web_audio_api::PeriodicWaveOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_real = <Option<Vec<f32>>>::sse_decode(deserializer);\nlet mut var_imag = <Option<Vec<f32>>>::sse_decode(deserializer);\nlet mut var_disableNormalization = <bool>::sse_decode(deserializer);\nreturn web_audio_api::PeriodicWaveOptions{real: var_real, imag: var_imag, disable_normalization: var_disableNormalization};}\n                }\n                \n                impl SseDecode for ( AudioParam,AudioParamId,) {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_field0 = < AudioParam>::sse_decode(deserializer);\nlet mut var_field1 = <AudioParamId>::sse_decode(deserializer);\nreturn (var_field0, var_field1);}\n                }\n                \n                impl SseDecode for web_audio_api::node::StereoPannerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_pan = <f32>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::StereoPannerOptions{pan: var_pan, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                impl SseDecode for u8 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap()}\n                }\n                \n                impl SseDecode for () {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}\n                }\n                \n                impl SseDecode for usize {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _}\n                }\n                \n                impl SseDecode for web_audio_api::node::WaveShaperOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_curve = <Option<Vec<f32>>>::sse_decode(deserializer);\nlet mut var_oversample = <web_audio_api::node::OverSampleType>::sse_decode(deserializer);\nlet mut var_audioNodeOptions = <web_audio_api::node::AudioNodeOptions>::sse_decode(deserializer);\nreturn web_audio_api::node::WaveShaperOptions{curve: var_curve, oversample: var_oversample, audio_node_options: var_audioNodeOptions};}\n                }\n                \n                fn pde_ffi_dispatcher_primary_impl(\n                    func_id: i32,port: flutter_rust_bridge::for_generated::MessagePort,\n                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,\n                    rust_vec_len: i32,\n                    data_len: i32,\n                )  {\n                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs\n                    match func_id {\n                        1 => wire__crate__api__media_element__MyMediaElement_current_time_impl(port, ptr, rust_vec_len, data_len),\n2 => wire__crate__api__media_element__MyMediaElement_loop__impl(port, ptr, rust_vec_len, data_len),\n4 => wire__crate__api__media_element__MyMediaElement_pause_impl(port, ptr, rust_vec_len, data_len),\n5 => wire__crate__api__media_element__MyMediaElement_paused_impl(port, ptr, rust_vec_len, data_len),\n6 => wire__crate__api__media_element__MyMediaElement_play_impl(port, ptr, rust_vec_len, data_len),\n7 => wire__crate__api__media_element__MyMediaElement_playback_rate_impl(port, ptr, rust_vec_len, data_len),\n8 => wire__crate__api__media_element__MyMediaElement_set_current_time_impl(port, ptr, rust_vec_len, data_len),\n9 => wire__crate__api__media_element__MyMediaElement_set_loop_impl(port, ptr, rust_vec_len, data_len),\n10 => wire__crate__api__media_element__MyMediaElement_set_playback_rate_impl(port, ptr, rust_vec_len, data_len),\n11 => wire__crate__api__mimi__mimi_impl(port, ptr, rust_vec_len, data_len),\n67 => wire__crate__api__simple__greet_impl(port, ptr, rust_vec_len, data_len),\n68 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),\n69 => wire__crate__api__simple__init_tau_core_impl(port, ptr, rust_vec_len, data_len),\n70 => wire__crate__api__simple__rust_set_log_level_impl(port, ptr, rust_vec_len, data_len),\n71 => wire__crate__api__simple__trace_logger_impl(port, ptr, rust_vec_len, data_len),\n72 => wire__crate__api__toto__toto_impl(port, ptr, rust_vec_len, data_len),\n73 => wire__crate__api__toto__zozo_impl(port, ptr, rust_vec_len, data_len),\n74 => wire__crate__api__zozo__sum_impl(port, ptr, rust_vec_len, data_len),\n75 => wire__crate__api__zozo__sum_long_running_impl(port, ptr, rust_vec_len, data_len),\n79 => wire__web_audio_api__AudioBuffer_duration_impl(port, ptr, rust_vec_len, data_len),\n80 => wire__web_audio_api__AudioBuffer_from_impl(port, ptr, rust_vec_len, data_len),\n81 => wire__web_audio_api__AudioBuffer_get_channel_data_impl(port, ptr, rust_vec_len, data_len),\n82 => wire__web_audio_api__AudioBuffer_get_channel_data_mut_impl(port, ptr, rust_vec_len, data_len),\n83 => wire__web_audio_api__AudioBuffer_length_impl(port, ptr, rust_vec_len, data_len),\n84 => wire__web_audio_api__AudioBuffer_new_impl(port, ptr, rust_vec_len, data_len),\n85 => wire__web_audio_api__AudioBuffer_number_of_channels_impl(port, ptr, rust_vec_len, data_len),\n86 => wire__web_audio_api__AudioBuffer_sample_rate_impl(port, ptr, rust_vec_len, data_len),\n96 => wire__web_audio_api__AudioParam_automation_rate_impl(port, ptr, rust_vec_len, data_len),\n97 => wire__web_audio_api__AudioParam_cancel_and_hold_at_time_impl(port, ptr, rust_vec_len, data_len),\n98 => wire__web_audio_api__AudioParam_cancel_scheduled_values_impl(port, ptr, rust_vec_len, data_len),\n99 => wire__web_audio_api__AudioParam_channel_config_impl(port, ptr, rust_vec_len, data_len),\n100 => wire__web_audio_api__AudioParam_channel_count_impl(port, ptr, rust_vec_len, data_len),\n101 => wire__web_audio_api__AudioParam_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n102 => wire__web_audio_api__AudioParam_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n103 => wire__web_audio_api__AudioParam_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n104 => wire__web_audio_api__AudioParam_default_value_impl(port, ptr, rust_vec_len, data_len),\n105 => wire__web_audio_api__AudioParam_disconnect_impl(port, ptr, rust_vec_len, data_len),\n106 => wire__web_audio_api__AudioParam_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n107 => wire__web_audio_api__AudioParam_exponential_ramp_to_value_at_time_impl(port, ptr, rust_vec_len, data_len),\n108 => wire__web_audio_api__AudioParam_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n109 => wire__web_audio_api__AudioParam_linear_ramp_to_value_at_time_impl(port, ptr, rust_vec_len, data_len),\n110 => wire__web_audio_api__AudioParam_max_value_impl(port, ptr, rust_vec_len, data_len),\n111 => wire__web_audio_api__AudioParam_min_value_impl(port, ptr, rust_vec_len, data_len),\n112 => wire__web_audio_api__AudioParam_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n113 => wire__web_audio_api__AudioParam_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n114 => wire__web_audio_api__AudioParam_registration_impl(port, ptr, rust_vec_len, data_len),\n115 => wire__web_audio_api__AudioParam_set_automation_rate_impl(port, ptr, rust_vec_len, data_len),\n116 => wire__web_audio_api__AudioParam_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n117 => wire__web_audio_api__AudioParam_set_target_at_time_impl(port, ptr, rust_vec_len, data_len),\n119 => wire__web_audio_api__AudioParam_set_value_at_time_impl(port, ptr, rust_vec_len, data_len),\n120 => wire__web_audio_api__AudioParam_set_value_curve_at_time_impl(port, ptr, rust_vec_len, data_len),\n138 => wire__web_audio_api__AudioRenderCapacity_clear_onupdate_impl(port, ptr, rust_vec_len, data_len),\n139 => wire__web_audio_api__AudioRenderCapacity_start_impl(port, ptr, rust_vec_len, data_len),\n140 => wire__web_audio_api__AudioRenderCapacity_stop_impl(port, ptr, rust_vec_len, data_len),\n146 => wire__web_audio_api__PeriodicWave_default_impl(port, ptr, rust_vec_len, data_len),\n147 => wire__web_audio_api__audio_render_capacity_options_default_impl(port, ptr, rust_vec_len, data_len),\n148 => wire__web_audio_api__periodic_wave_options_default_impl(port, ptr, rust_vec_len, data_len),\n149 => wire__web_audio_api__context__AudioContext_base_latency_impl(port, ptr, rust_vec_len, data_len),\n150 => wire__web_audio_api__context__AudioContext_clear_onsinkchange_impl(port, ptr, rust_vec_len, data_len),\n151 => wire__web_audio_api__context__AudioContext_clear_onstatechange_impl(port, ptr, rust_vec_len, data_len),\n152 => wire__web_audio_api__context__AudioContext_close_impl(port, ptr, rust_vec_len, data_len),\n153 => wire__web_audio_api__context__AudioContext_close_sync_impl(port, ptr, rust_vec_len, data_len),\n154 => wire__web_audio_api__context__AudioContext_create_analyser_impl(port, ptr, rust_vec_len, data_len),\n155 => wire__web_audio_api__context__AudioContext_create_audio_param_impl(port, ptr, rust_vec_len, data_len),\n156 => wire__web_audio_api__context__AudioContext_create_biquad_filter_impl(port, ptr, rust_vec_len, data_len),\n157 => wire__web_audio_api__context__AudioContext_create_buffer_impl(port, ptr, rust_vec_len, data_len),\n158 => wire__web_audio_api__context__AudioContext_create_buffer_source_impl(port, ptr, rust_vec_len, data_len),\n159 => wire__web_audio_api__context__AudioContext_create_channel_merger_impl(port, ptr, rust_vec_len, data_len),\n160 => wire__web_audio_api__context__AudioContext_create_channel_splitter_impl(port, ptr, rust_vec_len, data_len),\n161 => wire__web_audio_api__context__AudioContext_create_constant_source_impl(port, ptr, rust_vec_len, data_len),\n162 => wire__web_audio_api__context__AudioContext_create_convolver_impl(port, ptr, rust_vec_len, data_len),\n163 => wire__web_audio_api__context__AudioContext_create_delay_impl(port, ptr, rust_vec_len, data_len),\n164 => wire__web_audio_api__context__AudioContext_create_dynamics_compressor_impl(port, ptr, rust_vec_len, data_len),\n165 => wire__web_audio_api__context__AudioContext_create_gain_impl(port, ptr, rust_vec_len, data_len),\n166 => wire__web_audio_api__context__AudioContext_create_iir_filter_impl(port, ptr, rust_vec_len, data_len),\n167 => wire__web_audio_api__context__AudioContext_create_media_stream_destination_impl(port, ptr, rust_vec_len, data_len),\n168 => wire__web_audio_api__context__AudioContext_create_media_stream_source_impl(port, ptr, rust_vec_len, data_len),\n169 => wire__web_audio_api__context__AudioContext_create_media_stream_track_source_impl(port, ptr, rust_vec_len, data_len),\n170 => wire__web_audio_api__context__AudioContext_create_oscillator_impl(port, ptr, rust_vec_len, data_len),\n171 => wire__web_audio_api__context__AudioContext_create_panner_impl(port, ptr, rust_vec_len, data_len),\n172 => wire__web_audio_api__context__AudioContext_create_periodic_wave_impl(port, ptr, rust_vec_len, data_len),\n173 => wire__web_audio_api__context__AudioContext_create_script_processor_impl(port, ptr, rust_vec_len, data_len),\n174 => wire__web_audio_api__context__AudioContext_create_stereo_panner_impl(port, ptr, rust_vec_len, data_len),\n175 => wire__web_audio_api__context__AudioContext_create_wave_shaper_impl(port, ptr, rust_vec_len, data_len),\n176 => wire__web_audio_api__context__AudioContext_current_time_impl(port, ptr, rust_vec_len, data_len),\n177 => wire__web_audio_api__context__AudioContext_default_impl(port, ptr, rust_vec_len, data_len),\n178 => wire__web_audio_api__context__AudioContext_destination_impl(port, ptr, rust_vec_len, data_len),\n179 => wire__web_audio_api__context__AudioContext_frb_override_create_media_element_source_impl(port, ptr, rust_vec_len, data_len),\n180 => wire__web_audio_api__context__AudioContext_frb_override_decode_audio_data_sync_impl(port, ptr, rust_vec_len, data_len),\n181 => wire__web_audio_api__context__AudioContext_listener_impl(port, ptr, rust_vec_len, data_len),\n183 => wire__web_audio_api__context__AudioContext_output_latency_impl(port, ptr, rust_vec_len, data_len),\n184 => wire__web_audio_api__context__AudioContext_render_capacity_impl(port, ptr, rust_vec_len, data_len),\n185 => wire__web_audio_api__context__AudioContext_resume_sync_impl(port, ptr, rust_vec_len, data_len),\n186 => wire__web_audio_api__context__AudioContext_sample_rate_impl(port, ptr, rust_vec_len, data_len),\n187 => wire__web_audio_api__context__AudioContext_set_on_state_change_impl(port, ptr, rust_vec_len, data_len),\n188 => wire__web_audio_api__context__AudioContext_set_sink_id_impl(port, ptr, rust_vec_len, data_len),\n189 => wire__web_audio_api__context__AudioContext_sink_id_impl(port, ptr, rust_vec_len, data_len),\n190 => wire__web_audio_api__context__AudioContext_state_impl(port, ptr, rust_vec_len, data_len),\n191 => wire__web_audio_api__context__AudioContext_suspend_impl(port, ptr, rust_vec_len, data_len),\n192 => wire__web_audio_api__context__AudioContext_suspend_sync_impl(port, ptr, rust_vec_len, data_len),\n193 => wire__web_audio_api__context__ConcreteBaseAudioContext_clear_onstatechange_impl(port, ptr, rust_vec_len, data_len),\n194 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_analyser_impl(port, ptr, rust_vec_len, data_len),\n195 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_audio_param_impl(port, ptr, rust_vec_len, data_len),\n196 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_biquad_filter_impl(port, ptr, rust_vec_len, data_len),\n197 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_buffer_impl(port, ptr, rust_vec_len, data_len),\n198 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_buffer_source_impl(port, ptr, rust_vec_len, data_len),\n199 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_channel_merger_impl(port, ptr, rust_vec_len, data_len),\n200 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_channel_splitter_impl(port, ptr, rust_vec_len, data_len),\n201 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_constant_source_impl(port, ptr, rust_vec_len, data_len),\n202 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_convolver_impl(port, ptr, rust_vec_len, data_len),\n203 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_delay_impl(port, ptr, rust_vec_len, data_len),\n204 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_dynamics_compressor_impl(port, ptr, rust_vec_len, data_len),\n205 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_gain_impl(port, ptr, rust_vec_len, data_len),\n206 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_iir_filter_impl(port, ptr, rust_vec_len, data_len),\n207 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_oscillator_impl(port, ptr, rust_vec_len, data_len),\n208 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_panner_impl(port, ptr, rust_vec_len, data_len),\n209 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_periodic_wave_impl(port, ptr, rust_vec_len, data_len),\n210 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_script_processor_impl(port, ptr, rust_vec_len, data_len),\n211 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_stereo_panner_impl(port, ptr, rust_vec_len, data_len),\n212 => wire__web_audio_api__context__ConcreteBaseAudioContext_create_wave_shaper_impl(port, ptr, rust_vec_len, data_len),\n213 => wire__web_audio_api__context__ConcreteBaseAudioContext_current_time_impl(port, ptr, rust_vec_len, data_len),\n214 => wire__web_audio_api__context__ConcreteBaseAudioContext_destination_impl(port, ptr, rust_vec_len, data_len),\n215 => wire__web_audio_api__context__ConcreteBaseAudioContext_listener_impl(port, ptr, rust_vec_len, data_len),\n216 => wire__web_audio_api__context__ConcreteBaseAudioContext_mark_cycle_breaker_impl(port, ptr, rust_vec_len, data_len),\n217 => wire__web_audio_api__context__ConcreteBaseAudioContext_sample_rate_impl(port, ptr, rust_vec_len, data_len),\n218 => wire__web_audio_api__context__ConcreteBaseAudioContext_state_impl(port, ptr, rust_vec_len, data_len),\n219 => wire__web_audio_api__context__OfflineAudioContext_clear_oncomplete_impl(port, ptr, rust_vec_len, data_len),\n220 => wire__web_audio_api__context__OfflineAudioContext_clear_onstatechange_impl(port, ptr, rust_vec_len, data_len),\n221 => wire__web_audio_api__context__OfflineAudioContext_create_analyser_impl(port, ptr, rust_vec_len, data_len),\n222 => wire__web_audio_api__context__OfflineAudioContext_create_audio_param_impl(port, ptr, rust_vec_len, data_len),\n223 => wire__web_audio_api__context__OfflineAudioContext_create_biquad_filter_impl(port, ptr, rust_vec_len, data_len),\n224 => wire__web_audio_api__context__OfflineAudioContext_create_buffer_impl(port, ptr, rust_vec_len, data_len),\n225 => wire__web_audio_api__context__OfflineAudioContext_create_buffer_source_impl(port, ptr, rust_vec_len, data_len),\n226 => wire__web_audio_api__context__OfflineAudioContext_create_channel_merger_impl(port, ptr, rust_vec_len, data_len),\n227 => wire__web_audio_api__context__OfflineAudioContext_create_channel_splitter_impl(port, ptr, rust_vec_len, data_len),\n228 => wire__web_audio_api__context__OfflineAudioContext_create_constant_source_impl(port, ptr, rust_vec_len, data_len),\n229 => wire__web_audio_api__context__OfflineAudioContext_create_convolver_impl(port, ptr, rust_vec_len, data_len),\n230 => wire__web_audio_api__context__OfflineAudioContext_create_delay_impl(port, ptr, rust_vec_len, data_len),\n231 => wire__web_audio_api__context__OfflineAudioContext_create_dynamics_compressor_impl(port, ptr, rust_vec_len, data_len),\n232 => wire__web_audio_api__context__OfflineAudioContext_create_gain_impl(port, ptr, rust_vec_len, data_len),\n233 => wire__web_audio_api__context__OfflineAudioContext_create_iir_filter_impl(port, ptr, rust_vec_len, data_len),\n234 => wire__web_audio_api__context__OfflineAudioContext_create_oscillator_impl(port, ptr, rust_vec_len, data_len),\n235 => wire__web_audio_api__context__OfflineAudioContext_create_panner_impl(port, ptr, rust_vec_len, data_len),\n236 => wire__web_audio_api__context__OfflineAudioContext_create_periodic_wave_impl(port, ptr, rust_vec_len, data_len),\n237 => wire__web_audio_api__context__OfflineAudioContext_create_script_processor_impl(port, ptr, rust_vec_len, data_len),\n238 => wire__web_audio_api__context__OfflineAudioContext_create_stereo_panner_impl(port, ptr, rust_vec_len, data_len),\n239 => wire__web_audio_api__context__OfflineAudioContext_create_wave_shaper_impl(port, ptr, rust_vec_len, data_len),\n240 => wire__web_audio_api__context__OfflineAudioContext_current_time_impl(port, ptr, rust_vec_len, data_len),\n241 => wire__web_audio_api__context__OfflineAudioContext_destination_impl(port, ptr, rust_vec_len, data_len),\n242 => wire__web_audio_api__context__OfflineAudioContext_length_impl(port, ptr, rust_vec_len, data_len),\n243 => wire__web_audio_api__context__OfflineAudioContext_listener_impl(port, ptr, rust_vec_len, data_len),\n244 => wire__web_audio_api__context__OfflineAudioContext_new_impl(port, ptr, rust_vec_len, data_len),\n245 => wire__web_audio_api__context__OfflineAudioContext_resume_impl(port, ptr, rust_vec_len, data_len),\n246 => wire__web_audio_api__context__OfflineAudioContext_sample_rate_impl(port, ptr, rust_vec_len, data_len),\n247 => wire__web_audio_api__context__OfflineAudioContext_set_on_complete_impl(port, ptr, rust_vec_len, data_len),\n248 => wire__web_audio_api__context__OfflineAudioContext_start_rendering_impl(port, ptr, rust_vec_len, data_len),\n249 => wire__web_audio_api__context__OfflineAudioContext_start_rendering_sync_impl(port, ptr, rust_vec_len, data_len),\n250 => wire__web_audio_api__context__OfflineAudioContext_state_impl(port, ptr, rust_vec_len, data_len),\n251 => wire__web_audio_api__context__OfflineAudioContext_suspend_impl(port, ptr, rust_vec_len, data_len),\n277 => wire__web_audio_api__context__audio_context_latency_category_default_impl(port, ptr, rust_vec_len, data_len),\n278 => wire__web_audio_api__context__audio_context_options_default_impl(port, ptr, rust_vec_len, data_len),\n279 => wire__web_audio_api__media_devices__get_user_media_sync_impl(port, ptr, rust_vec_len, data_len),\n286 => wire__web_audio_api__media_recorder__MediaRecorder_clear_ondataavailable_impl(port, ptr, rust_vec_len, data_len),\n287 => wire__web_audio_api__media_recorder__MediaRecorder_clear_onerror_impl(port, ptr, rust_vec_len, data_len),\n288 => wire__web_audio_api__media_recorder__MediaRecorder_clear_onstop_impl(port, ptr, rust_vec_len, data_len),\n289 => wire__web_audio_api__media_recorder__MediaRecorder_new_impl(port, ptr, rust_vec_len, data_len),\n290 => wire__web_audio_api__media_recorder__MediaRecorder_start_impl(port, ptr, rust_vec_len, data_len),\n291 => wire__web_audio_api__media_recorder__MediaRecorder_stop_impl(port, ptr, rust_vec_len, data_len),\n292 => wire__web_audio_api__media_streams__MediaStreamTrack_close_impl(port, ptr, rust_vec_len, data_len),\n293 => wire__web_audio_api__media_streams__MediaStreamTrack_ready_state_impl(port, ptr, rust_vec_len, data_len),\n294 => wire__web_audio_api__media_streams__MediaStream_frb_override_get_tracks_impl(port, ptr, rust_vec_len, data_len),\n295 => wire__web_audio_api__media_streams__MediaStream_from_tracks_impl(port, ptr, rust_vec_len, data_len),\n296 => wire__web_audio_api__node__AnalyserNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n297 => wire__web_audio_api__node__AnalyserNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n298 => wire__web_audio_api__node__AnalyserNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n299 => wire__web_audio_api__node__AnalyserNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n300 => wire__web_audio_api__node__AnalyserNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n301 => wire__web_audio_api__node__AnalyserNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n302 => wire__web_audio_api__node__AnalyserNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n303 => wire__web_audio_api__node__AnalyserNode_fft_size_impl(port, ptr, rust_vec_len, data_len),\n304 => wire__web_audio_api__node__AnalyserNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n305 => wire__web_audio_api__node__AnalyserNode_frequency_bin_count_impl(port, ptr, rust_vec_len, data_len),\n306 => wire__web_audio_api__node__AnalyserNode_max_decibels_impl(port, ptr, rust_vec_len, data_len),\n307 => wire__web_audio_api__node__AnalyserNode_min_decibels_impl(port, ptr, rust_vec_len, data_len),\n308 => wire__web_audio_api__node__AnalyserNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n309 => wire__web_audio_api__node__AnalyserNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n310 => wire__web_audio_api__node__AnalyserNode_registration_impl(port, ptr, rust_vec_len, data_len),\n311 => wire__web_audio_api__node__AnalyserNode_set_fft_size_impl(port, ptr, rust_vec_len, data_len),\n312 => wire__web_audio_api__node__AnalyserNode_set_max_decibels_impl(port, ptr, rust_vec_len, data_len),\n313 => wire__web_audio_api__node__AnalyserNode_set_min_decibels_impl(port, ptr, rust_vec_len, data_len),\n314 => wire__web_audio_api__node__AnalyserNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n315 => wire__web_audio_api__node__AnalyserNode_set_smoothing_time_constant_impl(port, ptr, rust_vec_len, data_len),\n316 => wire__web_audio_api__node__AnalyserNode_smoothing_time_constant_impl(port, ptr, rust_vec_len, data_len),\n317 => wire__web_audio_api__node__AudioBufferSourceNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n318 => wire__web_audio_api__node__AudioBufferSourceNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n319 => wire__web_audio_api__node__AudioBufferSourceNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n320 => wire__web_audio_api__node__AudioBufferSourceNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n321 => wire__web_audio_api__node__AudioBufferSourceNode_clear_onended_impl(port, ptr, rust_vec_len, data_len),\n322 => wire__web_audio_api__node__AudioBufferSourceNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n324 => wire__web_audio_api__node__AudioBufferSourceNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n325 => wire__web_audio_api__node__AudioBufferSourceNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n326 => wire__web_audio_api__node__AudioBufferSourceNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n327 => wire__web_audio_api__node__AudioBufferSourceNode_loop__impl(port, ptr, rust_vec_len, data_len),\n328 => wire__web_audio_api__node__AudioBufferSourceNode_loop_end_impl(port, ptr, rust_vec_len, data_len),\n329 => wire__web_audio_api__node__AudioBufferSourceNode_loop_start_impl(port, ptr, rust_vec_len, data_len),\n330 => wire__web_audio_api__node__AudioBufferSourceNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n331 => wire__web_audio_api__node__AudioBufferSourceNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n333 => wire__web_audio_api__node__AudioBufferSourceNode_position_impl(port, ptr, rust_vec_len, data_len),\n334 => wire__web_audio_api__node__AudioBufferSourceNode_registration_impl(port, ptr, rust_vec_len, data_len),\n335 => wire__web_audio_api__node__AudioBufferSourceNode_set_buffer_impl(port, ptr, rust_vec_len, data_len),\n336 => wire__web_audio_api__node__AudioBufferSourceNode_set_loop_impl(port, ptr, rust_vec_len, data_len),\n337 => wire__web_audio_api__node__AudioBufferSourceNode_set_loop_end_impl(port, ptr, rust_vec_len, data_len),\n338 => wire__web_audio_api__node__AudioBufferSourceNode_set_loop_start_impl(port, ptr, rust_vec_len, data_len),\n339 => wire__web_audio_api__node__AudioBufferSourceNode_set_on_ended_impl(port, ptr, rust_vec_len, data_len),\n340 => wire__web_audio_api__node__AudioBufferSourceNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n341 => wire__web_audio_api__node__AudioBufferSourceNode_start_impl(port, ptr, rust_vec_len, data_len),\n342 => wire__web_audio_api__node__AudioBufferSourceNode_start_at_impl(port, ptr, rust_vec_len, data_len),\n343 => wire__web_audio_api__node__AudioBufferSourceNode_start_at_with_offset_impl(port, ptr, rust_vec_len, data_len),\n344 => wire__web_audio_api__node__AudioBufferSourceNode_start_at_with_offset_and_duration_impl(port, ptr, rust_vec_len, data_len),\n345 => wire__web_audio_api__node__AudioBufferSourceNode_stop_impl(port, ptr, rust_vec_len, data_len),\n346 => wire__web_audio_api__node__AudioBufferSourceNode_stop_at_impl(port, ptr, rust_vec_len, data_len),\n347 => wire__web_audio_api__node__AudioDestinationNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n348 => wire__web_audio_api__node__AudioDestinationNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n349 => wire__web_audio_api__node__AudioDestinationNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n350 => wire__web_audio_api__node__AudioDestinationNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n351 => wire__web_audio_api__node__AudioDestinationNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n352 => wire__web_audio_api__node__AudioDestinationNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n353 => wire__web_audio_api__node__AudioDestinationNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n354 => wire__web_audio_api__node__AudioDestinationNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n355 => wire__web_audio_api__node__AudioDestinationNode_max_channel_count_impl(port, ptr, rust_vec_len, data_len),\n356 => wire__web_audio_api__node__AudioDestinationNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n357 => wire__web_audio_api__node__AudioDestinationNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n358 => wire__web_audio_api__node__AudioDestinationNode_registration_impl(port, ptr, rust_vec_len, data_len),\n359 => wire__web_audio_api__node__AudioDestinationNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n360 => wire__web_audio_api__node__BiquadFilterNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n361 => wire__web_audio_api__node__BiquadFilterNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n362 => wire__web_audio_api__node__BiquadFilterNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n363 => wire__web_audio_api__node__BiquadFilterNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n364 => wire__web_audio_api__node__BiquadFilterNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n366 => wire__web_audio_api__node__BiquadFilterNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n367 => wire__web_audio_api__node__BiquadFilterNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n368 => wire__web_audio_api__node__BiquadFilterNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n371 => wire__web_audio_api__node__BiquadFilterNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n372 => wire__web_audio_api__node__BiquadFilterNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n374 => wire__web_audio_api__node__BiquadFilterNode_registration_impl(port, ptr, rust_vec_len, data_len),\n375 => wire__web_audio_api__node__BiquadFilterNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n376 => wire__web_audio_api__node__BiquadFilterNode_set_type_impl(port, ptr, rust_vec_len, data_len),\n377 => wire__web_audio_api__node__BiquadFilterNode_type__impl(port, ptr, rust_vec_len, data_len),\n378 => wire__web_audio_api__node__ChannelConfig_default_impl(port, ptr, rust_vec_len, data_len),\n379 => wire__web_audio_api__node__ChannelMergerNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n380 => wire__web_audio_api__node__ChannelMergerNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n381 => wire__web_audio_api__node__ChannelMergerNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n382 => wire__web_audio_api__node__ChannelMergerNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n383 => wire__web_audio_api__node__ChannelMergerNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n384 => wire__web_audio_api__node__ChannelMergerNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n385 => wire__web_audio_api__node__ChannelMergerNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n386 => wire__web_audio_api__node__ChannelMergerNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n387 => wire__web_audio_api__node__ChannelMergerNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n388 => wire__web_audio_api__node__ChannelMergerNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n389 => wire__web_audio_api__node__ChannelMergerNode_registration_impl(port, ptr, rust_vec_len, data_len),\n390 => wire__web_audio_api__node__ChannelMergerNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n391 => wire__web_audio_api__node__ChannelSplitterNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n392 => wire__web_audio_api__node__ChannelSplitterNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n393 => wire__web_audio_api__node__ChannelSplitterNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n394 => wire__web_audio_api__node__ChannelSplitterNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n395 => wire__web_audio_api__node__ChannelSplitterNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n396 => wire__web_audio_api__node__ChannelSplitterNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n397 => wire__web_audio_api__node__ChannelSplitterNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n398 => wire__web_audio_api__node__ChannelSplitterNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n399 => wire__web_audio_api__node__ChannelSplitterNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n400 => wire__web_audio_api__node__ChannelSplitterNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n401 => wire__web_audio_api__node__ChannelSplitterNode_registration_impl(port, ptr, rust_vec_len, data_len),\n402 => wire__web_audio_api__node__ChannelSplitterNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n403 => wire__web_audio_api__node__ConstantSourceNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n404 => wire__web_audio_api__node__ConstantSourceNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n405 => wire__web_audio_api__node__ConstantSourceNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n406 => wire__web_audio_api__node__ConstantSourceNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n407 => wire__web_audio_api__node__ConstantSourceNode_clear_onended_impl(port, ptr, rust_vec_len, data_len),\n408 => wire__web_audio_api__node__ConstantSourceNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n409 => wire__web_audio_api__node__ConstantSourceNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n410 => wire__web_audio_api__node__ConstantSourceNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n411 => wire__web_audio_api__node__ConstantSourceNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n412 => wire__web_audio_api__node__ConstantSourceNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n413 => wire__web_audio_api__node__ConstantSourceNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n415 => wire__web_audio_api__node__ConstantSourceNode_registration_impl(port, ptr, rust_vec_len, data_len),\n416 => wire__web_audio_api__node__ConstantSourceNode_set_on_ended_impl(port, ptr, rust_vec_len, data_len),\n417 => wire__web_audio_api__node__ConstantSourceNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n418 => wire__web_audio_api__node__ConstantSourceNode_start_impl(port, ptr, rust_vec_len, data_len),\n419 => wire__web_audio_api__node__ConstantSourceNode_start_at_impl(port, ptr, rust_vec_len, data_len),\n420 => wire__web_audio_api__node__ConstantSourceNode_stop_impl(port, ptr, rust_vec_len, data_len),\n421 => wire__web_audio_api__node__ConstantSourceNode_stop_at_impl(port, ptr, rust_vec_len, data_len),\n422 => wire__web_audio_api__node__ConvolverNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n423 => wire__web_audio_api__node__ConvolverNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n424 => wire__web_audio_api__node__ConvolverNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n425 => wire__web_audio_api__node__ConvolverNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n426 => wire__web_audio_api__node__ConvolverNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n427 => wire__web_audio_api__node__ConvolverNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n428 => wire__web_audio_api__node__ConvolverNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n429 => wire__web_audio_api__node__ConvolverNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n430 => wire__web_audio_api__node__ConvolverNode_normalize_impl(port, ptr, rust_vec_len, data_len),\n431 => wire__web_audio_api__node__ConvolverNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n432 => wire__web_audio_api__node__ConvolverNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n433 => wire__web_audio_api__node__ConvolverNode_registration_impl(port, ptr, rust_vec_len, data_len),\n434 => wire__web_audio_api__node__ConvolverNode_set_buffer_impl(port, ptr, rust_vec_len, data_len),\n435 => wire__web_audio_api__node__ConvolverNode_set_normalize_impl(port, ptr, rust_vec_len, data_len),\n436 => wire__web_audio_api__node__ConvolverNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n437 => wire__web_audio_api__node__DelayNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n438 => wire__web_audio_api__node__DelayNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n439 => wire__web_audio_api__node__DelayNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n440 => wire__web_audio_api__node__DelayNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n441 => wire__web_audio_api__node__DelayNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n443 => wire__web_audio_api__node__DelayNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n444 => wire__web_audio_api__node__DelayNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n445 => wire__web_audio_api__node__DelayNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n446 => wire__web_audio_api__node__DelayNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n447 => wire__web_audio_api__node__DelayNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n448 => wire__web_audio_api__node__DelayNode_registration_impl(port, ptr, rust_vec_len, data_len),\n449 => wire__web_audio_api__node__DelayNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n451 => wire__web_audio_api__node__DynamicsCompressorNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n452 => wire__web_audio_api__node__DynamicsCompressorNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n453 => wire__web_audio_api__node__DynamicsCompressorNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n454 => wire__web_audio_api__node__DynamicsCompressorNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n455 => wire__web_audio_api__node__DynamicsCompressorNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n456 => wire__web_audio_api__node__DynamicsCompressorNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n457 => wire__web_audio_api__node__DynamicsCompressorNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n458 => wire__web_audio_api__node__DynamicsCompressorNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n460 => wire__web_audio_api__node__DynamicsCompressorNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n461 => wire__web_audio_api__node__DynamicsCompressorNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n463 => wire__web_audio_api__node__DynamicsCompressorNode_reduction_impl(port, ptr, rust_vec_len, data_len),\n464 => wire__web_audio_api__node__DynamicsCompressorNode_registration_impl(port, ptr, rust_vec_len, data_len),\n466 => wire__web_audio_api__node__DynamicsCompressorNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n468 => wire__web_audio_api__node__GainNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n469 => wire__web_audio_api__node__GainNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n470 => wire__web_audio_api__node__GainNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n471 => wire__web_audio_api__node__GainNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n472 => wire__web_audio_api__node__GainNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n473 => wire__web_audio_api__node__GainNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n474 => wire__web_audio_api__node__GainNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n475 => wire__web_audio_api__node__GainNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n477 => wire__web_audio_api__node__GainNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n478 => wire__web_audio_api__node__GainNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n479 => wire__web_audio_api__node__GainNode_registration_impl(port, ptr, rust_vec_len, data_len),\n480 => wire__web_audio_api__node__GainNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n481 => wire__web_audio_api__node__IirFilterNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n482 => wire__web_audio_api__node__IirFilterNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n483 => wire__web_audio_api__node__IirFilterNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n484 => wire__web_audio_api__node__IirFilterNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n485 => wire__web_audio_api__node__IirFilterNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n486 => wire__web_audio_api__node__IirFilterNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n487 => wire__web_audio_api__node__IirFilterNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n488 => wire__web_audio_api__node__IirFilterNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n489 => wire__web_audio_api__node__IirFilterNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n490 => wire__web_audio_api__node__IirFilterNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n491 => wire__web_audio_api__node__IirFilterNode_registration_impl(port, ptr, rust_vec_len, data_len),\n492 => wire__web_audio_api__node__IirFilterNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n493 => wire__web_audio_api__node__MediaElementAudioSourceNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n494 => wire__web_audio_api__node__MediaElementAudioSourceNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n495 => wire__web_audio_api__node__MediaElementAudioSourceNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n496 => wire__web_audio_api__node__MediaElementAudioSourceNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n497 => wire__web_audio_api__node__MediaElementAudioSourceNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n498 => wire__web_audio_api__node__MediaElementAudioSourceNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n499 => wire__web_audio_api__node__MediaElementAudioSourceNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n500 => wire__web_audio_api__node__MediaElementAudioSourceNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n501 => wire__web_audio_api__node__MediaElementAudioSourceNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n502 => wire__web_audio_api__node__MediaElementAudioSourceNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n503 => wire__web_audio_api__node__MediaElementAudioSourceNode_registration_impl(port, ptr, rust_vec_len, data_len),\n504 => wire__web_audio_api__node__MediaElementAudioSourceNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n505 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n506 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n507 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n508 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n509 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n510 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n511 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n512 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n513 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n514 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n515 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_registration_impl(port, ptr, rust_vec_len, data_len),\n516 => wire__web_audio_api__node__MediaStreamAudioDestinationNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n518 => wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n519 => wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n520 => wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n521 => wire__web_audio_api__node__MediaStreamAudioSourceNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n522 => wire__web_audio_api__node__MediaStreamAudioSourceNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n523 => wire__web_audio_api__node__MediaStreamAudioSourceNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n524 => wire__web_audio_api__node__MediaStreamAudioSourceNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n525 => wire__web_audio_api__node__MediaStreamAudioSourceNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n526 => wire__web_audio_api__node__MediaStreamAudioSourceNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n527 => wire__web_audio_api__node__MediaStreamAudioSourceNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n528 => wire__web_audio_api__node__MediaStreamAudioSourceNode_registration_impl(port, ptr, rust_vec_len, data_len),\n529 => wire__web_audio_api__node__MediaStreamAudioSourceNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n530 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n531 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n532 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n533 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n534 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n535 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n536 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n537 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n538 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n539 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n540 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_registration_impl(port, ptr, rust_vec_len, data_len),\n541 => wire__web_audio_api__node__MediaStreamTrackAudioSourceNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n542 => wire__web_audio_api__node__OscillatorNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n543 => wire__web_audio_api__node__OscillatorNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n544 => wire__web_audio_api__node__OscillatorNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n545 => wire__web_audio_api__node__OscillatorNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n546 => wire__web_audio_api__node__OscillatorNode_clear_onended_impl(port, ptr, rust_vec_len, data_len),\n547 => wire__web_audio_api__node__OscillatorNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n549 => wire__web_audio_api__node__OscillatorNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n550 => wire__web_audio_api__node__OscillatorNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n551 => wire__web_audio_api__node__OscillatorNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n553 => wire__web_audio_api__node__OscillatorNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n554 => wire__web_audio_api__node__OscillatorNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n555 => wire__web_audio_api__node__OscillatorNode_registration_impl(port, ptr, rust_vec_len, data_len),\n556 => wire__web_audio_api__node__OscillatorNode_set_on_ended_impl(port, ptr, rust_vec_len, data_len),\n557 => wire__web_audio_api__node__OscillatorNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n558 => wire__web_audio_api__node__OscillatorNode_set_periodic_wave_impl(port, ptr, rust_vec_len, data_len),\n559 => wire__web_audio_api__node__OscillatorNode_set_type_impl(port, ptr, rust_vec_len, data_len),\n560 => wire__web_audio_api__node__OscillatorNode_start_impl(port, ptr, rust_vec_len, data_len),\n561 => wire__web_audio_api__node__OscillatorNode_start_at_impl(port, ptr, rust_vec_len, data_len),\n562 => wire__web_audio_api__node__OscillatorNode_stop_impl(port, ptr, rust_vec_len, data_len),\n563 => wire__web_audio_api__node__OscillatorNode_stop_at_impl(port, ptr, rust_vec_len, data_len),\n564 => wire__web_audio_api__node__OscillatorNode_type__impl(port, ptr, rust_vec_len, data_len),\n565 => wire__web_audio_api__node__PannerNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n566 => wire__web_audio_api__node__PannerNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n567 => wire__web_audio_api__node__PannerNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n568 => wire__web_audio_api__node__PannerNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n569 => wire__web_audio_api__node__PannerNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n570 => wire__web_audio_api__node__PannerNode_cone_inner_angle_impl(port, ptr, rust_vec_len, data_len),\n571 => wire__web_audio_api__node__PannerNode_cone_outer_angle_impl(port, ptr, rust_vec_len, data_len),\n572 => wire__web_audio_api__node__PannerNode_cone_outer_gain_impl(port, ptr, rust_vec_len, data_len),\n573 => wire__web_audio_api__node__PannerNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n574 => wire__web_audio_api__node__PannerNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n575 => wire__web_audio_api__node__PannerNode_distance_model_impl(port, ptr, rust_vec_len, data_len),\n576 => wire__web_audio_api__node__PannerNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n577 => wire__web_audio_api__node__PannerNode_max_distance_impl(port, ptr, rust_vec_len, data_len),\n578 => wire__web_audio_api__node__PannerNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n579 => wire__web_audio_api__node__PannerNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n583 => wire__web_audio_api__node__PannerNode_panning_model_impl(port, ptr, rust_vec_len, data_len),\n587 => wire__web_audio_api__node__PannerNode_ref_distance_impl(port, ptr, rust_vec_len, data_len),\n588 => wire__web_audio_api__node__PannerNode_registration_impl(port, ptr, rust_vec_len, data_len),\n589 => wire__web_audio_api__node__PannerNode_rolloff_factor_impl(port, ptr, rust_vec_len, data_len),\n590 => wire__web_audio_api__node__PannerNode_set_cone_inner_angle_impl(port, ptr, rust_vec_len, data_len),\n591 => wire__web_audio_api__node__PannerNode_set_cone_outer_angle_impl(port, ptr, rust_vec_len, data_len),\n592 => wire__web_audio_api__node__PannerNode_set_cone_outer_gain_impl(port, ptr, rust_vec_len, data_len),\n593 => wire__web_audio_api__node__PannerNode_set_distance_model_impl(port, ptr, rust_vec_len, data_len),\n594 => wire__web_audio_api__node__PannerNode_set_max_distance_impl(port, ptr, rust_vec_len, data_len),\n595 => wire__web_audio_api__node__PannerNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n596 => wire__web_audio_api__node__PannerNode_set_orientation_impl(port, ptr, rust_vec_len, data_len),\n597 => wire__web_audio_api__node__PannerNode_set_panning_model_impl(port, ptr, rust_vec_len, data_len),\n598 => wire__web_audio_api__node__PannerNode_set_position_impl(port, ptr, rust_vec_len, data_len),\n599 => wire__web_audio_api__node__PannerNode_set_ref_distance_impl(port, ptr, rust_vec_len, data_len),\n600 => wire__web_audio_api__node__PannerNode_set_rolloff_factor_impl(port, ptr, rust_vec_len, data_len),\n601 => wire__web_audio_api__node__ScriptProcessorNode_buffer_size_impl(port, ptr, rust_vec_len, data_len),\n602 => wire__web_audio_api__node__ScriptProcessorNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n603 => wire__web_audio_api__node__ScriptProcessorNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n604 => wire__web_audio_api__node__ScriptProcessorNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n605 => wire__web_audio_api__node__ScriptProcessorNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n606 => wire__web_audio_api__node__ScriptProcessorNode_clear_onaudioprocess_impl(port, ptr, rust_vec_len, data_len),\n607 => wire__web_audio_api__node__ScriptProcessorNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n608 => wire__web_audio_api__node__ScriptProcessorNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n609 => wire__web_audio_api__node__ScriptProcessorNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n610 => wire__web_audio_api__node__ScriptProcessorNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n611 => wire__web_audio_api__node__ScriptProcessorNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n612 => wire__web_audio_api__node__ScriptProcessorNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n613 => wire__web_audio_api__node__ScriptProcessorNode_registration_impl(port, ptr, rust_vec_len, data_len),\n614 => wire__web_audio_api__node__ScriptProcessorNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n615 => wire__web_audio_api__node__StereoPannerNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n616 => wire__web_audio_api__node__StereoPannerNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n617 => wire__web_audio_api__node__StereoPannerNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n618 => wire__web_audio_api__node__StereoPannerNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n619 => wire__web_audio_api__node__StereoPannerNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n620 => wire__web_audio_api__node__StereoPannerNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n621 => wire__web_audio_api__node__StereoPannerNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n622 => wire__web_audio_api__node__StereoPannerNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n623 => wire__web_audio_api__node__StereoPannerNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n624 => wire__web_audio_api__node__StereoPannerNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n626 => wire__web_audio_api__node__StereoPannerNode_registration_impl(port, ptr, rust_vec_len, data_len),\n627 => wire__web_audio_api__node__StereoPannerNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n643 => wire__web_audio_api__node__WaveShaperNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n644 => wire__web_audio_api__node__WaveShaperNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n645 => wire__web_audio_api__node__WaveShaperNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n646 => wire__web_audio_api__node__WaveShaperNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n647 => wire__web_audio_api__node__WaveShaperNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n648 => wire__web_audio_api__node__WaveShaperNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n649 => wire__web_audio_api__node__WaveShaperNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n650 => wire__web_audio_api__node__WaveShaperNode_frb_override_connect_impl(port, ptr, rust_vec_len, data_len),\n651 => wire__web_audio_api__node__WaveShaperNode_frb_override_curve_impl(port, ptr, rust_vec_len, data_len),\n652 => wire__web_audio_api__node__WaveShaperNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n653 => wire__web_audio_api__node__WaveShaperNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n654 => wire__web_audio_api__node__WaveShaperNode_oversample_impl(port, ptr, rust_vec_len, data_len),\n655 => wire__web_audio_api__node__WaveShaperNode_registration_impl(port, ptr, rust_vec_len, data_len),\n656 => wire__web_audio_api__node__WaveShaperNode_set_curve_impl(port, ptr, rust_vec_len, data_len),\n657 => wire__web_audio_api__node__WaveShaperNode_set_on_processor_error_impl(port, ptr, rust_vec_len, data_len),\n658 => wire__web_audio_api__node__WaveShaperNode_set_oversample_impl(port, ptr, rust_vec_len, data_len),\n659 => wire__web_audio_api__node__analyser_options_default_impl(port, ptr, rust_vec_len, data_len),\n660 => wire__web_audio_api__node__audio_buffer_source_options_default_impl(port, ptr, rust_vec_len, data_len),\n661 => wire__web_audio_api__node__audio_node_options_default_impl(port, ptr, rust_vec_len, data_len),\n662 => wire__web_audio_api__node__biquad_filter_options_default_impl(port, ptr, rust_vec_len, data_len),\n663 => wire__web_audio_api__node__biquad_filter_type_default_impl(port, ptr, rust_vec_len, data_len),\n664 => wire__web_audio_api__node__channel_merger_options_default_impl(port, ptr, rust_vec_len, data_len),\n665 => wire__web_audio_api__node__channel_splitter_options_default_impl(port, ptr, rust_vec_len, data_len),\n666 => wire__web_audio_api__node__constant_source_options_default_impl(port, ptr, rust_vec_len, data_len),\n667 => wire__web_audio_api__node__convolver_options_default_impl(port, ptr, rust_vec_len, data_len),\n668 => wire__web_audio_api__node__delay_options_default_impl(port, ptr, rust_vec_len, data_len),\n669 => wire__web_audio_api__node__distance_model_type_default_impl(port, ptr, rust_vec_len, data_len),\n670 => wire__web_audio_api__node__dynamics_compressor_options_default_impl(port, ptr, rust_vec_len, data_len),\n671 => wire__web_audio_api__node__gain_options_default_impl(port, ptr, rust_vec_len, data_len),\n672 => wire__web_audio_api__node__oscillator_options_default_impl(port, ptr, rust_vec_len, data_len),\n673 => wire__web_audio_api__node__oscillator_type_default_impl(port, ptr, rust_vec_len, data_len),\n674 => wire__web_audio_api__node__over_sample_type_default_impl(port, ptr, rust_vec_len, data_len),\n675 => wire__web_audio_api__node__panner_options_default_impl(port, ptr, rust_vec_len, data_len),\n676 => wire__web_audio_api__node__panning_model_type_default_impl(port, ptr, rust_vec_len, data_len),\n677 => wire__web_audio_api__node__stereo_panner_options_default_impl(port, ptr, rust_vec_len, data_len),\n678 => wire__web_audio_api__node__wave_shaper_options_default_impl(port, ptr, rust_vec_len, data_len),\n679 => wire__web_audio_api__worklet__AudioWorkletNode_channel_config_impl(port, ptr, rust_vec_len, data_len),\n680 => wire__web_audio_api__worklet__AudioWorkletNode_channel_count_impl(port, ptr, rust_vec_len, data_len),\n681 => wire__web_audio_api__worklet__AudioWorkletNode_channel_count_mode_impl(port, ptr, rust_vec_len, data_len),\n682 => wire__web_audio_api__worklet__AudioWorkletNode_channel_interpretation_impl(port, ptr, rust_vec_len, data_len),\n683 => wire__web_audio_api__worklet__AudioWorkletNode_clear_onprocessorerror_impl(port, ptr, rust_vec_len, data_len),\n684 => wire__web_audio_api__worklet__AudioWorkletNode_disconnect_impl(port, ptr, rust_vec_len, data_len),\n685 => wire__web_audio_api__worklet__AudioWorkletNode_disconnect_output_impl(port, ptr, rust_vec_len, data_len),\n686 => wire__web_audio_api__worklet__AudioWorkletNode_number_of_inputs_impl(port, ptr, rust_vec_len, data_len),\n687 => wire__web_audio_api__worklet__AudioWorkletNode_number_of_outputs_impl(port, ptr, rust_vec_len, data_len),\n688 => wire__web_audio_api__worklet__AudioWorkletNode_parameters_impl(port, ptr, rust_vec_len, data_len),\n689 => wire__web_audio_api__worklet__AudioWorkletNode_registration_impl(port, ptr, rust_vec_len, data_len),\n                        _ => unreachable!(),\n                    }\n                }\n                \n                fn pde_ffi_dispatcher_sync_impl(\n                    func_id: i32,\n                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,\n                    rust_vec_len: i32,\n                    data_len: i32,\n                ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {\n                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs\n                    match func_id {\n                        3 => wire__crate__api__media_element__MyMediaElement_new_impl(ptr, rust_vec_len, data_len),\n118 => wire__web_audio_api__AudioParam_set_value_impl(ptr, rust_vec_len, data_len),\n121 => wire__web_audio_api__AudioParam_value_impl(ptr, rust_vec_len, data_len),\n122 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_input_buffer_impl(ptr, rust_vec_len, data_len),\n123 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_output_buffer_impl(ptr, rust_vec_len, data_len),\n124 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_get_playback_time_impl(ptr, rust_vec_len, data_len),\n125 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_input_buffer_impl(ptr, rust_vec_len, data_len),\n126 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_output_buffer_impl(ptr, rust_vec_len, data_len),\n127 => wire__web_audio_api__AudioProcessingEvent_auto_accessor_set_playback_time_impl(ptr, rust_vec_len, data_len),\n128 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_average_load_impl(ptr, rust_vec_len, data_len),\n129 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_event_impl(ptr, rust_vec_len, data_len),\n130 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_peak_load_impl(ptr, rust_vec_len, data_len),\n131 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_timestamp_impl(ptr, rust_vec_len, data_len),\n132 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_get_underrun_ratio_impl(ptr, rust_vec_len, data_len),\n133 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_average_load_impl(ptr, rust_vec_len, data_len),\n134 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_event_impl(ptr, rust_vec_len, data_len),\n135 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_peak_load_impl(ptr, rust_vec_len, data_len),\n136 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_timestamp_impl(ptr, rust_vec_len, data_len),\n137 => wire__web_audio_api__AudioRenderCapacityEvent_auto_accessor_set_underrun_ratio_impl(ptr, rust_vec_len, data_len),\n141 => wire__web_audio_api__Event_type__impl(ptr, rust_vec_len, data_len),\n142 => wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_get_event_impl(ptr, rust_vec_len, data_len),\n143 => wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_get_rendered_buffer_impl(ptr, rust_vec_len, data_len),\n144 => wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_set_event_impl(ptr, rust_vec_len, data_len),\n145 => wire__web_audio_api__OfflineAudioCompletionEvent_auto_accessor_set_rendered_buffer_impl(ptr, rust_vec_len, data_len),\n182 => wire__web_audio_api__context__AudioContext_new_impl(ptr, rust_vec_len, data_len),\n280 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_blob_impl(ptr, rust_vec_len, data_len),\n281 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_event_impl(ptr, rust_vec_len, data_len),\n282 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_get_timecode_impl(ptr, rust_vec_len, data_len),\n283 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_blob_impl(ptr, rust_vec_len, data_len),\n284 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_event_impl(ptr, rust_vec_len, data_len),\n285 => wire__web_audio_api__media_recorder__BlobEvent_auto_accessor_set_timecode_impl(ptr, rust_vec_len, data_len),\n                        _ => unreachable!(),\n                    }\n                }\n                \n\n// Section: rust2dart\n\n\n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< AnalyserNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< AnalyserNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< AnalyserNode>> for  AnalyserNode {\n            fn into_into_dart(self) -> FrbWrapper< AnalyserNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioBuffer> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioBuffer> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioBuffer>> for AudioBuffer {\n            fn into_into_dart(self) -> FrbWrapper<AudioBuffer> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< AudioBufferSourceNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< AudioBufferSourceNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< AudioBufferSourceNode>> for  AudioBufferSourceNode {\n            fn into_into_dart(self) -> FrbWrapper< AudioBufferSourceNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioContext> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioContext> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioContext>> for AudioContext {\n            fn into_into_dart(self) -> FrbWrapper<AudioContext> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< AudioDestinationNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< AudioDestinationNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< AudioDestinationNode>> for  AudioDestinationNode {\n            fn into_into_dart(self) -> FrbWrapper< AudioDestinationNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioListener> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioListener> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioListener>> for AudioListener {\n            fn into_into_dart(self) -> FrbWrapper<AudioListener> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioParam> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioParam> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioParam>> for AudioParam {\n            fn into_into_dart(self) -> FrbWrapper<AudioParam> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioParamId> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioParamId> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioParamId>> for AudioParamId {\n            fn into_into_dart(self) -> FrbWrapper<AudioParamId> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioProcessingEvent> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioProcessingEvent> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioProcessingEvent>> for AudioProcessingEvent {\n            fn into_into_dart(self) -> FrbWrapper<AudioProcessingEvent> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioRenderCapacity> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioRenderCapacity> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioRenderCapacity>> for AudioRenderCapacity {\n            fn into_into_dart(self) -> FrbWrapper<AudioRenderCapacity> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioRenderCapacityEvent> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioRenderCapacityEvent> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioRenderCapacityEvent>> for AudioRenderCapacityEvent {\n            fn into_into_dart(self) -> FrbWrapper<AudioRenderCapacityEvent> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<AudioWorkletNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<AudioWorkletNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<AudioWorkletNode>> for AudioWorkletNode {\n            fn into_into_dart(self) -> FrbWrapper<AudioWorkletNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< BiquadFilterNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< BiquadFilterNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< BiquadFilterNode>> for  BiquadFilterNode {\n            fn into_into_dart(self) -> FrbWrapper< BiquadFilterNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<BlobEvent> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BlobEvent> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BlobEvent>> for BlobEvent {\n            fn into_into_dart(self) -> FrbWrapper<BlobEvent> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<ChannelConfig> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ChannelConfig> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ChannelConfig>> for ChannelConfig {\n            fn into_into_dart(self) -> FrbWrapper<ChannelConfig> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< ChannelMergerNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< ChannelMergerNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< ChannelMergerNode>> for  ChannelMergerNode {\n            fn into_into_dart(self) -> FrbWrapper< ChannelMergerNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< ChannelSplitterNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< ChannelSplitterNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< ChannelSplitterNode>> for  ChannelSplitterNode {\n            fn into_into_dart(self) -> FrbWrapper< ChannelSplitterNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<ConcreteBaseAudioContext> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ConcreteBaseAudioContext> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ConcreteBaseAudioContext>> for ConcreteBaseAudioContext {\n            fn into_into_dart(self) -> FrbWrapper<ConcreteBaseAudioContext> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< ConstantSourceNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< ConstantSourceNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< ConstantSourceNode>> for  ConstantSourceNode {\n            fn into_into_dart(self) -> FrbWrapper< ConstantSourceNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< ConvolverNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< ConvolverNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< ConvolverNode>> for  ConvolverNode {\n            fn into_into_dart(self) -> FrbWrapper< ConvolverNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< DelayNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< DelayNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< DelayNode>> for  DelayNode {\n            fn into_into_dart(self) -> FrbWrapper< DelayNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< DynamicsCompressorNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< DynamicsCompressorNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< DynamicsCompressorNode>> for  DynamicsCompressorNode {\n            fn into_into_dart(self) -> FrbWrapper< DynamicsCompressorNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<Event> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Event> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Event>> for Event {\n            fn into_into_dart(self) -> FrbWrapper<Event> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< GainNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< GainNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< GainNode>> for  GainNode {\n            fn into_into_dart(self) -> FrbWrapper< GainNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< IIRFilterNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< IIRFilterNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< IIRFilterNode>> for  IIRFilterNode {\n            fn into_into_dart(self) -> FrbWrapper< IIRFilterNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MediaElementAudioSourceNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MediaElementAudioSourceNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MediaElementAudioSourceNode>> for MediaElementAudioSourceNode {\n            fn into_into_dart(self) -> FrbWrapper<MediaElementAudioSourceNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MediaRecorder> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MediaRecorder> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MediaRecorder>> for MediaRecorder {\n            fn into_into_dart(self) -> FrbWrapper<MediaRecorder> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MediaStream> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MediaStream> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MediaStream>> for MediaStream {\n            fn into_into_dart(self) -> FrbWrapper<MediaStream> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< MediaStreamAudioDestinationNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< MediaStreamAudioDestinationNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< MediaStreamAudioDestinationNode>> for  MediaStreamAudioDestinationNode {\n            fn into_into_dart(self) -> FrbWrapper< MediaStreamAudioDestinationNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< MediaStreamAudioSourceNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< MediaStreamAudioSourceNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< MediaStreamAudioSourceNode>> for  MediaStreamAudioSourceNode {\n            fn into_into_dart(self) -> FrbWrapper< MediaStreamAudioSourceNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MediaStreamConstraints> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MediaStreamConstraints> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MediaStreamConstraints>> for MediaStreamConstraints {\n            fn into_into_dart(self) -> FrbWrapper<MediaStreamConstraints> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MediaStreamTrack> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MediaStreamTrack> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MediaStreamTrack>> for MediaStreamTrack {\n            fn into_into_dart(self) -> FrbWrapper<MediaStreamTrack> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< MediaStreamTrackAudioSourceNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< MediaStreamTrackAudioSourceNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< MediaStreamTrackAudioSourceNode>> for  MediaStreamTrackAudioSourceNode {\n            fn into_into_dart(self) -> FrbWrapper< MediaStreamTrackAudioSourceNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<MyMediaElement> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MyMediaElement> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MyMediaElement>> for MyMediaElement {\n            fn into_into_dart(self) -> FrbWrapper<MyMediaElement> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<OfflineAudioCompletionEvent> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<OfflineAudioCompletionEvent> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<OfflineAudioCompletionEvent>> for OfflineAudioCompletionEvent {\n            fn into_into_dart(self) -> FrbWrapper<OfflineAudioCompletionEvent> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<OfflineAudioContext> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<OfflineAudioContext> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<OfflineAudioContext>> for OfflineAudioContext {\n            fn into_into_dart(self) -> FrbWrapper<OfflineAudioContext> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< OscillatorNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< OscillatorNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< OscillatorNode>> for  OscillatorNode {\n            fn into_into_dart(self) -> FrbWrapper< OscillatorNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< PannerNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< PannerNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< PannerNode>> for  PannerNode {\n            fn into_into_dart(self) -> FrbWrapper< PannerNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<PeriodicWave> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<PeriodicWave> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PeriodicWave>> for PeriodicWave {\n            fn into_into_dart(self) -> FrbWrapper<PeriodicWave> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< ScriptProcessorNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< ScriptProcessorNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< ScriptProcessorNode>> for  ScriptProcessorNode {\n            fn into_into_dart(self) -> FrbWrapper< ScriptProcessorNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< StereoPannerNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< StereoPannerNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< StereoPannerNode>> for  StereoPannerNode {\n            fn into_into_dart(self) -> FrbWrapper< StereoPannerNode> {\n                self.into()\n            }\n        }\n\n                \n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper< WaveShaperNode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0).into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper< WaveShaperNode> {}\n\n                impl flutter_rust_bridge::IntoIntoDart<FrbWrapper< WaveShaperNode>> for  WaveShaperNode {\n            fn into_into_dart(self) -> FrbWrapper< WaveShaperNode> {\n                self.into()\n            }\n        }\n\n                // Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::AnalyserOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.fft_size.into_into_dart().into_dart(),\nself.0.max_decibels.into_into_dart().into_dart(),\nself.0.min_decibels.into_into_dart().into_dart(),\nself.0.smoothing_time_constant.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::AnalyserOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::AnalyserOptions>> for web_audio_api::node::AnalyserOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::AnalyserOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::AudioBufferOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.number_of_channels.into_into_dart().into_dart(),\nself.0.length.into_into_dart().into_dart(),\nself.0.sample_rate.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::AudioBufferOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::AudioBufferOptions>> for web_audio_api::AudioBufferOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::AudioBufferOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::AudioBufferSourceOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.buffer.into_into_dart().into_dart(),\nself.0.detune.into_into_dart().into_dart(),\nself.0.loop_.into_into_dart().into_dart(),\nself.0.loop_start.into_into_dart().into_dart(),\nself.0.loop_end.into_into_dart().into_dart(),\nself.0.playback_rate.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::AudioBufferSourceOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::AudioBufferSourceOptions>> for web_audio_api::node::AudioBufferSourceOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::AudioBufferSourceOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::context::AudioContextLatencyCategory> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {web_audio_api::context::AudioContextLatencyCategory::Balanced => { [0.into_dart()].into_dart() }\nweb_audio_api::context::AudioContextLatencyCategory::Interactive => { [1.into_dart()].into_dart() }\nweb_audio_api::context::AudioContextLatencyCategory::Playback => { [2.into_dart()].into_dart() }\nweb_audio_api::context::AudioContextLatencyCategory::Custom(field0) => { [3.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\n _ => { unimplemented!(\"\"); }}\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::context::AudioContextLatencyCategory> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::context::AudioContextLatencyCategory>> for web_audio_api::context::AudioContextLatencyCategory {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::context::AudioContextLatencyCategory> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::context::AudioContextOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.latency_hint.into_into_dart().into_dart(),\nself.0.sample_rate.into_into_dart().into_dart(),\nself.0.sink_id.into_into_dart().into_dart(),\nself.0.render_size_hint.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::context::AudioContextOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::context::AudioContextOptions>> for web_audio_api::context::AudioContextOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::context::AudioContextOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::context::AudioContextRenderSizeCategory> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::context::AudioContextRenderSizeCategory::Default => 0.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::context::AudioContextRenderSizeCategory> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::context::AudioContextRenderSizeCategory>> for web_audio_api::context::AudioContextRenderSizeCategory {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::context::AudioContextRenderSizeCategory> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::context::AudioContextState> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::context::AudioContextState::Suspended => 0.into_dart(),\nweb_audio_api::context::AudioContextState::Running => 1.into_dart(),\nweb_audio_api::context::AudioContextState::Closed => 2.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::context::AudioContextState> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::context::AudioContextState>> for web_audio_api::context::AudioContextState {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::context::AudioContextState> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for crate::frb_generated::AudioNodeImplementor {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self {crate::frb_generated::AudioNodeImplementor::Variant0(field0) => { [0.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant1(field0) => { [1.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant2(field0) => { [2.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant3(field0) => { [3.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant4(field0) => { [4.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant5(field0) => { [5.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant6(field0) => { [6.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant7(field0) => { [7.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant8(field0) => { [8.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant9(field0) => { [9.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant10(field0) => { [10.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant11(field0) => { [11.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant12(field0) => { [12.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant13(field0) => { [13.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant14(field0) => { [14.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant15(field0) => { [15.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant16(field0) => { [16.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant17(field0) => { [17.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant18(field0) => { [18.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant19(field0) => { [19.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant20(field0) => { [20.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant21(field0) => { [21.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::AudioNodeImplementor::Variant22(field0) => { [22.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\n _ => { unimplemented!(\"\"); }}\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::AudioNodeImplementor {}\nimpl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::AudioNodeImplementor> for crate::frb_generated::AudioNodeImplementor {\n            fn into_into_dart(self) -> crate::frb_generated::AudioNodeImplementor {\n                self\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::AudioNodeOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.channel_count.into_into_dart().into_dart(),\nself.0.channel_count_mode.into_into_dart().into_dart(),\nself.0.channel_interpretation.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::AudioNodeOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::AudioNodeOptions>> for web_audio_api::node::AudioNodeOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::AudioNodeOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::AudioParamDescriptor> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.name.into_into_dart().into_dart(),\nself.0.automation_rate.into_into_dart().into_dart(),\nself.0.default_value.into_into_dart().into_dart(),\nself.0.min_value.into_into_dart().into_dart(),\nself.0.max_value.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::AudioParamDescriptor> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::AudioParamDescriptor>> for web_audio_api::AudioParamDescriptor {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::AudioParamDescriptor> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::AudioRenderCapacityOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.update_interval.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::AudioRenderCapacityOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::AudioRenderCapacityOptions>> for web_audio_api::AudioRenderCapacityOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::AudioRenderCapacityOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant0(field0) => { [0.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant1(field0) => { [1.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant2(field0) => { [2.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant3(field0) => { [3.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant4(field0) => { [4.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant5(field0) => { [5.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant6(field0) => { [6.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant7(field0) => { [7.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant8(field0) => { [8.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant9(field0) => { [9.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant10(field0) => { [10.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant11(field0) => { [11.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant12(field0) => { [12.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant13(field0) => { [13.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant14(field0) => { [14.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant15(field0) => { [15.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant16(field0) => { [16.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant17(field0) => { [17.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant18(field0) => { [18.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant19(field0) => { [19.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant20(field0) => { [20.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant21(field0) => { [21.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant22(field0) => { [22.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant23(field0) => { [23.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant24(field0) => { [24.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant25(field0) => { [25.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant26(field0) => { [26.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant27(field0) => { [27.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant28(field0) => { [28.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant29(field0) => { [29.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant30(field0) => { [30.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant31(field0) => { [31.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\n _ => { unimplemented!(\"\"); }}\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {}\nimpl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum> for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            fn into_into_dart(self) -> crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n                self\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum::Variant0(field0) => { [0.into_dart(),\nfield0.into_into_dart().into_dart()].into_dart() }\n _ => { unimplemented!(\"\"); }}\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {}\nimpl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum> for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            fn into_into_dart(self) -> crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n                self\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::AutomationRate> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::AutomationRate::A => 0.into_dart(),\nweb_audio_api::AutomationRate::K => 1.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::AutomationRate> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::AutomationRate>> for web_audio_api::AutomationRate {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::AutomationRate> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::BiquadFilterOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.q.into_into_dart().into_dart(),\nself.0.detune.into_into_dart().into_dart(),\nself.0.frequency.into_into_dart().into_dart(),\nself.0.gain.into_into_dart().into_dart(),\nself.0.type_.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::BiquadFilterOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::BiquadFilterOptions>> for web_audio_api::node::BiquadFilterOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::BiquadFilterOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::BiquadFilterType> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::BiquadFilterType::Lowpass => 0.into_dart(),\nweb_audio_api::node::BiquadFilterType::Highpass => 1.into_dart(),\nweb_audio_api::node::BiquadFilterType::Bandpass => 2.into_dart(),\nweb_audio_api::node::BiquadFilterType::Notch => 3.into_dart(),\nweb_audio_api::node::BiquadFilterType::Allpass => 4.into_dart(),\nweb_audio_api::node::BiquadFilterType::Peaking => 5.into_dart(),\nweb_audio_api::node::BiquadFilterType::Lowshelf => 6.into_dart(),\nweb_audio_api::node::BiquadFilterType::Highshelf => 7.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::BiquadFilterType> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::BiquadFilterType>> for web_audio_api::node::BiquadFilterType {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::BiquadFilterType> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ChannelCountMode> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::ChannelCountMode::Max => 0.into_dart(),\nweb_audio_api::node::ChannelCountMode::ClampedMax => 1.into_dart(),\nweb_audio_api::node::ChannelCountMode::Explicit => 2.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ChannelCountMode> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ChannelCountMode>> for web_audio_api::node::ChannelCountMode {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ChannelCountMode> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ChannelInterpretation> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::ChannelInterpretation::Speakers => 0.into_dart(),\nweb_audio_api::node::ChannelInterpretation::Discrete => 1.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ChannelInterpretation> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ChannelInterpretation>> for web_audio_api::node::ChannelInterpretation {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ChannelInterpretation> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ChannelMergerOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.number_of_inputs.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ChannelMergerOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ChannelMergerOptions>> for web_audio_api::node::ChannelMergerOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ChannelMergerOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ChannelSplitterOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.number_of_outputs.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ChannelSplitterOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ChannelSplitterOptions>> for web_audio_api::node::ChannelSplitterOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ChannelSplitterOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ConstantSourceOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.offset.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ConstantSourceOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ConstantSourceOptions>> for web_audio_api::node::ConstantSourceOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ConstantSourceOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::ConvolverOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.buffer.into_into_dart().into_dart(),\nself.0.disable_normalization.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::ConvolverOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::ConvolverOptions>> for web_audio_api::node::ConvolverOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::ConvolverOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::DelayOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.max_delay_time.into_into_dart().into_dart(),\nself.0.delay_time.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::DelayOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::DelayOptions>> for web_audio_api::node::DelayOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::DelayOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::DistanceModelType> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::DistanceModelType::Linear => 0.into_dart(),\nweb_audio_api::node::DistanceModelType::Inverse => 1.into_dart(),\nweb_audio_api::node::DistanceModelType::Exponential => 2.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::DistanceModelType> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::DistanceModelType>> for web_audio_api::node::DistanceModelType {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::DistanceModelType> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::DynamicsCompressorOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.attack.into_into_dart().into_dart(),\nself.0.knee.into_into_dart().into_dart(),\nself.0.ratio.into_into_dart().into_dart(),\nself.0.release.into_into_dart().into_dart(),\nself.0.threshold.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::DynamicsCompressorOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::DynamicsCompressorOptions>> for web_audio_api::node::DynamicsCompressorOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::DynamicsCompressorOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::GainOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.gain.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::GainOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::GainOptions>> for web_audio_api::node::GainOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::GainOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::simple::Level> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    crate::api::simple::Level::Error => 0.into_dart(),\ncrate::api::simple::Level::Warn => 1.into_dart(),\ncrate::api::simple::Level::Info => 2.into_dart(),\ncrate::api::simple::Level::Debug => 3.into_dart(),\ncrate::api::simple::Level::Trace => 4.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::api::simple::Level> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::simple::Level>> for crate::api::simple::Level {\n            fn into_into_dart(self) -> FrbWrapper<crate::api::simple::Level> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::simple::LogEntry> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.time_millis.into_into_dart().into_dart(),\nself.0.msg.into_into_dart().into_dart(),\nself.0.log_level.into_into_dart().into_dart(),\nself.0.lbl.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::api::simple::LogEntry> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::simple::LogEntry>> for crate::api::simple::LogEntry {\n            fn into_into_dart(self) -> FrbWrapper<crate::api::simple::LogEntry> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::media_streams::MediaStreamTrackState> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::media_streams::MediaStreamTrackState::Live => 0.into_dart(),\nweb_audio_api::media_streams::MediaStreamTrackState::Ended => 1.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::media_streams::MediaStreamTrackState> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::media_streams::MediaStreamTrackState>> for web_audio_api::media_streams::MediaStreamTrackState {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::media_streams::MediaStreamTrackState> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::OscillatorOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.type_.into_into_dart().into_dart(),\nself.0.frequency.into_into_dart().into_dart(),\nself.0.detune.into_into_dart().into_dart(),\nself.0.periodic_wave.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::OscillatorOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::OscillatorOptions>> for web_audio_api::node::OscillatorOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::OscillatorOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::OscillatorType> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::OscillatorType::Sine => 0.into_dart(),\nweb_audio_api::node::OscillatorType::Square => 1.into_dart(),\nweb_audio_api::node::OscillatorType::Sawtooth => 2.into_dart(),\nweb_audio_api::node::OscillatorType::Triangle => 3.into_dart(),\nweb_audio_api::node::OscillatorType::Custom => 4.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::OscillatorType> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::OscillatorType>> for web_audio_api::node::OscillatorType {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::OscillatorType> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::OverSampleType> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::OverSampleType::None => 0.into_dart(),\nweb_audio_api::node::OverSampleType::X2 => 1.into_dart(),\nweb_audio_api::node::OverSampleType::X4 => 2.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::OverSampleType> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::OverSampleType>> for web_audio_api::node::OverSampleType {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::OverSampleType> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::PannerOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.panning_model.into_into_dart().into_dart(),\nself.0.distance_model.into_into_dart().into_dart(),\nself.0.position_x.into_into_dart().into_dart(),\nself.0.position_y.into_into_dart().into_dart(),\nself.0.position_z.into_into_dart().into_dart(),\nself.0.orientation_x.into_into_dart().into_dart(),\nself.0.orientation_y.into_into_dart().into_dart(),\nself.0.orientation_z.into_into_dart().into_dart(),\nself.0.ref_distance.into_into_dart().into_dart(),\nself.0.max_distance.into_into_dart().into_dart(),\nself.0.rolloff_factor.into_into_dart().into_dart(),\nself.0.cone_inner_angle.into_into_dart().into_dart(),\nself.0.cone_outer_angle.into_into_dart().into_dart(),\nself.0.cone_outer_gain.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::PannerOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::PannerOptions>> for web_audio_api::node::PannerOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::PannerOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::PanningModelType> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    match self.0 {\n                    web_audio_api::node::PanningModelType::EqualPower => 0.into_dart(),\nweb_audio_api::node::PanningModelType::HRTF => 1.into_dart(),\n                    _ => unreachable!(),\n                }\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::PanningModelType> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::PanningModelType>> for web_audio_api::node::PanningModelType {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::PanningModelType> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::PeriodicWaveOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.real.into_into_dart().into_dart(),\nself.0.imag.into_into_dart().into_dart(),\nself.0.disable_normalization.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::PeriodicWaveOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::PeriodicWaveOptions>> for web_audio_api::PeriodicWaveOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::PeriodicWaveOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::StereoPannerOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.pan.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::StereoPannerOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::StereoPannerOptions>> for web_audio_api::node::StereoPannerOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::StereoPannerOptions> {\n                self.into()\n            }\n        }\n// Codec=Dco (DartCObject based), see doc to use other codecs\n            impl flutter_rust_bridge::IntoDart for FrbWrapper<web_audio_api::node::WaveShaperOptions> {\n                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {\n                    [\n                    self.0.curve.into_into_dart().into_dart(),\nself.0.oversample.into_into_dart().into_dart(),\nself.0.audio_node_options.into_into_dart().into_dart()\n                ].into_dart()\n                }\n            }\n            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<web_audio_api::node::WaveShaperOptions> {}\nimpl flutter_rust_bridge::IntoIntoDart<FrbWrapper<web_audio_api::node::WaveShaperOptions>> for web_audio_api::node::WaveShaperOptions {\n            fn into_into_dart(self) -> FrbWrapper<web_audio_api::node::WaveShaperOptions> {\n                self.into()\n            }\n        }\n\n                impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(format!(\"{:?}\", self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AnalyserNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AudioBufferSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AudioDestinationNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AudioListener> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AudioParam> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<AudioWorkletNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<BiquadFilterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<ChannelMergerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<ChannelSplitterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<ConstantSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<ConvolverNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<DelayNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<DynamicsCompressorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<GainNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<IIRFilterNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<MediaElementAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<MediaStreamAudioDestinationNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<MediaStreamAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<MediaStreamTrackAudioSourceNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<OscillatorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<PannerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<ScriptProcessorNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<StereoPannerNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for RustAutoOpaqueMoi<WaveShaperNode> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);}\n                }\n                \n                impl SseEncode for  AnalyserNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AnalyserNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioBuffer {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  AudioBufferSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AudioBufferSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  AudioDestinationNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< AudioDestinationNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioListener {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioParam {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioParamId {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioProcessingEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioRenderCapacity {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioRenderCapacityEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for AudioWorkletNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  BiquadFilterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BiquadFilterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for BlobEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for ChannelConfig {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  ChannelMergerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ChannelMergerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  ChannelSplitterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ChannelSplitterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for ConcreteBaseAudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  ConstantSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ConstantSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  ConvolverNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ConvolverNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  DelayNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< DelayNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  DynamicsCompressorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< DynamicsCompressorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for Event {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  GainNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< GainNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  IIRFilterNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IIRFilterNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MediaElementAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MediaRecorder {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MediaStream {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  MediaStreamAudioDestinationNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamAudioDestinationNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  MediaStreamAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MediaStreamConstraints {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MediaStreamTrack {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  MediaStreamTrackAudioSourceNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MediaStreamTrackAudioSourceNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for MyMediaElement {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for OfflineAudioCompletionEvent {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for OfflineAudioContext {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  OscillatorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< OscillatorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  PannerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PannerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for PeriodicWave {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  ScriptProcessorNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ScriptProcessorNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  StereoPannerNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< StereoPannerNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for  WaveShaperNode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< WaveShaperNode>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);}\n                }\n                \n                impl SseEncode for flutter_rust_bridge::DartOpaque {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.encode(), serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {let (ptr, size) = self.sse_encode_raw();\n                <usize>::sse_encode(ptr, serializer);\n                <i32>::sse_encode(size, serializer);}\n                }\n                \n                impl SseEncode for StreamSink<crate::api::simple::LogEntry,flutter_rust_bridge::for_generated::SseCodec> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {unimplemented!(\"\")}\n                }\n                \n                impl SseEncode for String {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<u8>>::sse_encode(self.into_bytes(), serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::AnalyserOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.fft_size, serializer);\n<f64>::sse_encode(self.max_decibels, serializer);\n<f64>::sse_encode(self.min_decibels, serializer);\n<f64>::sse_encode(self.smoothing_time_constant, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::AudioBufferOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.number_of_channels, serializer);\n<usize>::sse_encode(self.length, serializer);\n<f32>::sse_encode(self.sample_rate, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::AudioBufferSourceOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<AudioBuffer>>::sse_encode(self.buffer, serializer);\n<f32>::sse_encode(self.detune, serializer);\n<bool>::sse_encode(self.loop_, serializer);\n<f64>::sse_encode(self.loop_start, serializer);\n<f64>::sse_encode(self.loop_end, serializer);\n<f32>::sse_encode(self.playback_rate, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::context::AudioContextLatencyCategory {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {web_audio_api::context::AudioContextLatencyCategory::Balanced => { <i32>::sse_encode(0, serializer);  }\nweb_audio_api::context::AudioContextLatencyCategory::Interactive => { <i32>::sse_encode(1, serializer);  }\nweb_audio_api::context::AudioContextLatencyCategory::Playback => { <i32>::sse_encode(2, serializer);  }\nweb_audio_api::context::AudioContextLatencyCategory::Custom(field0) => { <i32>::sse_encode(3, serializer); <f64>::sse_encode(field0, serializer);\n }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseEncode for web_audio_api::context::AudioContextOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<web_audio_api::context::AudioContextLatencyCategory>::sse_encode(self.latency_hint, serializer);\n<Option<f32>>::sse_encode(self.sample_rate, serializer);\n<String>::sse_encode(self.sink_id, serializer);\n<web_audio_api::context::AudioContextRenderSizeCategory>::sse_encode(self.render_size_hint, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::context::AudioContextRenderSizeCategory {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::context::AudioContextRenderSizeCategory::Default => { 0 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::context::AudioContextState {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::context::AudioContextState::Suspended => { 0 }\nweb_audio_api::context::AudioContextState::Running => { 1 }\nweb_audio_api::context::AudioContextState::Closed => { 2 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for crate::frb_generated::AudioNodeImplementor {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::AudioNodeImplementor::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<AnalyserNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant1(field0) => { <i32>::sse_encode(1, serializer); <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant2(field0) => { <i32>::sse_encode(2, serializer); <RustAutoOpaqueMoi<AudioDestinationNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant3(field0) => { <i32>::sse_encode(3, serializer); <RustAutoOpaqueMoi<AudioParam>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant4(field0) => { <i32>::sse_encode(4, serializer); <RustAutoOpaqueMoi<AudioWorkletNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant5(field0) => { <i32>::sse_encode(5, serializer); <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant6(field0) => { <i32>::sse_encode(6, serializer); <RustAutoOpaqueMoi<ChannelMergerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant7(field0) => { <i32>::sse_encode(7, serializer); <RustAutoOpaqueMoi<ChannelSplitterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant8(field0) => { <i32>::sse_encode(8, serializer); <RustAutoOpaqueMoi<ConstantSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant9(field0) => { <i32>::sse_encode(9, serializer); <RustAutoOpaqueMoi<ConvolverNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant10(field0) => { <i32>::sse_encode(10, serializer); <RustAutoOpaqueMoi<DelayNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant11(field0) => { <i32>::sse_encode(11, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant12(field0) => { <i32>::sse_encode(12, serializer); <RustAutoOpaqueMoi<GainNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant13(field0) => { <i32>::sse_encode(13, serializer); <RustAutoOpaqueMoi<IIRFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant14(field0) => { <i32>::sse_encode(14, serializer); <RustAutoOpaqueMoi<MediaElementAudioSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant15(field0) => { <i32>::sse_encode(15, serializer); <RustAutoOpaqueMoi<MediaStreamAudioDestinationNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant16(field0) => { <i32>::sse_encode(16, serializer); <RustAutoOpaqueMoi<MediaStreamAudioSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant17(field0) => { <i32>::sse_encode(17, serializer); <RustAutoOpaqueMoi<MediaStreamTrackAudioSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant18(field0) => { <i32>::sse_encode(18, serializer); <RustAutoOpaqueMoi<OscillatorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant19(field0) => { <i32>::sse_encode(19, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant20(field0) => { <i32>::sse_encode(20, serializer); <RustAutoOpaqueMoi<ScriptProcessorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant21(field0) => { <i32>::sse_encode(21, serializer); <RustAutoOpaqueMoi<StereoPannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::AudioNodeImplementor::Variant22(field0) => { <i32>::sse_encode(22, serializer); <RustAutoOpaqueMoi<WaveShaperNode>>::sse_encode(field0, serializer);\n }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseEncode for web_audio_api::node::AudioNodeOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.channel_count, serializer);\n<web_audio_api::node::ChannelCountMode>::sse_encode(self.channel_count_mode, serializer);\n<web_audio_api::node::ChannelInterpretation>::sse_encode(self.channel_interpretation, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::AudioParamDescriptor {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.name, serializer);\n<web_audio_api::AutomationRate>::sse_encode(self.automation_rate, serializer);\n<f32>::sse_encode(self.default_value, serializer);\n<f32>::sse_encode(self.min_value, serializer);\n<f32>::sse_encode(self.max_value, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::AudioRenderCapacityOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f64>::sse_encode(self.update_interval, serializer);}\n                }\n                \n                impl SseEncode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant1(field0) => { <i32>::sse_encode(1, serializer); <RustAutoOpaqueMoi<AudioBufferSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant2(field0) => { <i32>::sse_encode(2, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant3(field0) => { <i32>::sse_encode(3, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant4(field0) => { <i32>::sse_encode(4, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant5(field0) => { <i32>::sse_encode(5, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant6(field0) => { <i32>::sse_encode(6, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant7(field0) => { <i32>::sse_encode(7, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant8(field0) => { <i32>::sse_encode(8, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant9(field0) => { <i32>::sse_encode(9, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant10(field0) => { <i32>::sse_encode(10, serializer); <RustAutoOpaqueMoi<AudioListener>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant11(field0) => { <i32>::sse_encode(11, serializer); <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant12(field0) => { <i32>::sse_encode(12, serializer); <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant13(field0) => { <i32>::sse_encode(13, serializer); <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant14(field0) => { <i32>::sse_encode(14, serializer); <RustAutoOpaqueMoi<BiquadFilterNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant15(field0) => { <i32>::sse_encode(15, serializer); <RustAutoOpaqueMoi<ConstantSourceNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant16(field0) => { <i32>::sse_encode(16, serializer); <RustAutoOpaqueMoi<DelayNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant17(field0) => { <i32>::sse_encode(17, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant18(field0) => { <i32>::sse_encode(18, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant19(field0) => { <i32>::sse_encode(19, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant20(field0) => { <i32>::sse_encode(20, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant21(field0) => { <i32>::sse_encode(21, serializer); <RustAutoOpaqueMoi<DynamicsCompressorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant22(field0) => { <i32>::sse_encode(22, serializer); <RustAutoOpaqueMoi<GainNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant23(field0) => { <i32>::sse_encode(23, serializer); <RustAutoOpaqueMoi<OscillatorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant24(field0) => { <i32>::sse_encode(24, serializer); <RustAutoOpaqueMoi<OscillatorNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant25(field0) => { <i32>::sse_encode(25, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant26(field0) => { <i32>::sse_encode(26, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant27(field0) => { <i32>::sse_encode(27, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant28(field0) => { <i32>::sse_encode(28, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant29(field0) => { <i32>::sse_encode(29, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant30(field0) => { <i32>::sse_encode(30, serializer); <RustAutoOpaqueMoi<PannerNode>>::sse_encode(field0, serializer);\n }\ncrate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum::Variant31(field0) => { <i32>::sse_encode(31, serializer); <RustAutoOpaqueMoi<StereoPannerNode>>::sse_encode(field0, serializer);\n }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseEncode for crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::frb_generated::Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum::Variant0(field0) => { <i32>::sse_encode(0, serializer); <RustAutoOpaqueMoi<MediaStreamAudioDestinationNode>>::sse_encode(field0, serializer);\n }\n _ => { unimplemented!(\"\"); }}}\n                }\n                \n                impl SseEncode for web_audio_api::AutomationRate {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::AutomationRate::A => { 0 }\nweb_audio_api::AutomationRate::K => { 1 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::BiquadFilterOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f32>::sse_encode(self.q, serializer);\n<f32>::sse_encode(self.detune, serializer);\n<f32>::sse_encode(self.frequency, serializer);\n<f32>::sse_encode(self.gain, serializer);\n<web_audio_api::node::BiquadFilterType>::sse_encode(self.type_, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::BiquadFilterType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::BiquadFilterType::Lowpass => { 0 }\nweb_audio_api::node::BiquadFilterType::Highpass => { 1 }\nweb_audio_api::node::BiquadFilterType::Bandpass => { 2 }\nweb_audio_api::node::BiquadFilterType::Notch => { 3 }\nweb_audio_api::node::BiquadFilterType::Allpass => { 4 }\nweb_audio_api::node::BiquadFilterType::Peaking => { 5 }\nweb_audio_api::node::BiquadFilterType::Lowshelf => { 6 }\nweb_audio_api::node::BiquadFilterType::Highshelf => { 7 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for bool {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self as _).unwrap();}\n                }\n                \n                impl SseEncode for web_audio_api::node::ChannelCountMode {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::ChannelCountMode::Max => { 0 }\nweb_audio_api::node::ChannelCountMode::ClampedMax => { 1 }\nweb_audio_api::node::ChannelCountMode::Explicit => { 2 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::ChannelInterpretation {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::ChannelInterpretation::Speakers => { 0 }\nweb_audio_api::node::ChannelInterpretation::Discrete => { 1 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::ChannelMergerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.number_of_inputs, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::ChannelSplitterOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<usize>::sse_encode(self.number_of_outputs, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::ConstantSourceOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f32>::sse_encode(self.offset, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::ConvolverOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<AudioBuffer>>::sse_encode(self.buffer, serializer);\n<bool>::sse_encode(self.disable_normalization, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::DelayOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f64>::sse_encode(self.max_delay_time, serializer);\n<f64>::sse_encode(self.delay_time, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::DistanceModelType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::DistanceModelType::Linear => { 0 }\nweb_audio_api::node::DistanceModelType::Inverse => { 1 }\nweb_audio_api::node::DistanceModelType::Exponential => { 2 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::DynamicsCompressorOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f32>::sse_encode(self.attack, serializer);\n<f32>::sse_encode(self.knee, serializer);\n<f32>::sse_encode(self.ratio, serializer);\n<f32>::sse_encode(self.release, serializer);\n<f32>::sse_encode(self.threshold, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for f32 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_f32::<NativeEndian>(self).unwrap();}\n                }\n                \n                impl SseEncode for f64 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_f64::<NativeEndian>(self).unwrap();}\n                }\n                \n                impl SseEncode for web_audio_api::node::GainOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f32>::sse_encode(self.gain, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for i32 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i32::<NativeEndian>(self).unwrap();}\n                }\n                \n                impl SseEncode for i64 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i64::<NativeEndian>(self).unwrap();}\n                }\n                \n                impl SseEncode for crate::api::simple::Level {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::api::simple::Level::Error => { 0 }\ncrate::api::simple::Level::Warn => { 1 }\ncrate::api::simple::Level::Info => { 2 }\ncrate::api::simple::Level::Debug => { 3 }\ncrate::api::simple::Level::Trace => { 4 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for Vec<MediaStreamTrack> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <MediaStreamTrack>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for Vec<web_audio_api::AudioParamDescriptor> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <web_audio_api::AudioParamDescriptor>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for Vec<Vec<f32>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <Vec<f32>>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for Vec<f32> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <f32>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for Vec<f64> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <f64>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for Vec<u8> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);\n        for item in self { <u8>::sse_encode(item, serializer); }}\n                }\n                \n                impl SseEncode for crate::api::simple::LogEntry {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i64>::sse_encode(self.time_millis, serializer);\n<String>::sse_encode(self.msg, serializer);\n<crate::api::simple::Level>::sse_encode(self.log_level, serializer);\n<String>::sse_encode(self.lbl, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::media_streams::MediaStreamTrackState {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::media_streams::MediaStreamTrackState::Live => { 0 }\nweb_audio_api::media_streams::MediaStreamTrackState::Ended => { 1 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for Option<AudioBuffer> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);\n                if let Some(value) = self {\n                    <AudioBuffer>::sse_encode(value, serializer);\n                }}\n                }\n                \n                impl SseEncode for Option<PeriodicWave> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);\n                if let Some(value) = self {\n                    <PeriodicWave>::sse_encode(value, serializer);\n                }}\n                }\n                \n                impl SseEncode for Option<f32> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);\n                if let Some(value) = self {\n                    <f32>::sse_encode(value, serializer);\n                }}\n                }\n                \n                impl SseEncode for Option<Vec<f32>> {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);\n                if let Some(value) = self {\n                    <Vec<f32>>::sse_encode(value, serializer);\n                }}\n                }\n                \n                impl SseEncode for web_audio_api::node::OscillatorOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<web_audio_api::node::OscillatorType>::sse_encode(self.type_, serializer);\n<f32>::sse_encode(self.frequency, serializer);\n<f32>::sse_encode(self.detune, serializer);\n<Option<PeriodicWave>>::sse_encode(self.periodic_wave, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::OscillatorType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::OscillatorType::Sine => { 0 }\nweb_audio_api::node::OscillatorType::Square => { 1 }\nweb_audio_api::node::OscillatorType::Sawtooth => { 2 }\nweb_audio_api::node::OscillatorType::Triangle => { 3 }\nweb_audio_api::node::OscillatorType::Custom => { 4 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::OverSampleType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::OverSampleType::None => { 0 }\nweb_audio_api::node::OverSampleType::X2 => { 1 }\nweb_audio_api::node::OverSampleType::X4 => { 2 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::PannerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<web_audio_api::node::PanningModelType>::sse_encode(self.panning_model, serializer);\n<web_audio_api::node::DistanceModelType>::sse_encode(self.distance_model, serializer);\n<f32>::sse_encode(self.position_x, serializer);\n<f32>::sse_encode(self.position_y, serializer);\n<f32>::sse_encode(self.position_z, serializer);\n<f32>::sse_encode(self.orientation_x, serializer);\n<f32>::sse_encode(self.orientation_y, serializer);\n<f32>::sse_encode(self.orientation_z, serializer);\n<f64>::sse_encode(self.ref_distance, serializer);\n<f64>::sse_encode(self.max_distance, serializer);\n<f64>::sse_encode(self.rolloff_factor, serializer);\n<f64>::sse_encode(self.cone_inner_angle, serializer);\n<f64>::sse_encode(self.cone_outer_angle, serializer);\n<f64>::sse_encode(self.cone_outer_gain, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::PanningModelType {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {web_audio_api::node::PanningModelType::EqualPower => { 0 }\nweb_audio_api::node::PanningModelType::HRTF => { 1 }\n _ => { unimplemented!(\"\"); }}, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::PeriodicWaveOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<Vec<f32>>>::sse_encode(self.real, serializer);\n<Option<Vec<f32>>>::sse_encode(self.imag, serializer);\n<bool>::sse_encode(self.disable_normalization, serializer);}\n                }\n                \n                impl SseEncode for ( AudioParam,AudioParamId,) {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {< AudioParam>::sse_encode(self.0, serializer);\n<AudioParamId>::sse_encode(self.1, serializer);}\n                }\n                \n                impl SseEncode for web_audio_api::node::StereoPannerOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<f32>::sse_encode(self.pan, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n                impl SseEncode for u8 {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self).unwrap();}\n                }\n                \n                impl SseEncode for () {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}\n                }\n                \n                impl SseEncode for usize {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();}\n                }\n                \n                impl SseEncode for web_audio_api::node::WaveShaperOptions {\n                    // Codec=Sse (Serialization based), see doc to use other codecs\n                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<Vec<f32>>>::sse_encode(self.curve, serializer);\n<web_audio_api::node::OverSampleType>::sse_encode(self.oversample, serializer);\n<web_audio_api::node::AudioNodeOptions>::sse_encode(self.audio_node_options, serializer);}\n                }\n                \n\n\n        \n        \n        #[cfg(not(target_family = \"wasm\"))]\n        mod io {\n            // This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n\n\n// Section: imports\n\nuse web_audio_api::worklet::*;\nuse web_audio_api::*;\nuse web_audio_api::node::*;\nuse crate::api::media_element::*;\nuse web_audio_api::media_streams::*;\nuse web_audio_api::media_devices::*;\nuse web_audio_api::media_recorder::*;\nuse web_audio_api::context::*;use web_audio_api::node::AudioNode;\nuse crate::api::override_web_audio_api::AudioParamExt;\nuse crate::api::override_web_audio_api::EventExt;\nuse web_audio_api::context::BaseAudioContext;\nuse crate::api::override_web_audio_api::AudioContextExt;\nuse crate::api::override_web_audio_api::OfflineAudioContextExt;\nuse crate::api::override_web_audio_api::MediaStreamExt;\nuse crate::api::override_web_audio_api::AnalyserNodeExt;\nuse web_audio_api::node::AudioScheduledSourceNode;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeExt;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::AudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::BiquadFilterNodeExt;\nuse crate::api::override_web_audio_api::ChannelMergerNodeExt;\nuse crate::api::override_web_audio_api::ChannelSplitterNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::ConvolverNodeExt;\nuse crate::api::override_web_audio_api::DelayNodeExt;\nuse crate::api::override_web_audio_api::DynamicsCompressorNodeExt;\nuse crate::api::override_web_audio_api::GainNodeExt;\nuse crate::api::override_web_audio_api::IIRFilterNodeExt;\nuse crate::api::override_web_audio_api::MediaElementAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamTrackAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::PannerNodeExt;\nuse crate::api::override_web_audio_api::ScriptProcessorNodeExt;\nuse crate::api::override_web_audio_api::StereoPannerNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeMiscExt;\nuse flutter_rust_bridge::{Handler, IntoIntoDart};\nuse flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};\nuse flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;\n\n// Section: boilerplate\n\nflutter_rust_bridge::frb_generated_boilerplate_io!();\n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[no_mangle]\n                pub extern \"C\" fn frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n        }\n        #[cfg(not(target_family = \"wasm\"))]\n        pub use io::*;\n        \n        \n        /// cbindgen:ignore\n        #[cfg(target_family = \"wasm\")]\n        mod web {\n            // This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n\n\n// Section: imports\n\nuse web_audio_api::worklet::*;\nuse web_audio_api::*;\nuse web_audio_api::node::*;\nuse crate::api::media_element::*;\nuse web_audio_api::media_streams::*;\nuse web_audio_api::media_devices::*;\nuse web_audio_api::media_recorder::*;\nuse web_audio_api::context::*;use web_audio_api::node::AudioNode;\nuse crate::api::override_web_audio_api::AudioParamExt;\nuse crate::api::override_web_audio_api::EventExt;\nuse web_audio_api::context::BaseAudioContext;\nuse crate::api::override_web_audio_api::AudioContextExt;\nuse crate::api::override_web_audio_api::OfflineAudioContextExt;\nuse crate::api::override_web_audio_api::MediaStreamExt;\nuse crate::api::override_web_audio_api::AnalyserNodeExt;\nuse web_audio_api::node::AudioScheduledSourceNode;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeExt;\nuse crate::api::override_web_audio_api::AudioBufferSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::AudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::BiquadFilterNodeExt;\nuse crate::api::override_web_audio_api::ChannelMergerNodeExt;\nuse crate::api::override_web_audio_api::ChannelSplitterNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeExt;\nuse crate::api::override_web_audio_api::ConstantSourceNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::ConvolverNodeExt;\nuse crate::api::override_web_audio_api::DelayNodeExt;\nuse crate::api::override_web_audio_api::DynamicsCompressorNodeExt;\nuse crate::api::override_web_audio_api::GainNodeExt;\nuse crate::api::override_web_audio_api::IIRFilterNodeExt;\nuse crate::api::override_web_audio_api::MediaElementAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioDestinationNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::MediaStreamTrackAudioSourceNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeExt;\nuse crate::api::override_web_audio_api::OscillatorNodeScheduledSourceNodeMiscExt;\nuse crate::api::override_web_audio_api::PannerNodeExt;\nuse crate::api::override_web_audio_api::ScriptProcessorNodeExt;\nuse crate::api::override_web_audio_api::StereoPannerNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeExt;\nuse crate::api::override_web_audio_api::WaveShaperNodeMiscExt;\nuse flutter_rust_bridge::{Handler, IntoIntoDart};\nuse flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};\nuse flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;\n                use flutter_rust_bridge::for_generated::wasm_bindgen;\n                use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;\n\n\n// Section: boilerplate\n\nflutter_rust_bridge::frb_generated_boilerplate_web!();\n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBuffer>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioContextRegistration>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamId>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioProcessingEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacity>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioRenderCapacityEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlobEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelConfig>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConcreteBaseAudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Event>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamConstraints>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MyMediaElement>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioCompletionEvent>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OfflineAudioContext>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PeriodicWave>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>::increment_strong_count(ptr as _);\n                }\n            \n\n                #[wasm_bindgen]\n                pub  fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr: *const std::ffi::c_void)  {\n                    MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>>::decrement_strong_count(ptr as _);\n                }\n            \n\n        }\n        #[cfg(target_family = \"wasm\")]\n        pub use web::*;\n        "