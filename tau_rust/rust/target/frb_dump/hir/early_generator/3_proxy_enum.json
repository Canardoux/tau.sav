{
  "hir_flat_pack": {
    "functions": [
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Alloc",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=silence, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Alloc",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=with_capacity, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=fft_size, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frequency_bin_count, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_byte_frequency_data, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_byte_time_domain_data, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_float_frequency_data, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_float_time_domain_data, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_ring_buffer_clone, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=max_decibels, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=min_decibels, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_decibels, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_fft_size, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_smoothing_time_constant, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Analyser",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=smoothing_time_constant, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AnalyserNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=fft_size, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" The size of the FFT used for frequency-domain analysis (in sample-frames)\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frequency_bin_count, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Number of bins in the FFT results, is half the FFT size\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_byte_frequency_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy the current frequency data scaled between min_decibels and\"], # [doc = \" max_decibels into the provided buffer\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_byte_time_domain_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy the current time domain data as u8 values into the provided buffer\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_float_frequency_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy the current frequency data into the provided buffer\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_float_time_domain_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy the current time domain data as f32 values into the provided buffer\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=max_decibels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Maximum power value in the scaling range for the FFT analysis data for\"], # [doc = \" conversion to unsigned byte values. The default value is -30.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=min_decibels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Minimum power value in the scaling range for the FFT analysis data for\"], # [doc = \" conversion to unsigned byte values. The default value is -100.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_fft_size, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set FFT size\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if fft_size is not a power of two or not in the range [32, 32768]\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_max_decibels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set max decibels\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if the value is set to a value less than or equal\"], # [doc = \" to min decibels.\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_min_decibels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set min decibels\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if the value is set to a value more than or equal\"], # [doc = \" to max decibels.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AnalyserNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_smoothing_time_constant, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set smoothing time constant\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if the value is set to a value less than 0 or more than 1.\"]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=smoothing_time_constant, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Time averaging parameter with the last analysis frame.\"], # [doc = \" A value from 0 -> 1 where 0 represents no time averaging with the last\"], # [doc = \" analysis frame. The default value is 0.8.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method may panic if the lock to the inner analyser is poisoned\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AnalyserNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AnalyserNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::analyser",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserRingBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserRingBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=read, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::analysis",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AnalyserRingBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=write, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF32",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=load, vis=Some(Visibility::Public(Pub)), attrs=[# [must_use]])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF32",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [must_use]])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF32",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=store, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF64",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=load, vis=Some(Visibility::Public(Pub)), attrs=[# [must_use]])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF64",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [must_use]])"
      },
      {
        "namespace": "web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AtomicF64",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=store, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=copy_from_channel, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy data from a given channel to the given `Vec`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if `channel_number` is greater or equal than\"], # [doc = \" `AudioBuffer::number_of_channels()`\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=copy_from_channel_with_offset, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy data from a given channel to the given `Vec` starting at `offset`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given channel number is greater than or equal to the given number of channels.\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=copy_to_channel, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy data from a given source to the given channel.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given channel number is greater than or equal to the given number of channels.\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=copy_to_channel_with_offset, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Copy data from a given source to the given channel starting at `offset`.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given channel number is greater than or equal to the given number of channels.\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=duration, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Duration in seconds of the `AudioBuffer`\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=from, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Convert raw samples to an AudioBuffer\"], # [doc = \"\"], # [doc = \" The outer Vec determine the channels. The inner Vecs should have the same length.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given sample rate is zero\"], # [doc = \" - the given number of channels defined by `samples.len()`is outside the\"], # [doc = \"   [1, 32] range, 32 being defined by the MAX_CHANNELS constant.\"], # [doc = \" - any of its items have different lengths\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_channel_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Return a read-only copy of the underlying data of the channel\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given channel number is greater than or equal to the given number of channels.\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_channel_data_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Return a mutable slice of the underlying data of the channel\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given channel number is greater than or equal to the given number of channels.\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=length, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Number of samples per channel in this `AudioBuffer`\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Allocate a silent audiobuffer with [`AudioBufferOptions`]\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if:\"], # [doc = \" - the given sample rate is zero\"], # [doc = \" - the given number of channels is outside the [1, 32] range,\"], # [doc = \" 32 being defined by the MAX_CHANNELS constant.\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_channels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Number of channels in this `AudioBuffer`\"]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBuffer",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sample_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Sample rate of this `AudioBuffer` in Hertz\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferRendererState",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=buffer, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Current buffer value (nullable)\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onended, vis=None, attrs=[# [doc = \" Unset the callback to run when the source node has stopped playing\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioBufferSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=detune, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" K-rate [`AudioParam`] that defines a pitch transposition of the file,\"], # [doc = \" expressed in cents\"], # [doc = \"\"], # [doc = \" see <https://en.wikipedia.org/wiki/Cent_(music)>\"], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=loop_, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Defines if the playback the [`AudioBuffer`] should be looped\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=loop_end, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Defines the loop end point, in the time reference of the [`AudioBuffer`]\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=loop_start, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Defines the loop start point, in the time reference of the [`AudioBuffer`]\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new [`AudioBufferSourceNode`] instance\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=playback_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" K-rate [`AudioParam`] that defines the speed at which the [`AudioBuffer`]\"], # [doc = \" will be played, e.g.:\"], # [doc = \" - `0.5` will play the file at half speed\"], # [doc = \" - `-1` will play the file in reverse\"], # [doc = \"\"], # [doc = \" Note that playback rate will also alter the pitch of the [`AudioBuffer`]\"], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Current playhead position in seconds within the [`AudioBuffer`].\"], # [doc = \"\"], # [doc = \" This value is updated at the end of each render quantum.\"], # [doc = \"\"], # [doc = \" Unofficial v2 API extension, not part of the spec yet.\"], # [doc = \" See also: <https://github.com/WebAudio/web-audio-api/issues/2397#issuecomment-709478405>\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_buffer, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Provide an [`AudioBuffer`] as the source of data to be played bask\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if a buffer has already been given to the source (though `new` or through\"], # [doc = \" `set_buffer`)\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_loop, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_loop_end, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_loop_start, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioBufferSourceNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioBufferSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onended, vis=None, attrs=[# [doc = \" Register callback to run when the source node has stopped playing\"], # [doc = \"\"], # [doc = \" For all [`AudioScheduledSourceNode`]s, the ended event is dispatched when the stop time\"], # [doc = \" determined by stop() is reached. For an\"], # [doc = \" [`AudioBufferSourceNode`](crate::node::AudioBufferSourceNode), the event is also dispatched\"], # [doc = \" because the duration has been reached or if the entire buffer has been played.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at_with_offset, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Start the playback at the given time and with a given offset\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already started\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at_with_offset_and_duration, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Start the playback at the given time, with a given offset, for a given duration\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already started\"]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioBufferSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioBufferSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioBufferSourceNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_buffer_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioBufferSourceOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=base, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=base_latency, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" This represents the number of seconds of processing latency incurred by\"], # [doc = \" the `AudioContext` passing the audio from the `AudioDestinationNode`\"], # [doc = \" to the audio subsystem.\"], # [allow (clippy :: unused_self)], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onsinkchange, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Unset the callback to run when the audio sink has changed\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onstatechange, vis=None, attrs=[# [doc = \" Unset the callback to run when the state of the AudioContext has changed\"]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=close, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Closes the `AudioContext`, releasing the system resources being used.\"], # [doc = \"\"], # [doc = \" This will not automatically release all `AudioContext`-created objects, but will suspend\"], # [doc = \" the progression of the currentTime, and stop processing audio data.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic when this function is called multiple times\"]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=close_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Closes the `AudioContext`, releasing the system resources being used.\"], # [doc = \"\"], # [doc = \" This will not automatically release all `AudioContext`-created objects, but will suspend\"], # [doc = \" the progression of the currentTime, and stop processing audio data.\"], # [doc = \"\"], # [doc = \" This function operates synchronously and blocks the current thread until the audio thread\"], # [doc = \" has stopped processing.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic when this function is called multiple times\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_analyser, vis=None, attrs=[# [doc = \" Creates a `AnalyserNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_audio_param, vis=None, attrs=[# [doc = \" Create an `AudioParam`.\"], # [doc = \"\"], # [doc = \" Call this inside the `register` closure when setting up your `AudioNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_biquad_filter, vis=None, attrs=[# [doc = \" Creates an `BiquadFilterNode` which implements a second order filter\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer, vis=None, attrs=[# [doc = \" Create an new \\\"in-memory\\\" `AudioBuffer` with the given number of channels,\"], # [doc = \" length (i.e. number of samples per channel) and sample rate.\"], # [doc = \"\"], # [doc = \" Note: In most cases you will want the sample rate to match the current\"], # [doc = \" audio context sample rate.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer_source, vis=None, attrs=[# [doc = \" Creates an `AudioBufferSourceNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_merger, vis=None, attrs=[# [doc = \" Creates a `ChannelMergerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_splitter, vis=None, attrs=[# [doc = \" Creates a `ChannelSplitterNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_constant_source, vis=None, attrs=[# [doc = \" Creates an `ConstantSourceNode`, a source representing a constant value\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_convolver, vis=None, attrs=[# [doc = \" Creates an `ConvolverNode`, a processing node which applies linear convolution\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_delay, vis=None, attrs=[# [doc = \" Creates a `DelayNode`, delaying the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_dynamics_compressor, vis=None, attrs=[# [doc = \" Creates a `DynamicsCompressorNode`, compressing the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_gain, vis=None, attrs=[# [doc = \" Creates an `GainNode`, to control audio volume\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_iir_filter, vis=None, attrs=[# [doc = \" Creates an `IirFilterNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `feedforward` - An array of the feedforward (numerator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [doc = \" * `feedback` - An array of the feedback (denominator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "AudioContextExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_create_media_element_source, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"create_media_element_source\")]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_media_stream_destination, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates a [`MediaStreamAudioDestinationNode`](node::MediaStreamAudioDestinationNode)\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_media_stream_source, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates a [`MediaStreamAudioSourceNode`](node::MediaStreamAudioSourceNode) from a\"], # [doc = \" [`MediaStream`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_media_stream_track_source, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates a [`MediaStreamTrackAudioSourceNode`](node::MediaStreamTrackAudioSourceNode) from a\"], # [doc = \" [`MediaStreamTrack`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_oscillator, vis=None, attrs=[# [doc = \" Creates an `OscillatorNode`, a source representing a periodic waveform.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_panner, vis=None, attrs=[# [doc = \" Creates a `PannerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_periodic_wave, vis=None, attrs=[# [doc = \" Creates a periodic wave\"], # [doc = \"\"], # [doc = \" Please note that this constructor deviates slightly from the spec by requiring a single\"], # [doc = \" argument with the periodic wave options.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_script_processor, vis=None, attrs=[# [doc = \" Creates an `ScriptProcessorNode` for custom audio processing (deprecated);\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - `buffer_size` is not 256, 512, 1024, 2048, 4096, 8192, or 16384\"], # [doc = \" - the number of input and output channels are both zero\"], # [doc = \" - either of the channel counts exceed [`crate::MAX_CHANNELS`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_stereo_panner, vis=None, attrs=[# [doc = \" Creates an `StereoPannerNode` to pan a stereo output\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_wave_shaper, vis=None, attrs=[# [doc = \" Creates a `WaveShaperNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=None, attrs=[# [doc = \" This is the time in seconds of the sample frame immediately following the last sample-frame\"], # [doc = \" in the block of audio most recently processed by the context’s rendering graph.\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "AudioContextExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_decode_audio_data_sync, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"decode_audio_data_sync\")]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=destination, vis=None, attrs=[# [doc = \" Returns an `AudioDestinationNode` representing the final destination of all audio in the\"], # [doc = \" context. It can be thought of as the audio-rendering device.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=listener, vis=None, attrs=[# [doc = \" Returns the `AudioListener` which is used for 3D spatialization\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates and returns a new `AudioContext` object.\"], # [doc = \"\"], # [doc = \" This will play live audio on the default output device.\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use web_audio_api::context::{AudioContext, AudioContextOptions};\"], # [doc = \"\"], # [doc = \" // Request a sample rate of 44.1 kHz and default latency (buffer size 128, if available)\"], # [doc = \" let opts = AudioContextOptions {\"], # [doc = \"     sample_rate: Some(44100.),\"], # [doc = \"     ..AudioContextOptions::default()\"], # [doc = \" };\"], # [doc = \"\"], # [doc = \" // Setup the audio context that will emit to your speakers\"], # [doc = \" let context = AudioContext::new(opts);\"], # [doc = \"\"], # [doc = \" // Alternatively, use the default constructor to get the best settings for your hardware\"], # [doc = \" // let context = AudioContext::default();\"], # [doc = \" ```\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" The `AudioContext` constructor will panic when an invalid `sinkId` is provided in the\"], # [doc = \" `AudioContextOptions`. In a future version, a `try_new` constructor will be introduced that\"], # [doc = \" never panics.\"], # [allow (clippy :: needless_pass_by_value)], # [must_use], # [frb (sync)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=output_latency, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" The estimation in seconds of audio output latency, i.e., the interval\"], # [doc = \" between the time the UA requests the host system to play a buffer and\"], # [doc = \" the time at which the first sample in the buffer is actually processed\"], # [doc = \" by the audio output device.\"], # [must_use], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render_capacity, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns an [`AudioRenderCapacity`] instance associated with an AudioContext.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=resume, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Resumes the progression of time in an audio context that has previously been\"], # [doc = \" suspended/paused.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * The audio device is not available\"], # [doc = \" * For a `BackendSpecificError`\"], # [allow (clippy :: await_holding_lock)], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=resume_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Resumes the progression of time in an audio context that has previously been\"], # [doc = \" suspended/paused.\"], # [doc = \"\"], # [doc = \" This function operates synchronously and blocks the current thread until the audio thread\"], # [doc = \" has started processing again.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * The audio device is not available\"], # [doc = \" * For a `BackendSpecificError`\"]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=run_diagnostics, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)], # [doc (hidden)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=sample_rate, vis=None, attrs=[# [doc = \" The sample rate (in sample-frames per second) at which the `AudioContext` handles audio.\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "AudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_state_change, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onsinkchange, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Register callback to run when the audio sink has changed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onstatechange, vis=None, attrs=[# [doc = \" Register callback to run when the state of the AudioContext has changed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "AudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_sink_id, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_sink_id_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Update the current audio output device.\"], # [doc = \"\"], # [doc = \" The provided `sink_id` string must match a device name `enumerate_devices_sync`.\"], # [doc = \"\"], # [doc = \" Supplying `\\\"none\\\"` for the `sink_id` will process the audio graph without playing through an\"], # [doc = \" audio output device.\"], # [doc = \"\"], # [doc = \" This function operates synchronously and might block the current thread. An async version\"], # [doc = \" is currently not implemented.\"], # [allow (clippy :: needless_collect , clippy :: missing_panics_doc)], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sink_id, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Identifier or the information of the current audio output device.\"], # [doc = \"\"], # [doc = \" The initial value is `\\\"\\\"`, which means the default audio output device.\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=state, vis=None, attrs=[# [doc = \" Returns state of current context\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=suspend, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Suspends the progression of time in the audio context.\"], # [doc = \"\"], # [doc = \" This will temporarily halt audio hardware access and reducing CPU/battery usage in the\"], # [doc = \" process.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * The audio device is not available\"], # [doc = \" * For a `BackendSpecificError`\"]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=suspend_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Suspends the progression of time in the audio context.\"], # [doc = \"\"], # [doc = \" This will temporarily halt audio hardware access and reducing CPU/battery usage in the\"], # [doc = \" process.\"], # [doc = \"\"], # [doc = \" This function operates synchronously and blocks the current thread until the audio thread\"], # [doc = \" has stopped processing.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * The audio device is not available\"], # [doc = \" * For a `BackendSpecificError`\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioContextExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_create_media_element_source, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"create_media_element_source\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioContextExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_decode_audio_data_sync, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"decode_audio_data_sync\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_state_change, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_sink_id, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContextLatencyCategory",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContextOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::context::online",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioContextRenderSizeCategory",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=max_channel_count, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" The maximum number of channels that the channelCount attribute can be set to (the max\"], # [doc = \" number of channels that the hardware is capable of supporting).\"], # [doc = \" <https://www.w3.org/TR/webaudio/#dom-audiodestinationnode-maxchannelcount>\"]])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=forward_x, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=forward_y, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=forward_z, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_x, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_y, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_z, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=up_x, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=up_y, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListener",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=up_z, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect, vis=None, attrs=[# [doc = \" Connect the output of this AudioNode to the input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=into_fields, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::spatial",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioListenerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=None, attrs=[# [doc = \" Config for up/down-mixing of input channels for this node.\"], # [doc = \"\"], # [doc = \" Only when implementing the [`AudioNode`] trait manually, this struct is of any concern.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=connect, vis=None, attrs=[# [doc = \" Connect the output of this AudioNode to the input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=None, attrs=[# [doc = \" The number of inputs feeding into the AudioNode. For source nodes, this will be 0.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=None, attrs=[# [doc = \" The number of outputs coming out of the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=None, attrs=[# [doc = \" Handle of the associated [`BaseAudioContext`](crate::context::BaseAudioContext).\"], # [doc = \"\"], # [doc = \" Only when implementing the AudioNode trait manually, this struct is of any concern.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::audio_node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioNodeOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=automation_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Current value of the automation rate of the AudioParam\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=cancel_and_hold_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Cancels all scheduled parameter changes with times greater than or equal\"], # [doc = \" to `cancel_time` and the automation value that would have happened at\"], # [doc = \" that time is then propagated for all future time.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if `cancel_time` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=cancel_scheduled_values, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Cancels all scheduled parameter changes with times greater than or equal\"], # [doc = \" to `cancel_time`.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if `cancel_time` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioParamExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default_value, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=exponential_ramp_to_value_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Schedules an exponential continuous change in parameter value from the\"], # [doc = \" previous scheduled parameter value to the given value.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \" - `value` is zero\"], # [doc = \" - `end_time` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=linear_ramp_to_value_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Schedules a linear continuous change in parameter value from the\"], # [doc = \" previous scheduled parameter value to the given value.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if `end_time` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=max_value, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=min_value, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_automation_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Update the current value of the automation rate of the AudioParam\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Some nodes have automation rate constraints and may panic when updating the value.\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioParamExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_target_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Start exponentially approaching the target value at the given time with\"], # [doc = \" a rate having the given time constant.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \" - `start_time` is negative\"], # [doc = \" - `time_constant` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_value, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the value of the `AudioParam`.\"], # [doc = \"\"], # [doc = \" Is equivalent to calling the `set_value_at_time` method with the current\"], # [doc = \" AudioContext's currentTime\"], # [frb (sync , setter)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_value_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Schedules a parameter value change at the given time.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if `start_time` is negative\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_value_curve_at_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Sets an array of arbitrary parameter values starting at the given time\"], # [doc = \" for the given duration.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \" - `value` length is less than 2\"], # [doc = \" - `start_time` is negative\"], # [doc = \" - `duration` is negative or equal to zero\"]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParam",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=value, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Retrieve the current value of the `AudioParam`.\"], # [frb (sync , getter)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::param",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParamEventTimeline",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioParamExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/AudioParamExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::render::processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioParamValues < 'a >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Get the computed values for the given [`crate::param::AudioParam`]\"], # [doc = \"\"], # [doc = \" For k-rate params or if the (a-rate) parameter is constant for this block, it will provide\"], # [doc = \" a slice of length 1. In other cases, i.e. a-rate param with scheduled automations it will\"], # [doc = \" provide a slice of length equal to the render quantum size (default: 128)\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::capacity",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderCapacity",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onupdate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Unset the EventHandler for [`AudioRenderCapacityEvent`].\"]])"
      },
      {
        "namespace": "web_audio_api::capacity",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderCapacity",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onupdate, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" The EventHandler for [`AudioRenderCapacityEvent`].\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::capacity",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderCapacity",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Start metric collection and analysis\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::capacity",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderCapacity",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Stop metric collection and analysis\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::capacity",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderCapacityOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_data, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Get the samples from this specific channel.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \" Panics if the index is greater than the available number of channels\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_data_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Get the samples (mutable) from this specific channel.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \" Panics if the index is greater than the available number of channels\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Channel data as slice\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channels_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Channel data as slice (mutable)\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=is_silent, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" `O(1)` check if this buffer is equal to the 'silence buffer'\"], # [doc = \"\"], # [doc = \" If this function returns false, it is still possible for all samples to be zero.\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=make_silent, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Convert this buffer to silence\"], # [doc = \"\"], # [doc = \" `O(1)` operation to convert this buffer to the 'silence buffer' which will enable some\"], # [doc = \" optimizations in the graph rendering.\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_channels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Number of channels in this AudioRenderQuantum\"]])"
      },
      {
        "namespace": "web_audio_api::render::quantum",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioRenderQuantum",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_number_of_channels, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set number of channels in this AudioRenderQuantum\"], # [doc = \"\"], # [doc = \" Note: if the new number is higher than the previous, the new channels will be filled with\"], # [doc = \" garbage.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if the given number of channels is outside the [1, 32] range, 32\"], # [doc = \" being defined by the MAX_CHANNELS constant.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onended, vis=None, attrs=[# [doc = \" Unset the callback to run when the source node has stopped playing\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onended, vis=None, attrs=[# [doc = \" Register callback to run when the source node has stopped playing\"], # [doc = \"\"], # [doc = \" For all [`AudioScheduledSourceNode`]s, the ended event is dispatched when the stop time\"], # [doc = \" determined by stop() is reached. For an\"], # [doc = \" [`AudioBufferSourceNode`](crate::node::AudioBufferSourceNode), the event is also dispatched\"], # [doc = \" because the duration has been reached or if the entire buffer has been played.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=None, attrs=[# [doc = \" Play immediately\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already started\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at, vis=None, attrs=[# [doc = \" Schedule playback start at given timestamp\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already started\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=None, attrs=[# [doc = \" Stop immediately\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already stopped\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::node/AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop_at, vis=None, attrs=[# [doc = \" Schedule playback stop at given timestamp\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the source was already stopped\"]])"
      },
      {
        "namespace": "web_audio_api::render::processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletGlobalScope",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=post_message, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Send a message to the corresponding AudioWorkletNode of this processor\"], # [doc = \"\"], # [doc = \" This method is just a shim of the full\"], # [doc = \" [`MessagePort`](https://webaudio.github.io/web-audio-api/#dom-audioworkletprocessor-port)\"], # [doc = \" `postMessage` functionality of the AudioWorkletProcessor.\"]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect, vis=None, attrs=[# [doc = \" Connect the output of this AudioNode to the input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Construct a new AudioWorkletNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics when\"], # [doc = \" - the number of inputs and the number of outputs of the supplied options are both equal to\"], # [doc = \" zero.\"], # [doc = \" - any of the output channel counts is equal to zero or larger than 32 ([`MAX_CHANNELS`])\"]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=parameters, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Collection of AudioParam objects with associated names of this node\"], # [doc = \"\"], # [doc = \" This map is populated from a list of [`AudioParamDescriptor`]s in the\"], # [doc = \" [`AudioWorkletProcessor`] class constructor at the instantiation.\"]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=port, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Message port to the processor in the render thread\"], # [doc = \"\"], # [doc = \" Every AudioWorkletNode has an associated port which is the [`MessagePort`]. It is connected\"], # [doc = \" to the port on the corresponding [`AudioWorkletProcessor`] object allowing bidirectional\"], # [doc = \" communication between the AudioWorkletNode and its AudioWorkletProcessor.\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "AudioWorkletNodeOptions < C >",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::worklet/AudioWorkletProcessor"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=constructor, vis=None, attrs=[# [doc = \" Constructor of the [`AudioWorkletProcessor`] instance (to be executed in the render thread)\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::worklet/AudioWorkletProcessor"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=onmessage, vis=None, attrs=[# [doc = \" Handle incoming messages from the linked AudioNode\"], # [doc = \"\"], # [doc = \" By overriding this method you can add a handler for messages sent from the control thread\"], # [doc = \" via the AudioWorkletNode MessagePort.\"], # [doc = \"\"], # [doc = \" Receivers are supposed to consume the content of `msg`. The content of `msg` might\"], # [doc = \" also be replaced by cruft that needs to be deallocated outside of the render thread\"], # [doc = \" afterwards, e.g. when replacing an internal buffer.\"], # [doc = \"\"], # [doc = \" This method is just a shim of the full\"], # [doc = \" [`MessagePort`](https://webaudio.github.io/web-audio-api/#dom-audioworkletprocessor-port)\"], # [doc = \" `onmessage` functionality of the AudioWorkletProcessor.\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::worklet/AudioWorkletProcessor"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=parameter_descriptors, vis=None, attrs=[# [doc = \" List of [`AudioParam`]s for this audio processor\"], # [doc = \"\"], # [doc = \" A default implementation is provided that supplies no parameters.\"]])"
      },
      {
        "namespace": "web_audio_api::worklet",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::worklet/AudioWorkletProcessor"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=process, vis=None, attrs=[# [doc = \" Audio processing function\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" - inputs: readonly array of input buffers\"], # [doc = \" - outputs: array of output buffers\"], # [doc = \" - params: available [`AudioParam`] values for this processor\"], # [doc = \" - scope: AudioWorkletGlobalScope object with current frame, timestamp, sample rate\"], # [doc = \"\"], # [doc = \" # Return value\"], # [doc = \"\"], # [doc = \" The return value (bool) of this callback controls the lifetime of the processor.\"], # [doc = \"\"], # [doc = \" - return `false` when the node only transforms their inputs, and as such can be removed when\"], # [doc = \" the inputs are disconnected (e.g. GainNode)\"], # [doc = \" - return `true` for some time when the node still outputs after the inputs are disconnected\"], # [doc = \" (e.g. DelayNode)\"], # [doc = \" - return `true` as long as this node is a source of output (e.g. OscillatorNode)\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=base, vis=None, attrs=[# [doc = \" Returns the [`BaseAudioContext`] concrete type associated with this `AudioContext`\"], # [doc (hidden)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onstatechange, vis=None, attrs=[# [doc = \" Unset the callback to run when the state of the AudioContext has changed\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_analyser, vis=None, attrs=[# [doc = \" Creates a `AnalyserNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_audio_param, vis=None, attrs=[# [doc = \" Create an `AudioParam`.\"], # [doc = \"\"], # [doc = \" Call this inside the `register` closure when setting up your `AudioNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_biquad_filter, vis=None, attrs=[# [doc = \" Creates an `BiquadFilterNode` which implements a second order filter\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer, vis=None, attrs=[# [doc = \" Create an new \\\"in-memory\\\" `AudioBuffer` with the given number of channels,\"], # [doc = \" length (i.e. number of samples per channel) and sample rate.\"], # [doc = \"\"], # [doc = \" Note: In most cases you will want the sample rate to match the current\"], # [doc = \" audio context sample rate.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer_source, vis=None, attrs=[# [doc = \" Creates an `AudioBufferSourceNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_merger, vis=None, attrs=[# [doc = \" Creates a `ChannelMergerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_splitter, vis=None, attrs=[# [doc = \" Creates a `ChannelSplitterNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_constant_source, vis=None, attrs=[# [doc = \" Creates an `ConstantSourceNode`, a source representing a constant value\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_convolver, vis=None, attrs=[# [doc = \" Creates an `ConvolverNode`, a processing node which applies linear convolution\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_delay, vis=None, attrs=[# [doc = \" Creates a `DelayNode`, delaying the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_dynamics_compressor, vis=None, attrs=[# [doc = \" Creates a `DynamicsCompressorNode`, compressing the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_gain, vis=None, attrs=[# [doc = \" Creates an `GainNode`, to control audio volume\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_iir_filter, vis=None, attrs=[# [doc = \" Creates an `IirFilterNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `feedforward` - An array of the feedforward (numerator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [doc = \" * `feedback` - An array of the feedback (denominator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_oscillator, vis=None, attrs=[# [doc = \" Creates an `OscillatorNode`, a source representing a periodic waveform.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_panner, vis=None, attrs=[# [doc = \" Creates a `PannerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_periodic_wave, vis=None, attrs=[# [doc = \" Creates a periodic wave\"], # [doc = \"\"], # [doc = \" Please note that this constructor deviates slightly from the spec by requiring a single\"], # [doc = \" argument with the periodic wave options.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_script_processor, vis=None, attrs=[# [doc = \" Creates an `ScriptProcessorNode` for custom audio processing (deprecated);\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - `buffer_size` is not 256, 512, 1024, 2048, 4096, 8192, or 16384\"], # [doc = \" - the number of input and output channels are both zero\"], # [doc = \" - either of the channel counts exceed [`crate::MAX_CHANNELS`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_stereo_panner, vis=None, attrs=[# [doc = \" Creates an `StereoPannerNode` to pan a stereo output\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=create_wave_shaper, vis=None, attrs=[# [doc = \" Creates a `WaveShaperNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=None, attrs=[# [doc = \" This is the time in seconds of the sample frame immediately following the last sample-frame\"], # [doc = \" in the block of audio most recently processed by the context’s rendering graph.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=decode_audio_data_sync, vis=None, attrs=[# [doc = \" Decode an [`AudioBuffer`] from a given input stream.\"], # [doc = \"\"], # [doc = \" The current implementation can decode FLAC, Opus, PCM, Vorbis, and Wav.\"], # [doc = \"\"], # [doc = \" In addition to the official spec, the input parameter can be any byte stream (not just an\"], # [doc = \" array). This means you can decode audio data from a file, network stream, or in memory\"], # [doc = \" buffer, and any other [`std::io::Read`] implementer. The data if buffered internally so you\"], # [doc = \" should not wrap the source in a `BufReader`.\"], # [doc = \"\"], # [doc = \" This function operates synchronously, which may be undesirable on the control thread. The\"], # [doc = \" example shows how to avoid this. An async version is currently not implemented.\"], # [doc = \"\"], # [doc = \" # Errors\"], # [doc = \"\"], # [doc = \" This method returns an Error in various cases (IO, mime sniffing, decoding).\"], # [doc = \"\"], # [doc = \" # Usage\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use std::io::Cursor;\"], # [doc = \" use web_audio_api::context::{BaseAudioContext, OfflineAudioContext};\"], # [doc = \"\"], # [doc = \" let input = Cursor::new(vec![0; 32]); // or a File, TcpStream, ...\"], # [doc = \"\"], # [doc = \" let context = OfflineAudioContext::new(2, 44_100, 44_100.);\"], # [doc = \" let handle = std::thread::spawn(move || context.decode_audio_data_sync(input));\"], # [doc = \"\"], # [doc = \" // do other things\"], # [doc = \"\"], # [doc = \" // await result from the decoder thread\"], # [doc = \" let decode_buffer_result = handle.join();\"], # [doc = \" ```\"], # [doc = \"\"], # [doc = \" # Examples\"], # [doc = \"\"], # [doc = \" The following example shows how to use a thread pool for audio buffer decoding:\"], # [doc = \"\"], # [doc = \" `cargo run --release --example decode_multithreaded`\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=destination, vis=None, attrs=[# [doc = \" Returns an `AudioDestinationNode` representing the final destination of all audio in the\"], # [doc = \" context. It can be thought of as the audio-rendering device.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=listener, vis=None, attrs=[# [doc = \" Returns the `AudioListener` which is used for 3D spatialization\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sample_rate, vis=None, attrs=[# [doc = \" The sample rate (in sample-frames per second) at which the `AudioContext` handles audio.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onstatechange, vis=None, attrs=[# [doc = \" Register callback to run when the state of the AudioContext has changed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "TraitDef": {
            "trait_def_name": "web_audio_api::context/BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=state, vis=None, attrs=[# [doc = \" Returns state of current context\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "BiquadFilterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=detune, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the detune audio parameter\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frequency, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the frequency audio parameter\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=gain, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the gain audio parameter\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_frequency_response, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the frequency response for the specified frequencies\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `frequency_hz` - frequencies for which frequency response of the filter should be calculated\"], # [doc = \" * `mag_response` - magnitude of the frequency response of the filter\"], # [doc = \" * `phase_response` - phase of the frequency response of the filter\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if arguments' lengths don't match\"], # [doc = \"\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" returns a `BiquadFilterNode` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `context` - audio context in which the audio node will live.\"], # [doc = \" * `options` - biquad filter options\"]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=q, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the Q audio parameter\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "BiquadFilterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_type, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" biquad filter type setter\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `type_` - the biquad filter type (lowpass, highpass,...)\"]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=type_, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the biquad filter type\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/BiquadFilterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/BiquadFilterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "BiquadFilterType",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::audio_node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelConfig",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=as_mut_slice, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=as_slice, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=from, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=is_empty, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (dead_code)]])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=len, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::buffer",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelData",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "ChannelMergerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "ChannelMergerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ChannelMergerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ChannelMergerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::channel_merger",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelMergerOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "ChannelSplitterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "ChannelSplitterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ChannelSplitterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ChannelSplitterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::channel_splitter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ChannelSplitterOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::biquad_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Coefficients",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::context::concrete_base",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=base, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onstatechange, vis=None, attrs=[# [doc = \" Unset the callback to run when the state of the AudioContext has changed\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_analyser, vis=None, attrs=[# [doc = \" Creates a `AnalyserNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_audio_param, vis=None, attrs=[# [doc = \" Create an `AudioParam`.\"], # [doc = \"\"], # [doc = \" Call this inside the `register` closure when setting up your `AudioNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_biquad_filter, vis=None, attrs=[# [doc = \" Creates an `BiquadFilterNode` which implements a second order filter\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer, vis=None, attrs=[# [doc = \" Create an new \\\"in-memory\\\" `AudioBuffer` with the given number of channels,\"], # [doc = \" length (i.e. number of samples per channel) and sample rate.\"], # [doc = \"\"], # [doc = \" Note: In most cases you will want the sample rate to match the current\"], # [doc = \" audio context sample rate.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer_source, vis=None, attrs=[# [doc = \" Creates an `AudioBufferSourceNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_merger, vis=None, attrs=[# [doc = \" Creates a `ChannelMergerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_splitter, vis=None, attrs=[# [doc = \" Creates a `ChannelSplitterNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_constant_source, vis=None, attrs=[# [doc = \" Creates an `ConstantSourceNode`, a source representing a constant value\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_convolver, vis=None, attrs=[# [doc = \" Creates an `ConvolverNode`, a processing node which applies linear convolution\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_delay, vis=None, attrs=[# [doc = \" Creates a `DelayNode`, delaying the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_dynamics_compressor, vis=None, attrs=[# [doc = \" Creates a `DynamicsCompressorNode`, compressing the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_gain, vis=None, attrs=[# [doc = \" Creates an `GainNode`, to control audio volume\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_iir_filter, vis=None, attrs=[# [doc = \" Creates an `IirFilterNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `feedforward` - An array of the feedforward (numerator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [doc = \" * `feedback` - An array of the feedback (denominator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_oscillator, vis=None, attrs=[# [doc = \" Creates an `OscillatorNode`, a source representing a periodic waveform.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_panner, vis=None, attrs=[# [doc = \" Creates a `PannerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_periodic_wave, vis=None, attrs=[# [doc = \" Creates a periodic wave\"], # [doc = \"\"], # [doc = \" Please note that this constructor deviates slightly from the spec by requiring a single\"], # [doc = \" argument with the periodic wave options.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_script_processor, vis=None, attrs=[# [doc = \" Creates an `ScriptProcessorNode` for custom audio processing (deprecated);\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - `buffer_size` is not 256, 512, 1024, 2048, 4096, 8192, or 16384\"], # [doc = \" - the number of input and output channels are both zero\"], # [doc = \" - either of the channel counts exceed [`crate::MAX_CHANNELS`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_stereo_panner, vis=None, attrs=[# [doc = \" Creates an `StereoPannerNode` to pan a stereo output\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_wave_shaper, vis=None, attrs=[# [doc = \" Creates a `WaveShaperNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=None, attrs=[# [doc = \" This is the time in seconds of the sample frame immediately following the last sample-frame\"], # [doc = \" in the block of audio most recently processed by the context’s rendering graph.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=decode_audio_data_sync, vis=None, attrs=[# [doc = \" Decode an [`AudioBuffer`] from a given input stream.\"], # [doc = \"\"], # [doc = \" The current implementation can decode FLAC, Opus, PCM, Vorbis, and Wav.\"], # [doc = \"\"], # [doc = \" In addition to the official spec, the input parameter can be any byte stream (not just an\"], # [doc = \" array). This means you can decode audio data from a file, network stream, or in memory\"], # [doc = \" buffer, and any other [`std::io::Read`] implementer. The data if buffered internally so you\"], # [doc = \" should not wrap the source in a `BufReader`.\"], # [doc = \"\"], # [doc = \" This function operates synchronously, which may be undesirable on the control thread. The\"], # [doc = \" example shows how to avoid this. An async version is currently not implemented.\"], # [doc = \"\"], # [doc = \" # Errors\"], # [doc = \"\"], # [doc = \" This method returns an Error in various cases (IO, mime sniffing, decoding).\"], # [doc = \"\"], # [doc = \" # Usage\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use std::io::Cursor;\"], # [doc = \" use web_audio_api::context::{BaseAudioContext, OfflineAudioContext};\"], # [doc = \"\"], # [doc = \" let input = Cursor::new(vec![0; 32]); // or a File, TcpStream, ...\"], # [doc = \"\"], # [doc = \" let context = OfflineAudioContext::new(2, 44_100, 44_100.);\"], # [doc = \" let handle = std::thread::spawn(move || context.decode_audio_data_sync(input));\"], # [doc = \"\"], # [doc = \" // do other things\"], # [doc = \"\"], # [doc = \" // await result from the decoder thread\"], # [doc = \" let decode_buffer_result = handle.join();\"], # [doc = \" ```\"], # [doc = \"\"], # [doc = \" # Examples\"], # [doc = \"\"], # [doc = \" The following example shows how to use a thread pool for audio buffer decoding:\"], # [doc = \"\"], # [doc = \" `cargo run --release --example decode_multithreaded`\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=destination, vis=None, attrs=[# [doc = \" Returns an `AudioDestinationNode` representing the final destination of all audio in the\"], # [doc = \" context. It can be thought of as the audio-rendering device.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=listener, vis=None, attrs=[# [doc = \" Returns the `AudioListener` which is used for 3D spatialization\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::concrete_base",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=mark_cycle_breaker, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Inform render thread that this node can act as a cycle breaker\"], # [doc (hidden)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=sample_rate, vis=None, attrs=[# [doc = \" The sample rate (in sample-frames per second) at which the `AudioContext` handles audio.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onstatechange, vis=None, attrs=[# [doc = \" Register callback to run when the state of the AudioContext has changed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConcreteBaseAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=state, vis=None, attrs=[# [doc = \" Returns state of current context\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onended, vis=None, attrs=[# [doc = \" Unset the callback to run when the source node has stopped playing\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "ConstantSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=offset, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "ConstantSourceNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "ConstantSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onended, vis=None, attrs=[# [doc = \" Register callback to run when the source node has stopped playing\"], # [doc = \"\"], # [doc = \" For all [`AudioScheduledSourceNode`]s, the ended event is dispatched when the stop time\"], # [doc = \" determined by stop() is reached. For an\"], # [doc = \" [`AudioBufferSourceNode`](crate::node::AudioBufferSourceNode), the event is also dispatched\"], # [doc = \" because the duration has been reached or if the entire buffer has been played.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ConstantSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ConstantSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ConstantSourceNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::constant_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConstantSourceOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=buffer, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Get the current impulse response buffer\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "ConvolverNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" returns a `ConvolverNode` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `context` - audio context in which the audio node will live.\"], # [doc = \" * `options` - convolver options\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics when an AudioBuffer is provided via the `ConvolverOptions` with a sample rate\"], # [doc = \" different from the audio context sample rate.\"]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=normalize, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Denotes if the response buffer will be scaled with an equal-power normalization\"]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_buffer, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set or update the impulse response buffer\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics when the sample rate of the provided AudioBuffer differs from the audio context\"], # [doc = \" sample rate.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_normalize, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Update the `normalize` setting. This will only have an effect when `set_buffer` is called.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "ConvolverNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ConvolverNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ConvolverNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::convolver",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ConvolverOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "DelayNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=delay_time, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" A-rate [`AudioParam`] representing the amount of delay (in seconds) to apply.\"], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=Some(Visibility::Inherited), attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new DelayNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics when the max delay value is smaller than zero or langer than three minutes.\"]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "DelayNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/DelayNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/DelayNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DelayOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DistanceModelType",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=attack, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "DynamicsCompressorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=knee, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=ratio, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=reduction, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=release, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "DynamicsCompressorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=threshold, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/DynamicsCompressorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/DynamicsCompressorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::dynamics_compressor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "DynamicsCompressorOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Event",
            "trait_def_name": "EventExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=type_, vis=Some(Visibility::Inherited), attrs=[# [frb (sync , getter)]])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=audio_processing, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=complete, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=diagnostics, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=ended, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=message, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=processor_error, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render_capacity, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sink_change, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventDispatch",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=state_change, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/EventExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=type_, vis=None, attrs=[# [frb (sync , getter)], # [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventLoop",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_handler, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventLoop",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=handle_pending_events, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventLoop",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventLoop",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=run_in_thread, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::events",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "EventLoop",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_handler, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "GainNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=gain, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "GainNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/GainNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/GainNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::gain",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "GainOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=add_edge, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=add_node, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=before_drop, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=is_active, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Check if the graph is fully initialized and can start rendering\"]])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=mark_control_handle_dropped, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=mark_cycle_breaker, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=remove_edge, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Render a single audio quantum by traversing the node list\"]])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=route_message, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Graph",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "IIRFilterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_frequency_response, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the frequency response for the specified frequencies\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" - `frequency_hz` - frequencies for which frequency response of the filter should be calculated\"], # [doc = \" - `mag_response` - magnitude of the frequency response of the filter\"], # [doc = \" - `phase_response` - phase of the frequency response of the filter\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic if arguments' lengths don't match\"], # [doc = \"\"], # [frb (ignore)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates an `IirFilterNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" - `context` - Audio context in which the node will live\"], # [doc = \" - `options` - node options\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - coefs length is 0 and greater than 20\"], # [doc = \" - feedforward coefs are all zeros\"], # [doc = \" - feedback first coef is zero\"], # [doc = \"\"]])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::iir_filter",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "IIRFilterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "IIRFilterNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/IIRFilterNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/IIRFilterNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::decoding",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaDecoder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=try_new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Try to construct a new instance from a `Read` implementer\"], # [doc = \"\"], # [doc = \" # Errors\"], # [doc = \"\"], # [doc = \" This method returns an Error in various cases (IO, mime sniffing, decoding).\"]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaDeviceInfo",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=device_id, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Identifier for the represented device\"], # [doc = \"\"], # [doc = \" The current implementation is not stable across sessions so you should not persist this\"], # [doc = \" value\"]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaDeviceInfo",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=group_id, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Two devices have the same group identifier if they belong to the same physical device\"]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaDeviceInfo",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=kind, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Enumerated value that is either \\\"videoinput\\\", \\\"audioinput\\\" or \\\"audiooutput\\\".\"]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaDeviceInfo",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=label, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Friendly label describing this device\"]])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=loop_, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new instance for a given file path\"]])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=pause, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=paused, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=play, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=playback_rate, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_current_time, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_loop, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_playback_rate, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_element_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "MediaElementAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_element_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new `MediaElementAudioSourceNode`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method will panic when there already exists a source node for the given\"], # [doc = \" `MediaElement`. You can only set up a single source node per element!\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_element_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_element_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_element_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "MediaElementAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaElementAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaElementAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaElementAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::decoding",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaInput < R >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_ondataavailable, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onerror, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onstop, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates a new `MediaRecorder` object, given a [`MediaStream`] to record.\"], # [doc = \"\"], # [doc = \" Only supports WAV file format currently.\"]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_ondataavailable, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onerror, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onstop, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Begin recording media\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic when the recorder has already started\"]])"
      },
      {
        "namespace": "web_audio_api::media_recorder",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaRecorder",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_streams",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStream",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=from_tracks, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStream",
            "trait_def_name": "MediaStreamExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_get_tracks, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"get_tracks\")]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "MediaStreamAudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new MediaStreamAudioDestinationNode\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "MediaStreamAudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_destination",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioDestinationNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stream, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" A [`MediaStream`] producing audio buffers with the same number of channels as the node\"], # [doc = \" itself\"], # [frb (proxy)], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamAudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamAudioDestinationNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "MediaStreamAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Create a new `MediaStreamAudioSourceNode`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This method will panic when the provided `MediaStream` does not contain any audio tracks.\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "MediaStreamAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_get_tracks, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"get_tracks\")]])"
      },
      {
        "namespace": "web_audio_api::media_streams",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrack",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=close, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::media_streams",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrack",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=from_iter, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: should_implement_trait)]])"
      },
      {
        "namespace": "web_audio_api::media_streams",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrack",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=iter, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::media_streams",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrack",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=ready_state, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_track_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "MediaStreamTrackAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_track_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_track_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_track_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::media_stream_track_source",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "MediaStreamTrackAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaStreamTrackAudioSourceNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamTrackAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/MediaStreamTrackAudioSourceNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MediaTrackConstraints",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::message_port",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MessagePort < 'a >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onmessage, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Unset the callback to run when a message arrives on the channel.\"]])"
      },
      {
        "namespace": "web_audio_api::message_port",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MessagePort < 'a >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=post_message, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Send a message from the port.\"]])"
      },
      {
        "namespace": "web_audio_api::message_port",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MessagePort < 'a >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onmessage, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Register callback to run when a message arrives on the channel.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::io::microphone",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MicrophoneRender",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::io::microphone",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MicrophoneRender",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=loop_, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (sync)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=pause, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=paused, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=play, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=playback_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_current_time, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_loop, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "crate::api::media_element",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "MyMediaElement",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_playback_rate, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::graph",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Node",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_buffer, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Get the current buffer for AudioParam values\"]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=contains, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_unchecked, vis=Some(Visibility::Public(Pub)), attrs=[# [track_caller], # [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_unchecked_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [track_caller], # [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=insert, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=is_empty, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=iter_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=keys, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=remove, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::render::node_collection",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "NodeCollection",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=values_mut, vis=Some(Visibility::Public(Pub)), attrs=[# [inline (always)]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=base, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_oncomplete, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Unset the callback to run when the rendering has completed\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onstatechange, vis=None, attrs=[# [doc = \" Unset the callback to run when the state of the AudioContext has changed\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_analyser, vis=None, attrs=[# [doc = \" Creates a `AnalyserNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_audio_param, vis=None, attrs=[# [doc = \" Create an `AudioParam`.\"], # [doc = \"\"], # [doc = \" Call this inside the `register` closure when setting up your `AudioNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_biquad_filter, vis=None, attrs=[# [doc = \" Creates an `BiquadFilterNode` which implements a second order filter\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer, vis=None, attrs=[# [doc = \" Create an new \\\"in-memory\\\" `AudioBuffer` with the given number of channels,\"], # [doc = \" length (i.e. number of samples per channel) and sample rate.\"], # [doc = \"\"], # [doc = \" Note: In most cases you will want the sample rate to match the current\"], # [doc = \" audio context sample rate.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_buffer_source, vis=None, attrs=[# [doc = \" Creates an `AudioBufferSourceNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_merger, vis=None, attrs=[# [doc = \" Creates a `ChannelMergerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_channel_splitter, vis=None, attrs=[# [doc = \" Creates a `ChannelSplitterNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_constant_source, vis=None, attrs=[# [doc = \" Creates an `ConstantSourceNode`, a source representing a constant value\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_convolver, vis=None, attrs=[# [doc = \" Creates an `ConvolverNode`, a processing node which applies linear convolution\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_delay, vis=None, attrs=[# [doc = \" Creates a `DelayNode`, delaying the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_dynamics_compressor, vis=None, attrs=[# [doc = \" Creates a `DynamicsCompressorNode`, compressing the audio signal\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_gain, vis=None, attrs=[# [doc = \" Creates an `GainNode`, to control audio volume\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_iir_filter, vis=None, attrs=[# [doc = \" Creates an `IirFilterNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `feedforward` - An array of the feedforward (numerator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [doc = \" * `feedback` - An array of the feedback (denominator) coefficients for the transfer function of the IIR filter.\"], # [doc = \" The maximum length of this array is 20\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_oscillator, vis=None, attrs=[# [doc = \" Creates an `OscillatorNode`, a source representing a periodic waveform.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_panner, vis=None, attrs=[# [doc = \" Creates a `PannerNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_periodic_wave, vis=None, attrs=[# [doc = \" Creates a periodic wave\"], # [doc = \"\"], # [doc = \" Please note that this constructor deviates slightly from the spec by requiring a single\"], # [doc = \" argument with the periodic wave options.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_script_processor, vis=None, attrs=[# [doc = \" Creates an `ScriptProcessorNode` for custom audio processing (deprecated);\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - `buffer_size` is not 256, 512, 1024, 2048, 4096, 8192, or 16384\"], # [doc = \" - the number of input and output channels are both zero\"], # [doc = \" - either of the channel counts exceed [`crate::MAX_CHANNELS`]\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_stereo_panner, vis=None, attrs=[# [doc = \" Creates an `StereoPannerNode` to pan a stereo output\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=create_wave_shaper, vis=None, attrs=[# [doc = \" Creates a `WaveShaperNode`\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=current_time, vis=None, attrs=[# [doc = \" This is the time in seconds of the sample frame immediately following the last sample-frame\"], # [doc = \" in the block of audio most recently processed by the context’s rendering graph.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=decode_audio_data_sync, vis=None, attrs=[# [doc = \" Decode an [`AudioBuffer`] from a given input stream.\"], # [doc = \"\"], # [doc = \" The current implementation can decode FLAC, Opus, PCM, Vorbis, and Wav.\"], # [doc = \"\"], # [doc = \" In addition to the official spec, the input parameter can be any byte stream (not just an\"], # [doc = \" array). This means you can decode audio data from a file, network stream, or in memory\"], # [doc = \" buffer, and any other [`std::io::Read`] implementer. The data if buffered internally so you\"], # [doc = \" should not wrap the source in a `BufReader`.\"], # [doc = \"\"], # [doc = \" This function operates synchronously, which may be undesirable on the control thread. The\"], # [doc = \" example shows how to avoid this. An async version is currently not implemented.\"], # [doc = \"\"], # [doc = \" # Errors\"], # [doc = \"\"], # [doc = \" This method returns an Error in various cases (IO, mime sniffing, decoding).\"], # [doc = \"\"], # [doc = \" # Usage\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use std::io::Cursor;\"], # [doc = \" use web_audio_api::context::{BaseAudioContext, OfflineAudioContext};\"], # [doc = \"\"], # [doc = \" let input = Cursor::new(vec![0; 32]); // or a File, TcpStream, ...\"], # [doc = \"\"], # [doc = \" let context = OfflineAudioContext::new(2, 44_100, 44_100.);\"], # [doc = \" let handle = std::thread::spawn(move || context.decode_audio_data_sync(input));\"], # [doc = \"\"], # [doc = \" // do other things\"], # [doc = \"\"], # [doc = \" // await result from the decoder thread\"], # [doc = \" let decode_buffer_result = handle.join();\"], # [doc = \" ```\"], # [doc = \"\"], # [doc = \" # Examples\"], # [doc = \"\"], # [doc = \" The following example shows how to use a thread pool for audio buffer decoding:\"], # [doc = \"\"], # [doc = \" `cargo run --release --example decode_multithreaded`\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=destination, vis=None, attrs=[# [doc = \" Returns an `AudioDestinationNode` representing the final destination of all audio in the\"], # [doc = \" context. It can be thought of as the audio-rendering device.\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=length, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" get the length of rendering audio buffer\"], # [allow (clippy :: missing_const_for_fn , clippy :: unused_self)], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=listener, vis=None, attrs=[# [doc = \" Returns the `AudioListener` which is used for 3D spatialization\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates an `OfflineAudioContext` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `channels` - number of output channels to render\"], # [doc = \" * `length` - length of the rendering audio buffer\"], # [doc = \" * `sample_rate` - output sample rate\"], # [must_use], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=resume, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Resumes the progression of the OfflineAudioContext's currentTime when it has been suspended\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics when the context is closed or rendering has not started\"]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=sample_rate, vis=None, attrs=[# [doc = \" The sample rate (in sample-frames per second) at which the `AudioContext` handles audio.\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "OfflineAudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_complete, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_oncomplete, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Register callback to run when the rendering has completed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onstatechange, vis=None, attrs=[# [doc = \" Register callback to run when the state of the AudioContext has changed\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_rendering, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Given the current connections and scheduled changes, starts rendering audio.\"], # [doc = \"\"], # [doc = \" Rendering is purely CPU bound and contains no `await` points, so calling this method will\"], # [doc = \" block the executor until completion or until the context is suspended.\"], # [doc = \"\"], # [doc = \" This method will only adhere to scheduled suspensions via [`Self::suspend`] and will\"], # [doc = \" ignore those provided via [`Self::suspend_sync`].\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if this method is called multiple times.\"]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_rendering_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Given the current connections and scheduled changes, starts rendering audio.\"], # [doc = \"\"], # [doc = \" This function will block the current thread and returns the rendered `AudioBuffer`\"], # [doc = \" synchronously.\"], # [doc = \"\"], # [doc = \" This method will only adhere to scheduled suspensions via [`Self::suspend_sync`] and\"], # [doc = \" will ignore those provided via [`Self::suspend`].\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if this method is called multiple times\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": "BaseAudioContext"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=state, vis=None, attrs=[# [doc = \" Returns state of current context\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=suspend, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Schedules a suspension of the time progression in the audio context at the specified time\"], # [doc = \" and returns a promise\"], # [doc = \"\"], # [doc = \" The specified time is quantized and rounded up to the render quantum size.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the quantized frame number\"], # [doc = \"\"], # [doc = \" - is negative or\"], # [doc = \" - is less than or equal to the current time or\"], # [doc = \" - is greater than or equal to the total render duration or\"], # [doc = \" - is scheduled by another suspend for the same time\"], # [doc = \"\"], # [doc = \" # Example usage\"], # [doc = \"\"], # [doc = \" ```rust\"], # [doc = \" use futures::{executor, join};\"], # [doc = \" use futures::FutureExt as _;\"], # [doc = \" use std::sync::Arc;\"], # [doc = \"\"], # [doc = \" use web_audio_api::context::BaseAudioContext;\"], # [doc = \" use web_audio_api::context::OfflineAudioContext;\"], # [doc = \" use web_audio_api::node::{AudioNode, AudioScheduledSourceNode};\"], # [doc = \"\"], # [doc = \" let context = Arc::new(OfflineAudioContext::new(1, 512, 44_100.));\"], # [doc = \" let context_clone = Arc::clone(&context);\"], # [doc = \"\"], # [doc = \" let suspend_promise = context.suspend(128. / 44_100.).then(|_| async move {\"], # [doc = \"     let mut src = context_clone.create_constant_source();\"], # [doc = \"     src.connect(&context_clone.destination());\"], # [doc = \"     src.start();\"], # [doc = \"     context_clone.resume().await;\"], # [doc = \" });\"], # [doc = \"\"], # [doc = \" let render_promise = context.start_rendering();\"], # [doc = \"\"], # [doc = \" let buffer = executor::block_on(async move { join!(suspend_promise, render_promise).1 });\"], # [doc = \" assert_eq!(buffer.number_of_channels(), 1);\"], # [doc = \" assert_eq!(buffer.length(), 512);\"], # [doc = \" ```\"]])"
      },
      {
        "namespace": "web_audio_api::context::offline",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OfflineAudioContext",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=suspend_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Schedules a suspension of the time progression in the audio context at the specified time\"], # [doc = \" and runs a callback.\"], # [doc = \"\"], # [doc = \" This is a synchronous version of [`Self::suspend`] that runs the provided callback at\"], # [doc = \" the `suspendTime`. The rendering resumes automatically after the callback has run, so there\"], # [doc = \" is no `resume_sync` method.\"], # [doc = \"\"], # [doc = \" The specified time is quantized and rounded up to the render quantum size.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the quantized frame number\"], # [doc = \"\"], # [doc = \" - is negative or\"], # [doc = \" - is less than or equal to the current time or\"], # [doc = \" - is greater than or equal to the total render duration or\"], # [doc = \" - is scheduled by another suspend for the same time\"], # [doc = \"\"], # [doc = \" # Example usage\"], # [doc = \"\"], # [doc = \" ```rust\"], # [doc = \" use web_audio_api::context::BaseAudioContext;\"], # [doc = \" use web_audio_api::context::OfflineAudioContext;\"], # [doc = \" use web_audio_api::node::{AudioNode, AudioScheduledSourceNode};\"], # [doc = \"\"], # [doc = \" let mut context = OfflineAudioContext::new(1, 512, 44_100.);\"], # [doc = \"\"], # [doc = \" context.suspend_sync(128. / 44_100., |context| {\"], # [doc = \"     let mut src = context.create_constant_source();\"], # [doc = \"     src.connect(&context.destination());\"], # [doc = \"     src.start();\"], # [doc = \" });\"], # [doc = \"\"], # [doc = \" let buffer = context.start_rendering_sync();\"], # [doc = \" assert_eq!(buffer.number_of_channels(), 1);\"], # [doc = \" assert_eq!(buffer.length(), 512);\"], # [doc = \" ```\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/OfflineAudioContextExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_complete, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::message",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OneshotNotify",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=send, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Emit the notification\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onended, vis=None, attrs=[# [doc = \" Unset the callback to run when the source node has stopped playing\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "OscillatorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=detune, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" A-rate [`AudioParam`] that defines a transposition according to the\"], # [doc = \" frequency, expressed in cents.\"], # [doc = \"\"], # [doc = \" see <https://en.wikipedia.org/wiki/Cent_(music)>\"], # [doc = \"\"], # [doc = \" The final frequency is calculated as follow: frequency * 2^(detune/1200)\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frequency, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" A-rate [`AudioParam`] that defines the fundamental frequency of the\"], # [doc = \" oscillator, expressed in Hz\"], # [doc = \"\"], # [doc = \" The final frequency is calculated as follow: frequency * 2^(detune/1200)\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns an `OscillatorNode`\"], # [doc = \"\"], # [doc = \" # Arguments:\"], # [doc = \"\"], # [doc = \" * `context` - The `AudioContext`\"], # [doc = \" * `options` - The OscillatorOptions\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[# [doc = \" `OscillatorNode` is a source node. A source node is by definition with no input\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[# [doc = \" `OscillatorNode` is a mono source node.\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "OscillatorNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "OscillatorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onended, vis=None, attrs=[# [doc = \" Register callback to run when the source node has stopped playing\"], # [doc = \"\"], # [doc = \" For all [`AudioScheduledSourceNode`]s, the ended event is dispatched when the stop time\"], # [doc = \" determined by stop() is reached. For an\"], # [doc = \" [`AudioBufferSourceNode`](crate::node::AudioBufferSourceNode), the event is also dispatched\"], # [doc = \" because the duration has been reached or if the entire buffer has been played.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_periodic_wave, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Sets a `PeriodicWave` which describes a waveform to be used by the oscillator.\"], # [doc = \"\"], # [doc = \" Calling this sets the oscillator type to `custom`, once set to `custom`\"], # [doc = \" the oscillator cannot be reverted back to a standard waveform.\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_type, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the oscillator type\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `type_` - oscillator type (sine, square, triangle, sawtooth)\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" if `type_` is `OscillatorType::Custom`\"]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=start_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": "AudioScheduledSourceNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=stop_at, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=type_, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the oscillator type\"], # [must_use]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/OscillatorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/OscillatorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/OscillatorNodeScheduledSourceNodeMiscExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_ended, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::oscillator",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OscillatorType",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "OverSampleType",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=cone_inner_angle, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=cone_outer_angle, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=cone_outer_gain, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "PannerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=distance_model, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=max_distance, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" returns a `PannerNode` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `context` - audio context in which the audio node will live.\"], # [doc = \" * `options` - stereo panner options\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * `options.channel_config.count` is greater than 2\"], # [doc = \" * `options.channel_config.mode` is `ChannelCountMode::Max`\"], # [doc = \"\"], # [doc = \" Can panic when loading HRIR-sphere\"], # [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=orientation_x, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=orientation_y, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=orientation_z, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=panning_model, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_x, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_y, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=position_z, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=ref_distance, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=rolloff_factor, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_cone_inner_angle, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_cone_outer_angle, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_cone_outer_gain, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the coneOuterGain attribute\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the provided value is not in the range [0, 1]\"]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_distance_model, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_max_distance, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the maxDistance attribute\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the provided value is negative.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "PannerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_orientation, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_panning_model, vis=Some(Visibility::Public(Pub)), attrs=[# [allow (clippy :: missing_panics_doc)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_position, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_ref_distance, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the refDistance attribute\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the provided value is negative.\"]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_rolloff_factor, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the rolloffFactor attribute\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if the provided value is negative.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/PannerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/PannerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PannerOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PanningModelType",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::periodic_wave",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PeriodicWave",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::periodic_wave",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PeriodicWave",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns a `PeriodicWave`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `real` - The real parameter represents an array of cosine terms of Fourier series.\"], # [doc = \" * `imag` - The imag parameter represents an array of sine terms of Fourier series.\"], # [doc = \" * `constraints` - The constraints parameter specifies the normalization mode of the `PeriodicWave`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * `real` is defined and its length is less than 2\"], # [doc = \" * `imag` is defined and its length is less than 2\"], # [doc = \" * `real` and `imag` are defined and theirs lengths are not equal\"], # [doc = \" * `PeriodicWave` is more than 8192 components\"]])"
      },
      {
        "namespace": "web_audio_api::periodic_wave",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PeriodicWaveOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::node::delay",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "PlaybackInfo",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[# [inline], # [automatically_derived]])"
      },
      {
        "namespace": "web_audio_api::render::thread",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "RenderThread",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::thread",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "RenderThread",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::thread",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "RenderThread",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render_audiobuffer, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::render::thread",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "RenderThread",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=render_audiobuffer_sync, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::resampling",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "Resampler < M >",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=buffer_size, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onaudioprocess, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Unset the callback to run when the AudioProcessingEvent is dispatched\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "ScriptProcessorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Creates a `ScriptProcessorNode`\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" - `context` - Audio context in which the node will live\"], # [doc = \" - `options` - node options\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function panics if:\"], # [doc = \" - `buffer_size` is not 256, 512, 1024, 2048, 4096, 8192, or 16384\"], # [doc = \" - the number of input and output channels are both zero\"], # [doc = \" - either of the channel counts exceed [`crate::MAX_CHANNELS`]\"]])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "ScriptProcessorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::script_processor",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onaudioprocess, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Register callback to run when the AudioProcessingEvent is dispatched\"], # [doc = \"\"], # [doc = \" The event handler processes audio from the input (if any) by accessing the audio data from\"], # [doc = \" the inputBuffer attribute. The audio data which is the result of the processing (or the\"], # [doc = \" synthesized data if there are no inputs) is then placed into the outputBuffer.\"], # [doc = \"\"], # [doc = \" The output buffer is shipped back to the render thread when the AudioProcessingEvent goes\"], # [doc = \" out of scope, so be sure not to store it somewhere.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ScriptProcessorNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ScriptProcessorNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/ScriptProcessorNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "StereoPannerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" returns a `StereoPannerNode` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `context` - audio context in which the audio node will live.\"], # [doc = \" * `options` - stereo panner options\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Will panic if:\"], # [doc = \"\"], # [doc = \" * `options.channel_config.count` is greater than 2\"], # [doc = \" * `options.channel_config.mode` is `ChannelCountMode::Max`\"], # [doc = \"\"]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=pan, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the pan audio parameter\"], # [must_use], # [frb (proxy , sync , getter)], # [doc = \"[LARPOUX]$func_name\"], # [frb (external)], # [frb (external)]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=Some(Visibility::Inherited), attrs=[# [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "StereoPannerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/StereoPannerNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/StereoPannerNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "web_audio_api::node::stereo_panner",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "StereoPannerOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::io::cpal::private",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ThreadSafeClosableStream",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=close, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::io::cpal::private",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ThreadSafeClosableStream",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::io::cpal::private",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ThreadSafeClosableStream",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=resume, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::io::cpal::private",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "ThreadSafeClosableStream",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=suspend, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_config, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count, vis=None, attrs=[# [doc = \" Represents an integer used to determine how many channels are used when up-mixing and\"], # [doc = \" down-mixing connections to any inputs to the node.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_count_mode, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the way channels must be matched between the\"], # [doc = \" node's inputs and outputs.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=channel_interpretation, vis=None, attrs=[# [doc = \" Represents an enumerated value describing the meaning of the channels. This interpretation\"], # [doc = \" will define how audio up-mixing and down-mixing will happen.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=clear_onprocessorerror, vis=None, attrs=[# [doc = \" Unset the callback to run when an unhandled exception occurs in the audio processor.\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "WaveShaperNodeExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=connect_from_output_to_input, vis=None, attrs=[# [doc = \" Connect a specific output of this AudioNode to a specific input of another node.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=context, vis=None, attrs=[# [doc = \" The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this\"], # [doc = \" AudioNode.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "WaveShaperNodeMiscExt"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_curve, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"curve\")]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections from the AudioNode.\"]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest, vis=None, attrs=[# [doc = \" Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific destination AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_dest_from_output_to_input, vis=None, attrs=[# [doc = \" Disconnects a specific output of the AudioNode to a specific input of some destination\"], # [doc = \" AudioNode\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - the AudioContext of the source and destination does not match\"], # [doc = \" - if the input port is out of bounds for the destination node\"], # [doc = \" - if the output port is out of bounds for the source node\"], # [doc = \" - the source node was not connected to the destination node\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=disconnect_output, vis=None, attrs=[# [doc = \" Disconnects all outgoing connections at the given output port from the AudioNode.\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" This function will panic when\"], # [doc = \" - if the output port is out of bounds for this node\"]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=new, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" returns a `WaveShaperNode` instance\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `context` - audio context in which the audio node will live.\"], # [doc = \" * `options` - waveshaper options\"]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_inputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=number_of_outputs, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=oversample, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Returns the `oversample` faactor of this node\"], # [must_use]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=registration, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count, vis=None, attrs=[# [doc = \" Update the `channel_count` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_count_mode, vis=None, attrs=[# [doc = \" Update the `channel_count_mode` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_channel_interpretation, vis=None, attrs=[# [doc = \" Update the `channel_interpretation` attribute\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_curve, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Set the distortion `curve` of this node\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `curve` - the desired distortion `curve`\"], # [doc = \"\"], # [doc = \" # Panics\"], # [doc = \"\"], # [doc = \" Panics if a curve has already been given to the source (though `new` or through\"], # [doc = \" `set_curve`)\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "WaveShaperNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "web_audio_api::node",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": "AudioNode"
          }
        },
        "sources": [
          "Normal",
          "CopyFromTraitDef"
        ],
        "item_fn": "GeneralizedItemFn(name=set_onprocessorerror, vis=None, attrs=[# [doc = \" Register callback to run when an unhandled exception occurs in the audio processor.\"], # [doc = \"\"], # [doc = \" Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.\"], # [doc = \"\"], # [doc = \" Only a single event handler is active at any time. Calling this method multiple times will\"], # [doc = \" override the previous event handler.\"], # [frb (ignore)], # [frb (external)], # [frb (external)], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperNode",
            "trait_def_name": null
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_oversample, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" set the `oversample` factor of this node\"], # [doc = \"\"], # [doc = \" # Arguments\"], # [doc = \"\"], # [doc = \" * `oversample` - the desired `OversampleType` variant\"]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/WaveShaperNodeExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_connect, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"connect\")]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/WaveShaperNodeExt"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=set_on_processor_error, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)]])"
      },
      {
        "namespace": "crate::api::override_web_audio_api",
        "owner": {
          "TraitDef": {
            "trait_def_name": "crate::api::override_web_audio_api/WaveShaperNodeMiscExt"
          }
        },
        "sources": [
          "Normal",
          "FromFrbOverride"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_override_curve, vis=None, attrs=[# [allow (patterns_in_fns_without_body , clippy :: inline_fn_without_body , unused_attributes)], # [frb (name = \"curve\")]])"
      },
      {
        "namespace": "web_audio_api::node::waveshaper",
        "owner": {
          "StructOrEnum": {
            "impl_ty": "WaveShaperOptions",
            "trait_def_name": "Default"
          }
        },
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=default, vis=Some(Visibility::Inherited), attrs=[])"
      },
      {
        "namespace": "crate::api::mimi",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=mimi, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::simple",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=greet, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Greeting the user.\"], # [doc = \" Calls several trace functions and call a rust program to play sinusoid sounds.\"]])"
      },
      {
        "namespace": "crate::api::simple",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=init_app, vis=Some(Visibility::Public(Pub)), attrs=[# [frb (init)]])"
      },
      {
        "namespace": "crate::api::simple",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=init_tau_core, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Initialisation of the tau_core rust library\"]])"
      },
      {
        "namespace": "crate::api::simple",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=rust_set_log_level, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::simple",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=trace_logger, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::toto",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=toto, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::toto",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=zozo, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::api::zozo",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sum, vis=Some(Visibility::Public(Pub)), attrs=[# [no_mangle]])"
      },
      {
        "namespace": "crate::api::zozo",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=sum_long_running, vis=Some(Visibility::Public(Pub)), attrs=[# [no_mangle]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=enumerate_devices_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" List the available media output devices, such as speakers, headsets, loopbacks, etc\"], # [doc = \"\"], # [doc = \" The media device_id can be used to specify the [`sink_id` of the `AudioContext`](crate::context::AudioContextOptions::sink_id)\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use web_audio_api::media_devices::{enumerate_devices_sync, MediaDeviceInfoKind};\"], # [doc = \"\"], # [doc = \" let devices = enumerate_devices_sync();\"], # [doc = \" assert_eq!(devices[0].device_id(), \\\"1\\\");\"], # [doc = \" assert_eq!(devices[0].group_id(), None);\"], # [doc = \" assert_eq!(devices[0].kind(), MediaDeviceInfoKind::AudioOutput);\"], # [doc = \" assert_eq!(devices[0].label(), \\\"Macbook Pro Builtin Speakers\\\");\"], # [doc = \" ```\"], # [frb (ignore)]])"
      },
      {
        "namespace": "web_audio_api::media_devices",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=get_user_media_sync, vis=Some(Visibility::Public(Pub)), attrs=[# [doc = \" Prompt for permission to use a media input (audio only)\"], # [doc = \"\"], # [doc = \" This produces a [`MediaStream`] with tracks containing the requested types of media, which can\"], # [doc = \" be used inside a [`MediaStreamAudioSourceNode`](crate::node::MediaStreamAudioSourceNode).\"], # [doc = \"\"], # [doc = \" It is okay for the `MediaStream` struct to go out of scope, any corresponding stream will still be\"], # [doc = \" kept alive and emit audio buffers. Call the `close()` method if you want to stop the media\"], # [doc = \" input and release all system resources.\"], # [doc = \"\"], # [doc = \" This function operates synchronously, which may be undesirable on the control thread. An async\"], # [doc = \" version is currently not implemented.\"], # [doc = \"\"], # [doc = \" # Example\"], # [doc = \"\"], # [doc = \" ```no_run\"], # [doc = \" use web_audio_api::context::{BaseAudioContext, AudioContext};\"], # [doc = \" use web_audio_api::context::{AudioContextLatencyCategory, AudioContextOptions};\"], # [doc = \" use web_audio_api::media_devices;\"], # [doc = \" use web_audio_api::media_devices::MediaStreamConstraints;\"], # [doc = \" use web_audio_api::node::AudioNode;\"], # [doc = \"\"], # [doc = \" let context = AudioContext::default();\"], # [doc = \" let mic = media_devices::get_user_media_sync(MediaStreamConstraints::Audio);\"], # [doc = \"\"], # [doc = \" // register as media element in the audio context\"], # [doc = \" let background = context.create_media_stream_source(&mic);\"], # [doc = \"\"], # [doc = \" // connect the node directly to the destination node (speakers)\"], # [doc = \" background.connect(&context.destination());\"], # [doc = \"\"], # [doc = \" // enjoy listening\"], # [doc = \" std::thread::sleep(std::time::Duration::from_secs(4));\"], # [doc = \" ```\"]])"
      },
      {
        "namespace": "crate::frb_generated",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_internal_no_impl_dummy_function_AudioNodeImplementor, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::frb_generated",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum, vis=Some(Visibility::Public(Pub)), attrs=[])"
      },
      {
        "namespace": "crate::frb_generated",
        "owner": "Function",
        "sources": [
          "Normal"
        ],
        "item_fn": "GeneralizedItemFn(name=frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum, vis=Some(Visibility::Public(Pub)), attrs=[])"
      }
    ],
    "enums": [
      {
        "name": "crate::api::simple/Level",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AutomationRate",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContextLatencyCategory",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContextRenderSizeCategory",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContextState",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_devices/MediaDeviceInfoKind",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_devices/MediaStreamConstraints",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_streams/MediaStreamTrackState",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/BiquadFilterType",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelCountMode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelInterpretation",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/DistanceModelType",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/OscillatorType",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/OverSampleType",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/PanningModelType",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::worklet/Processor",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "crate::frb_generated/AudioNodeImplementor",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": false
      },
      {
        "name": "crate::frb_generated/Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": false
      },
      {
        "name": "crate::frb_generated/Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": false
      }
    ],
    "structs": [
      {
        "name": "crate::api::media_element/MyMediaElement",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": false
      },
      {
        "name": "crate::api::simple/LogEntry",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AtomicF32",
        "visibility": "Restricted",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AtomicF64",
        "visibility": "Restricted",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioBuffer",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioBufferOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioListener",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioParam",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioParamDescriptor",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioProcessingEvent",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioRenderCapacity",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioRenderCapacityEvent",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/AudioRenderCapacityOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/ErrorEvent",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/Event",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/MediaElement",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/MessagePort",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/OfflineAudioCompletionEvent",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/PeriodicWave",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api/PeriodicWaveOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContext",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContextOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioContextRegistration",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioNodeId",
        "visibility": "Restricted",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/AudioParamId",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/ConcreteBaseAudioContext",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::context/OfflineAudioContext",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_devices/DeviceId",
        "visibility": "Restricted",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_devices/MediaDeviceInfo",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_devices/MediaTrackConstraints",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_recorder/BlobEvent",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_recorder/MediaRecorder",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_recorder/MediaRecorderInner",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_recorder/RecordedData",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_streams/MediaStream",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_streams/MediaStreamTrack",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_streams/MediaStreamTrackInner",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::media_streams/MediaStreamTrackIter",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AnalyserNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AnalyserOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AudioBufferSourceNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AudioBufferSourceOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AudioDestinationNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/AudioNodeOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/BiquadFilterNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/BiquadFilterOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelConfig",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelMergerNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelMergerOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelSplitterNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ChannelSplitterOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ConstantSourceNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ConstantSourceOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ConvolverNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ConvolverOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/DelayNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/DelayOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/DynamicsCompressorNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/DynamicsCompressorOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/GainNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/GainOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/IIRFilterNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/IIRFilterOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaElementAudioSourceNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaElementAudioSourceOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamAudioDestinationNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamAudioSourceNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamAudioSourceOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamRenderer",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamTrackAudioSourceNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/MediaStreamTrackAudioSourceOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/OscillatorNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/OscillatorOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/PannerNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/PannerOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ScriptProcessorNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/ScriptProcessorOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/StereoPannerNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/StereoPannerOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/WaveShaperNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::node/WaveShaperOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::worklet/AudioParamValues",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::worklet/AudioWorkletNode",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::worklet/AudioWorkletNodeOptions",
        "visibility": "Public",
        "sources": [
          "Normal"
        ],
        "mirror": true
      },
      {
        "name": "web_audio_api::worklet/AudioWorkletRenderer",
        "visibility": "Inherited",
        "sources": [
          "Normal"
        ],
        "mirror": true
      }
    ],
    "traits": [
      {
        "name": "crate::api::override_web_audio_api/AnalyserNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/AudioBufferSourceNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/AudioBufferSourceNodeScheduledSourceNodeMiscExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/AudioContextExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/AudioDestinationNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/AudioParamExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/BiquadFilterNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ChannelMergerNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ChannelSplitterNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ConstantSourceNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ConstantSourceNodeScheduledSourceNodeMiscExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ConvolverNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/DelayNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/DynamicsCompressorNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/EventExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/GainNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/IIRFilterNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/MediaElementAudioSourceNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/MediaStreamAudioDestinationNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/MediaStreamAudioSourceNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/MediaStreamExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/MediaStreamTrackAudioSourceNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/OfflineAudioContextExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/OscillatorNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/OscillatorNodeScheduledSourceNodeMiscExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/PannerNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/ScriptProcessorNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/StereoPannerNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/WaveShaperNodeExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "crate::api::override_web_audio_api/WaveShaperNodeMiscExt",
        "attrs": [
          "# [allow (non_camel_case_types)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "web_audio_api/AudioBufferIter",
        "attrs": [],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "web_audio_api::context/BaseAudioContext",
        "attrs": [
          "# [doc = \" The interface representing an audio-processing graph built from audio modules linked together,\"]",
          "# [doc = \" each represented by an `AudioNode`.\"]",
          "# [doc = \"\"]",
          "# [doc = \" An audio context controls both the creation of the nodes it contains and the execution of the\"]",
          "# [doc = \" audio processing, or decoding.\"]",
          "# [allow (clippy :: module_name_repetitions)]",
          "# [frb (external)]",
          "# [frb (external)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "web_audio_api::node/AudioNode",
        "attrs": [
          "# [doc = \" This interface represents audio sources, the audio destination, and intermediate processing\"]",
          "# [doc = \" modules.\"]",
          "# [doc = \"\"]",
          "# [doc = \" These modules can be connected together to form processing graphs for rendering audio\"]",
          "# [doc = \" to the audio hardware. Each node can have inputs and/or outputs.\"]",
          "# [doc = \"\"]",
          "# [doc = \" Note that the AudioNode is typically constructed together with an `AudioWorkletProcessor`\"]",
          "# [doc = \" (the object that lives the render thread). See the [`crate::worklet`] mod.\"]",
          "# [frb (external)]",
          "# [frb (external)]",
          "# [frb (generate_implementor_enum)]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "web_audio_api::node/AudioScheduledSourceNode",
        "attrs": [
          "# [doc = \" Interface of source nodes, controlling start and stop times.\"]",
          "# [doc = \" The node will emit silence before it is started, and after it has ended.\"]"
        ],
        "sources": [
          "Normal"
        ]
      },
      {
        "name": "web_audio_api::worklet/AudioWorkletProcessor",
        "attrs": [
          "# [doc = \" Audio processing code that runs on the audio rendering thread.\"]",
          "# [frb (external)]",
          "# [frb (external)]"
        ],
        "sources": [
          "Normal"
        ]
      }
    ],
    "trait_impls": [
      {
        "trait_name": "AnalyserNodeExt",
        "impl_ty": "AnalyserNode"
      },
      {
        "trait_name": "AsRef",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "AudioBackendManager",
        "impl_ty": "NoneBackend"
      },
      {
        "trait_name": "AudioBackendManager",
        "impl_ty": "CpalBackend"
      },
      {
        "trait_name": "AudioBufferIter",
        "impl_ty": "M"
      },
      {
        "trait_name": "AudioBufferSourceNodeExt",
        "impl_ty": "AudioBufferSourceNode"
      },
      {
        "trait_name": "AudioBufferSourceNodeScheduledSourceNodeMiscExt",
        "impl_ty": "AudioBufferSourceNode"
      },
      {
        "trait_name": "AudioContextExt",
        "impl_ty": "AudioContext"
      },
      {
        "trait_name": "AudioDestinationNodeExt",
        "impl_ty": "AudioDestinationNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AnalyserNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AudioBufferSourceNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "BiquadFilterNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "ChannelMergerNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "ChannelSplitterNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "ConstantSourceNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "ConvolverNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "DelayNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AudioDestinationNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "DynamicsCompressorNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "GainNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "IIRFilterNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "MediaElementAudioSourceNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "MediaStreamAudioDestinationNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "MediaStreamAudioSourceNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "MediaStreamTrackAudioSourceNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "OscillatorNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "PannerNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "ScriptProcessorNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "StereoPannerNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "WaveShaperNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AudioParam"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AudioListenerNode"
      },
      {
        "trait_name": "AudioNode",
        "impl_ty": "AudioWorkletNode"
      },
      {
        "trait_name": "AudioParamExt",
        "impl_ty": "AudioParam"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "MediaStreamRenderer < R >"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "AnalyserRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "AudioBufferSourceRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "BiquadFilterRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ChannelMergerRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ChannelSplitterRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ConstantSourceRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ConvolverRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "DelayWriter"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "DelayReader"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "DestinationRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "DynamicsCompressorRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "GainRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "IirFilterRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "DestinationRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "OscillatorRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "PannerRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ScriptProcessorRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "StereoPannerRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "WaveShaperRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "AudioParamProcessor"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "ListenerRenderer"
      },
      {
        "trait_name": "AudioProcessor",
        "impl_ty": "AudioWorkletRenderer < P >"
      },
      {
        "trait_name": "AudioScheduledSourceNode",
        "impl_ty": "AudioBufferSourceNode"
      },
      {
        "trait_name": "AudioScheduledSourceNode",
        "impl_ty": "ConstantSourceNode"
      },
      {
        "trait_name": "AudioScheduledSourceNode",
        "impl_ty": "OscillatorNode"
      },
      {
        "trait_name": "BaseAudioContext",
        "impl_ty": "ConcreteBaseAudioContext"
      },
      {
        "trait_name": "BaseAudioContext",
        "impl_ty": "OfflineAudioContext"
      },
      {
        "trait_name": "BaseAudioContext",
        "impl_ty": "AudioContext"
      },
      {
        "trait_name": "BiquadFilterNodeExt",
        "impl_ty": "BiquadFilterNode"
      },
      {
        "trait_name": "ChannelMergerNodeExt",
        "impl_ty": "ChannelMergerNode"
      },
      {
        "trait_name": "ChannelSplitterNodeExt",
        "impl_ty": "ChannelSplitterNode"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioBufferOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioBuffer"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelData"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioRenderCapacityLoad"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioRenderCapacityOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioRenderCapacityEvent"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ConcreteBaseAudioContext"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioContextLatencyCategory"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioContextRenderSizeCategory"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioContextOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaStreamConstraints"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaTrackConstraints"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaStreamTrack"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "MediaStream"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioNodeOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelConfig"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelConfigInner"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AnalyserOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioBufferSourceOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "LoopState"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ControlMessage"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "Coefficients"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "BiquadFilterOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelMergerOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ChannelSplitterOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ConstantSourceOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ConvolverOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "DelayOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "DynamicsCompressorOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "GainOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "IIRFilterOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "OscillatorOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PannerOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "SpatialParams"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ScriptProcessorOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "StereoPannerOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "WaveShaperOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ResamplerConfig"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "Event"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "EventLoop"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioParamDescriptor"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioParam"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioParamInner"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PeriodicWaveOptions"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "PeriodicWave"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioRenderQuantum"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "RenderThreadInit"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "NoneBackend"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "CpalBackend"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "ThreadSafeClosableStream"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AnalyserRingBuffer"
      },
      {
        "trait_name": "Clone",
        "impl_ty": "AudioWorkletNodeOptions < C >"
      },
      {
        "trait_name": "ConstantSourceNodeExt",
        "impl_ty": "ConstantSourceNode"
      },
      {
        "trait_name": "ConstantSourceNodeScheduledSourceNodeMiscExt",
        "impl_ty": "ConstantSourceNode"
      },
      {
        "trait_name": "ConvolverNodeExt",
        "impl_ty": "ConvolverNode"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioRenderCapacityLoad"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioContextLatencyCategory"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioContextRenderSizeCategory"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "LoopState"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "Coefficients"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "SpatialParams"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "Copy",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AtomicF32"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AtomicF64"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioBufferOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioBuffer"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelData"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderCapacityLoad"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderCapacityOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderCapacityEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderCapacity"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamId"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContextRegistration"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ConcreteBaseAudioContext"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OfflineAudioContext"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContextLatencyCategory"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContextRenderSizeCategory"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContextOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioContext"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaDeviceInfo"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamConstraints"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaTrackConstraints"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaRecorder"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "BlobEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamTrack"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStream"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioNodeOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelConfigInner"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelConfig"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AnalyserOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AnalyserNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioBufferSourceOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "LoopState"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ControlMessage"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioBufferSourceNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Coefficients"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "BiquadFilterOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "BiquadFilterNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelMergerOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelMergerNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelMergerRenderer"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelSplitterOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelSplitterNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ChannelSplitterRenderer"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ConstantSourceOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ConstantSourceNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ConvolverOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ConvolverNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "DelayOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "DelayNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioDestinationNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "DynamicsCompressorOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "DynamicsCompressorNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "GainOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "GainNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "IIRFilterOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "IIRFilterNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaElementAudioSourceOptions < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaElementAudioSourceNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamAudioDestinationNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamAudioSourceOptions < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamAudioSourceNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamTrackAudioSourceOptions < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaStreamTrackAudioSourceNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OscillatorOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Schedule"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OscillatorNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PannerOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PannerNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ScriptProcessorOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ScriptProcessorNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "StereoPannerOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "StereoPannerNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "WaveShaperOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "WaveShaperNode"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ResamplerConfig"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Event"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "EventType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ErrorEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioProcessingEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OfflineAudioCompletionEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "EventPayload"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "EventDispatch"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MessagePort < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamDescriptor"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamEvent"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamEventTimeline"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParam"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamInner"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamProcessor"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PeriodicWaveOptions"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "PeriodicWave"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "OutgoingEdge"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Node"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Graph"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "RenderThread"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "TerminateGarbageCollectorThread"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioWorkletGlobalScope"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "dyn AudioProcessor"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamValues < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AllocInner"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioRenderQuantum"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "NodeCollection"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioListener"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "ControlThreadInit"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "RenderThreadInit"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "Analyser"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "RTSStream"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "MediaElement"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioParamValues < 'a >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioWorkletNodeOptions < C >"
      },
      {
        "trait_name": "Debug",
        "impl_ty": "AudioWorkletNode"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioContextRenderSizeCategory"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioRenderCapacityOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioContextLatencyCategory"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioContextRenderSizeCategory"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioContextOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioContext"
      },
      {
        "trait_name": "Default",
        "impl_ty": "MediaTrackConstraints"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioNodeOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "ChannelConfig"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AnalyserOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioBufferSourceOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioBufferRendererState"
      },
      {
        "trait_name": "Default",
        "impl_ty": "Coefficients"
      },
      {
        "trait_name": "Default",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "Default",
        "impl_ty": "BiquadFilterOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "ChannelMergerOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "ChannelSplitterOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "ConstantSourceOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "ConvolverOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "DelayOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "PlaybackInfo"
      },
      {
        "trait_name": "Default",
        "impl_ty": "DynamicsCompressorOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "GainOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "OscillatorOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "Default",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "Default",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "Default",
        "impl_ty": "PannerOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "StereoPannerOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "Default",
        "impl_ty": "WaveShaperOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioParamEventTimeline"
      },
      {
        "trait_name": "Default",
        "impl_ty": "PeriodicWaveOptions"
      },
      {
        "trait_name": "Default",
        "impl_ty": "PeriodicWave"
      },
      {
        "trait_name": "Default",
        "impl_ty": "AudioWorkletNodeOptions < C >"
      },
      {
        "trait_name": "DelayNodeExt",
        "impl_ty": "DelayNode"
      },
      {
        "trait_name": "Deref",
        "impl_ty": "DerefAudioRenderQuantumChannel < '_ >"
      },
      {
        "trait_name": "Deref",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "DerefMut",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "AudioContextRegistration"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "AudioContext"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "DelayWriter"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "AudioProcessingEvent"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "RenderThread"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "AudioRenderQuantumChannel"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "MicrophoneStream"
      },
      {
        "trait_name": "Drop",
        "impl_ty": "MicrophoneRender"
      },
      {
        "trait_name": "DynamicsCompressorNodeExt",
        "impl_ty": "DynamicsCompressorNode"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "ResamplerConfig"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "EventType"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "Eq",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "EventExt",
        "impl_ty": "Event"
      },
      {
        "trait_name": "From",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "From",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "From",
        "impl_ty": "AudioContextOptions"
      },
      {
        "trait_name": "From",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "From",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "From",
        "impl_ty": "ChannelConfig"
      },
      {
        "trait_name": "From",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "From",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "From",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "From",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "From",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "GainNodeExt",
        "impl_ty": "GainNode"
      },
      {
        "trait_name": "Hash",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "Hash",
        "impl_ty": "DeviceId"
      },
      {
        "trait_name": "Hash",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "Hash",
        "impl_ty": "EventType"
      },
      {
        "trait_name": "IIRFilterNodeExt",
        "impl_ty": "IIRFilterNode"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "MediaStreamTrackIter"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "AudioDestinationNodeStream"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "MicrophoneStream"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "MediaDecoder"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "RTSStream"
      },
      {
        "trait_name": "Iterator",
        "impl_ty": "Resampler < M >"
      },
      {
        "trait_name": "LogSink",
        "impl_ty": "frb_generated :: StreamSink < flutter_logger :: LogEntry >"
      },
      {
        "trait_name": "MediaElementAudioSourceNodeExt",
        "impl_ty": "MediaElementAudioSourceNode"
      },
      {
        "trait_name": "MediaSource",
        "impl_ty": "MediaInput < R >"
      },
      {
        "trait_name": "MediaStreamAudioDestinationNodeExt",
        "impl_ty": "MediaStreamAudioDestinationNode"
      },
      {
        "trait_name": "MediaStreamAudioSourceNodeExt",
        "impl_ty": "MediaStreamAudioSourceNode"
      },
      {
        "trait_name": "MediaStreamExt",
        "impl_ty": "MediaStream"
      },
      {
        "trait_name": "MediaStreamTrackAudioSourceNodeExt",
        "impl_ty": "MediaStreamTrackAudioSourceNode"
      },
      {
        "trait_name": "OfflineAudioContextExt",
        "impl_ty": "OfflineAudioContext"
      },
      {
        "trait_name": "OscillatorNodeExt",
        "impl_ty": "OscillatorNode"
      },
      {
        "trait_name": "OscillatorNodeScheduledSourceNodeMiscExt",
        "impl_ty": "OscillatorNode"
      },
      {
        "trait_name": "PannerNodeExt",
        "impl_ty": "PannerNode"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "ChannelData"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "ConcreteBaseAudioContext"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "ResamplerConfig"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "EventType"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "PartialEq",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "Read",
        "impl_ty": "MediaInput < R >"
      },
      {
        "trait_name": "RingBufferChecker",
        "impl_ty": "DelayWriter"
      },
      {
        "trait_name": "RingBufferChecker",
        "impl_ty": "DelayReader"
      },
      {
        "trait_name": "ScriptProcessorNodeExt",
        "impl_ty": "ScriptProcessorNode"
      },
      {
        "trait_name": "Seek",
        "impl_ty": "MediaInput < R >"
      },
      {
        "trait_name": "Send",
        "impl_ty": "DelayWriter"
      },
      {
        "trait_name": "Send",
        "impl_ty": "DelayReader"
      },
      {
        "trait_name": "Send",
        "impl_ty": "DynamicsCompressorRenderer"
      },
      {
        "trait_name": "Send",
        "impl_ty": "ScriptProcessorRenderer"
      },
      {
        "trait_name": "Send",
        "impl_ty": "Graph"
      },
      {
        "trait_name": "Send",
        "impl_ty": "RenderThread"
      },
      {
        "trait_name": "Send",
        "impl_ty": "ThreadSafeClosableStream"
      },
      {
        "trait_name": "Send",
        "impl_ty": "AudioWorkletRenderer < P >"
      },
      {
        "trait_name": "StereoPannerNodeExt",
        "impl_ty": "StereoPannerNode"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "ChannelData"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "AudioNodeId"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "AudioContextState"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "MediaDeviceInfoKind"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "MediaStreamTrackState"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "ChannelCountMode"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "ChannelInterpretation"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "BiquadFilterType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "OscillatorType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "PanningModelType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "DistanceModelType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "OverSampleType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "ResamplerConfig"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "EventType"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "AutomationRate"
      },
      {
        "trait_name": "StructuralPartialEq",
        "impl_ty": "AudioParamEventType"
      },
      {
        "trait_name": "Sync",
        "impl_ty": "Graph"
      },
      {
        "trait_name": "Sync",
        "impl_ty": "RenderThread"
      },
      {
        "trait_name": "Sync",
        "impl_ty": "ThreadSafeClosableStream"
      },
      {
        "trait_name": "WaveShaperNodeExt",
        "impl_ty": "WaveShaperNode"
      },
      {
        "trait_name": "WaveShaperNodeMiscExt",
        "impl_ty": "WaveShaperNode"
      }
    ],
    "types": [
      {
        "ident": "BlobEventCallback",
        "target": "Box < dyn FnMut (BlobEvent) + Send + 'static >"
      },
      {
        "ident": "ErrorEventCallback",
        "target": "Box < dyn FnOnce (ErrorEvent) + Send + 'static >"
      },
      {
        "ident": "EventCallback",
        "target": "Box < dyn FnOnce (Event) + Send + 'static >"
      },
      {
        "ident": "FallibleBuffer",
        "target": "Result < AudioBuffer , Box < dyn Error + Send + Sync > >"
      }
    ],
    "existing_handler": null,
    "extra_rust_output_code": "pub enum AudioNodeImplementor {\n            Variant0(RustAutoOpaque<AnalyserNode>),\nVariant1(RustAutoOpaque<AudioBufferSourceNode>),\nVariant2(RustAutoOpaque<AudioDestinationNode>),\nVariant3(RustAutoOpaque<AudioParam>),\nVariant4(RustAutoOpaque<AudioWorkletNode>),\nVariant5(RustAutoOpaque<BiquadFilterNode>),\nVariant6(RustAutoOpaque<ChannelMergerNode>),\nVariant7(RustAutoOpaque<ChannelSplitterNode>),\nVariant8(RustAutoOpaque<ConstantSourceNode>),\nVariant9(RustAutoOpaque<ConvolverNode>),\nVariant10(RustAutoOpaque<DelayNode>),\nVariant11(RustAutoOpaque<DynamicsCompressorNode>),\nVariant12(RustAutoOpaque<GainNode>),\nVariant13(RustAutoOpaque<IIRFilterNode>),\nVariant14(RustAutoOpaque<MediaElementAudioSourceNode>),\nVariant15(RustAutoOpaque<MediaStreamAudioDestinationNode>),\nVariant16(RustAutoOpaque<MediaStreamAudioSourceNode>),\nVariant17(RustAutoOpaque<MediaStreamTrackAudioSourceNode>),\nVariant18(RustAutoOpaque<OscillatorNode>),\nVariant19(RustAutoOpaque<PannerNode>),\nVariant20(RustAutoOpaque<ScriptProcessorNode>),\nVariant21(RustAutoOpaque<StereoPannerNode>),\nVariant22(RustAutoOpaque<WaveShaperNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_AudioNodeImplementor(a: AudioNodeImplementor) { }\n                \n        impl AudioNodeImplementor {\n            pub fn blocking_read(&self) -> AudioNodeImplementorRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockReadGuard::Variant0(inner.blocking_read()),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockReadGuard::Variant1(inner.blocking_read()),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockReadGuard::Variant2(inner.blocking_read()),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockReadGuard::Variant3(inner.blocking_read()),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockReadGuard::Variant4(inner.blocking_read()),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockReadGuard::Variant5(inner.blocking_read()),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockReadGuard::Variant6(inner.blocking_read()),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockReadGuard::Variant7(inner.blocking_read()),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockReadGuard::Variant8(inner.blocking_read()),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockReadGuard::Variant9(inner.blocking_read()),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockReadGuard::Variant10(inner.blocking_read()),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockReadGuard::Variant11(inner.blocking_read()),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockReadGuard::Variant12(inner.blocking_read()),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockReadGuard::Variant13(inner.blocking_read()),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockReadGuard::Variant14(inner.blocking_read()),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockReadGuard::Variant15(inner.blocking_read()),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockReadGuard::Variant16(inner.blocking_read()),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockReadGuard::Variant17(inner.blocking_read()),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockReadGuard::Variant18(inner.blocking_read()),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockReadGuard::Variant19(inner.blocking_read()),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockReadGuard::Variant20(inner.blocking_read()),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockReadGuard::Variant21(inner.blocking_read()),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockReadGuard::Variant22(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> AudioNodeImplementorRwLockWriteGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockWriteGuard::Variant0(inner.blocking_write()),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockWriteGuard::Variant1(inner.blocking_write()),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockWriteGuard::Variant2(inner.blocking_write()),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockWriteGuard::Variant3(inner.blocking_write()),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockWriteGuard::Variant4(inner.blocking_write()),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockWriteGuard::Variant5(inner.blocking_write()),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockWriteGuard::Variant6(inner.blocking_write()),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockWriteGuard::Variant7(inner.blocking_write()),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockWriteGuard::Variant8(inner.blocking_write()),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockWriteGuard::Variant9(inner.blocking_write()),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockWriteGuard::Variant10(inner.blocking_write()),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockWriteGuard::Variant11(inner.blocking_write()),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockWriteGuard::Variant12(inner.blocking_write()),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockWriteGuard::Variant13(inner.blocking_write()),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockWriteGuard::Variant14(inner.blocking_write()),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockWriteGuard::Variant15(inner.blocking_write()),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockWriteGuard::Variant16(inner.blocking_write()),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockWriteGuard::Variant17(inner.blocking_write()),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockWriteGuard::Variant18(inner.blocking_write()),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockWriteGuard::Variant19(inner.blocking_write()),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockWriteGuard::Variant20(inner.blocking_write()),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockWriteGuard::Variant21(inner.blocking_write()),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockWriteGuard::Variant22(inner.blocking_write()),\n\n        }\n            }\n\n            pub async fn read(&self) -> AudioNodeImplementorRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockReadGuard::Variant0(inner.read().await),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockReadGuard::Variant1(inner.read().await),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockReadGuard::Variant2(inner.read().await),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockReadGuard::Variant3(inner.read().await),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockReadGuard::Variant4(inner.read().await),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockReadGuard::Variant5(inner.read().await),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockReadGuard::Variant6(inner.read().await),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockReadGuard::Variant7(inner.read().await),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockReadGuard::Variant8(inner.read().await),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockReadGuard::Variant9(inner.read().await),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockReadGuard::Variant10(inner.read().await),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockReadGuard::Variant11(inner.read().await),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockReadGuard::Variant12(inner.read().await),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockReadGuard::Variant13(inner.read().await),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockReadGuard::Variant14(inner.read().await),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockReadGuard::Variant15(inner.read().await),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockReadGuard::Variant16(inner.read().await),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockReadGuard::Variant17(inner.read().await),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockReadGuard::Variant18(inner.read().await),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockReadGuard::Variant19(inner.read().await),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockReadGuard::Variant20(inner.read().await),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockReadGuard::Variant21(inner.read().await),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockReadGuard::Variant22(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> AudioNodeImplementorRwLockWriteGuard {\n                match self {\n            Self::Variant0(inner) => AudioNodeImplementorRwLockWriteGuard::Variant0(inner.write().await),\nSelf::Variant1(inner) => AudioNodeImplementorRwLockWriteGuard::Variant1(inner.write().await),\nSelf::Variant2(inner) => AudioNodeImplementorRwLockWriteGuard::Variant2(inner.write().await),\nSelf::Variant3(inner) => AudioNodeImplementorRwLockWriteGuard::Variant3(inner.write().await),\nSelf::Variant4(inner) => AudioNodeImplementorRwLockWriteGuard::Variant4(inner.write().await),\nSelf::Variant5(inner) => AudioNodeImplementorRwLockWriteGuard::Variant5(inner.write().await),\nSelf::Variant6(inner) => AudioNodeImplementorRwLockWriteGuard::Variant6(inner.write().await),\nSelf::Variant7(inner) => AudioNodeImplementorRwLockWriteGuard::Variant7(inner.write().await),\nSelf::Variant8(inner) => AudioNodeImplementorRwLockWriteGuard::Variant8(inner.write().await),\nSelf::Variant9(inner) => AudioNodeImplementorRwLockWriteGuard::Variant9(inner.write().await),\nSelf::Variant10(inner) => AudioNodeImplementorRwLockWriteGuard::Variant10(inner.write().await),\nSelf::Variant11(inner) => AudioNodeImplementorRwLockWriteGuard::Variant11(inner.write().await),\nSelf::Variant12(inner) => AudioNodeImplementorRwLockWriteGuard::Variant12(inner.write().await),\nSelf::Variant13(inner) => AudioNodeImplementorRwLockWriteGuard::Variant13(inner.write().await),\nSelf::Variant14(inner) => AudioNodeImplementorRwLockWriteGuard::Variant14(inner.write().await),\nSelf::Variant15(inner) => AudioNodeImplementorRwLockWriteGuard::Variant15(inner.write().await),\nSelf::Variant16(inner) => AudioNodeImplementorRwLockWriteGuard::Variant16(inner.write().await),\nSelf::Variant17(inner) => AudioNodeImplementorRwLockWriteGuard::Variant17(inner.write().await),\nSelf::Variant18(inner) => AudioNodeImplementorRwLockWriteGuard::Variant18(inner.write().await),\nSelf::Variant19(inner) => AudioNodeImplementorRwLockWriteGuard::Variant19(inner.write().await),\nSelf::Variant20(inner) => AudioNodeImplementorRwLockWriteGuard::Variant20(inner.write().await),\nSelf::Variant21(inner) => AudioNodeImplementorRwLockWriteGuard::Variant21(inner.write().await),\nSelf::Variant22(inner) => AudioNodeImplementorRwLockWriteGuard::Variant22(inner.write().await),\n\n        }\n            }\n        }\n\n        impl Lockable for AudioNodeImplementor {\n            type RwLockReadGuard<'a> = AudioNodeImplementorRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = AudioNodeImplementorRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant1(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant2(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant3(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant4(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant5(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant6(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant7(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant8(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant9(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant10(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant11(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant12(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant13(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant14(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant15(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant16(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant17(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant18(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant19(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant20(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant21(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant22(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum AudioNodeImplementorRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AnalyserNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioDestinationNode>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioParam>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioWorkletNode>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ChannelMergerNode>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ChannelSplitterNode>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConstantSourceNode>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConvolverNode>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DelayNode>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, GainNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, IIRFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaElementAudioSourceNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioDestinationNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioSourceNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamTrackAudioSourceNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ScriptProcessorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, StereoPannerNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, WaveShaperNode>),\n\n        }\n\n        \n        impl std::ops::Deref for AudioNodeImplementorRwLockReadGuard<'_> {\n            type Target = dyn AudioNode;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref(),\nSelf::Variant1(inner) => inner.deref(),\nSelf::Variant2(inner) => inner.deref(),\nSelf::Variant3(inner) => inner.deref(),\nSelf::Variant4(inner) => inner.deref(),\nSelf::Variant5(inner) => inner.deref(),\nSelf::Variant6(inner) => inner.deref(),\nSelf::Variant7(inner) => inner.deref(),\nSelf::Variant8(inner) => inner.deref(),\nSelf::Variant9(inner) => inner.deref(),\nSelf::Variant10(inner) => inner.deref(),\nSelf::Variant11(inner) => inner.deref(),\nSelf::Variant12(inner) => inner.deref(),\nSelf::Variant13(inner) => inner.deref(),\nSelf::Variant14(inner) => inner.deref(),\nSelf::Variant15(inner) => inner.deref(),\nSelf::Variant16(inner) => inner.deref(),\nSelf::Variant17(inner) => inner.deref(),\nSelf::Variant18(inner) => inner.deref(),\nSelf::Variant19(inner) => inner.deref(),\nSelf::Variant20(inner) => inner.deref(),\nSelf::Variant21(inner) => inner.deref(),\nSelf::Variant22(inner) => inner.deref(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum AudioNodeImplementorRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AnalyserNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioDestinationNode>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioParam>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioWorkletNode>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ChannelMergerNode>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ChannelSplitterNode>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConstantSourceNode>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConvolverNode>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DelayNode>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, GainNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, IIRFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaElementAudioSourceNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioDestinationNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioSourceNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamTrackAudioSourceNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ScriptProcessorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, StereoPannerNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, WaveShaperNode>),\n\n        }\n\n        \n        impl std::ops::Deref for AudioNodeImplementorRwLockWriteGuard<'_> {\n            type Target = dyn AudioNode;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref(),\nSelf::Variant1(inner) => inner.deref(),\nSelf::Variant2(inner) => inner.deref(),\nSelf::Variant3(inner) => inner.deref(),\nSelf::Variant4(inner) => inner.deref(),\nSelf::Variant5(inner) => inner.deref(),\nSelf::Variant6(inner) => inner.deref(),\nSelf::Variant7(inner) => inner.deref(),\nSelf::Variant8(inner) => inner.deref(),\nSelf::Variant9(inner) => inner.deref(),\nSelf::Variant10(inner) => inner.deref(),\nSelf::Variant11(inner) => inner.deref(),\nSelf::Variant12(inner) => inner.deref(),\nSelf::Variant13(inner) => inner.deref(),\nSelf::Variant14(inner) => inner.deref(),\nSelf::Variant15(inner) => inner.deref(),\nSelf::Variant16(inner) => inner.deref(),\nSelf::Variant17(inner) => inner.deref(),\nSelf::Variant18(inner) => inner.deref(),\nSelf::Variant19(inner) => inner.deref(),\nSelf::Variant20(inner) => inner.deref(),\nSelf::Variant21(inner) => inner.deref(),\nSelf::Variant22(inner) => inner.deref(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for AudioNodeImplementorRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    match self {\n            Self::Variant0(inner) => inner.deref_mut(),\nSelf::Variant1(inner) => inner.deref_mut(),\nSelf::Variant2(inner) => inner.deref_mut(),\nSelf::Variant3(inner) => inner.deref_mut(),\nSelf::Variant4(inner) => inner.deref_mut(),\nSelf::Variant5(inner) => inner.deref_mut(),\nSelf::Variant6(inner) => inner.deref_mut(),\nSelf::Variant7(inner) => inner.deref_mut(),\nSelf::Variant8(inner) => inner.deref_mut(),\nSelf::Variant9(inner) => inner.deref_mut(),\nSelf::Variant10(inner) => inner.deref_mut(),\nSelf::Variant11(inner) => inner.deref_mut(),\nSelf::Variant12(inner) => inner.deref_mut(),\nSelf::Variant13(inner) => inner.deref_mut(),\nSelf::Variant14(inner) => inner.deref_mut(),\nSelf::Variant15(inner) => inner.deref_mut(),\nSelf::Variant16(inner) => inner.deref_mut(),\nSelf::Variant17(inner) => inner.deref_mut(),\nSelf::Variant18(inner) => inner.deref_mut(),\nSelf::Variant19(inner) => inner.deref_mut(),\nSelf::Variant20(inner) => inner.deref_mut(),\nSelf::Variant21(inner) => inner.deref_mut(),\nSelf::Variant22(inner) => inner.deref_mut(),\n\n        }\n                }\n            }\n            \n        pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            Variant0(RustAutoOpaque<AudioBufferSourceNode>),\nVariant1(RustAutoOpaque<AudioBufferSourceNode>),\nVariant2(RustAutoOpaque<AudioListener>),\nVariant3(RustAutoOpaque<AudioListener>),\nVariant4(RustAutoOpaque<AudioListener>),\nVariant5(RustAutoOpaque<AudioListener>),\nVariant6(RustAutoOpaque<AudioListener>),\nVariant7(RustAutoOpaque<AudioListener>),\nVariant8(RustAutoOpaque<AudioListener>),\nVariant9(RustAutoOpaque<AudioListener>),\nVariant10(RustAutoOpaque<AudioListener>),\nVariant11(RustAutoOpaque<BiquadFilterNode>),\nVariant12(RustAutoOpaque<BiquadFilterNode>),\nVariant13(RustAutoOpaque<BiquadFilterNode>),\nVariant14(RustAutoOpaque<BiquadFilterNode>),\nVariant15(RustAutoOpaque<ConstantSourceNode>),\nVariant16(RustAutoOpaque<DelayNode>),\nVariant17(RustAutoOpaque<DynamicsCompressorNode>),\nVariant18(RustAutoOpaque<DynamicsCompressorNode>),\nVariant19(RustAutoOpaque<DynamicsCompressorNode>),\nVariant20(RustAutoOpaque<DynamicsCompressorNode>),\nVariant21(RustAutoOpaque<DynamicsCompressorNode>),\nVariant22(RustAutoOpaque<GainNode>),\nVariant23(RustAutoOpaque<OscillatorNode>),\nVariant24(RustAutoOpaque<OscillatorNode>),\nVariant25(RustAutoOpaque<PannerNode>),\nVariant26(RustAutoOpaque<PannerNode>),\nVariant27(RustAutoOpaque<PannerNode>),\nVariant28(RustAutoOpaque<PannerNode>),\nVariant29(RustAutoOpaque<PannerNode>),\nVariant30(RustAutoOpaque<PannerNode>),\nVariant31(RustAutoOpaque<StereoPannerNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum(a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum) { }\n                \n        impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),\nSelf::Variant1(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant1(inner.blocking_read()),\nSelf::Variant2(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant2(inner.blocking_read()),\nSelf::Variant3(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant3(inner.blocking_read()),\nSelf::Variant4(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant4(inner.blocking_read()),\nSelf::Variant5(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant5(inner.blocking_read()),\nSelf::Variant6(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant6(inner.blocking_read()),\nSelf::Variant7(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant7(inner.blocking_read()),\nSelf::Variant8(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant8(inner.blocking_read()),\nSelf::Variant9(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant9(inner.blocking_read()),\nSelf::Variant10(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant10(inner.blocking_read()),\nSelf::Variant11(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant11(inner.blocking_read()),\nSelf::Variant12(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant12(inner.blocking_read()),\nSelf::Variant13(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant13(inner.blocking_read()),\nSelf::Variant14(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant14(inner.blocking_read()),\nSelf::Variant15(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant15(inner.blocking_read()),\nSelf::Variant16(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant16(inner.blocking_read()),\nSelf::Variant17(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant17(inner.blocking_read()),\nSelf::Variant18(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant18(inner.blocking_read()),\nSelf::Variant19(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant19(inner.blocking_read()),\nSelf::Variant20(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant20(inner.blocking_read()),\nSelf::Variant21(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant21(inner.blocking_read()),\nSelf::Variant22(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant22(inner.blocking_read()),\nSelf::Variant23(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant23(inner.blocking_read()),\nSelf::Variant24(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant24(inner.blocking_read()),\nSelf::Variant25(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant25(inner.blocking_read()),\nSelf::Variant26(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant26(inner.blocking_read()),\nSelf::Variant27(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant27(inner.blocking_read()),\nSelf::Variant28(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant28(inner.blocking_read()),\nSelf::Variant29(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant29(inner.blocking_read()),\nSelf::Variant30(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant30(inner.blocking_read()),\nSelf::Variant31(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant31(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n\n            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant0(inner.read().await),\nSelf::Variant1(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant1(inner.read().await),\nSelf::Variant2(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant2(inner.read().await),\nSelf::Variant3(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant3(inner.read().await),\nSelf::Variant4(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant4(inner.read().await),\nSelf::Variant5(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant5(inner.read().await),\nSelf::Variant6(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant6(inner.read().await),\nSelf::Variant7(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant7(inner.read().await),\nSelf::Variant8(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant8(inner.read().await),\nSelf::Variant9(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant9(inner.read().await),\nSelf::Variant10(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant10(inner.read().await),\nSelf::Variant11(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant11(inner.read().await),\nSelf::Variant12(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant12(inner.read().await),\nSelf::Variant13(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant13(inner.read().await),\nSelf::Variant14(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant14(inner.read().await),\nSelf::Variant15(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant15(inner.read().await),\nSelf::Variant16(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant16(inner.read().await),\nSelf::Variant17(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant17(inner.read().await),\nSelf::Variant18(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant18(inner.read().await),\nSelf::Variant19(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant19(inner.read().await),\nSelf::Variant20(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant20(inner.read().await),\nSelf::Variant21(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant21(inner.read().await),\nSelf::Variant22(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant22(inner.read().await),\nSelf::Variant23(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant23(inner.read().await),\nSelf::Variant24(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant24(inner.read().await),\nSelf::Variant25(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant25(inner.read().await),\nSelf::Variant26(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant26(inner.read().await),\nSelf::Variant27(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant27(inner.read().await),\nSelf::Variant28(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant28(inner.read().await),\nSelf::Variant29(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant29(inner.read().await),\nSelf::Variant30(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant30(inner.read().await),\nSelf::Variant31(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard::Variant31(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n        }\n\n        impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum {\n            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant1(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant2(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant3(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant4(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant5(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant6(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant7(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant8(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant9(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant10(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant11(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant12(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant13(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant14(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant15(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant16(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant17(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant18(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant19(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant20(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant21(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant22(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant23(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant24(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant25(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant26(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant27(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant28(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant29(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant30(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\nSelf::Variant31(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, AudioListener>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, BiquadFilterNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ConstantSourceNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DelayNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, DynamicsCompressorNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, GainNode>),\nVariant23(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant24(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, OscillatorNode>),\nVariant25(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant26(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant27(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant28(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant29(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant30(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, PannerNode>),\nVariant31(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, StereoPannerNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockReadGuard<'_> {\n            type Target = AudioParam;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().detune(),\nSelf::Variant1(inner) => inner.deref().playback_rate(),\nSelf::Variant2(inner) => inner.deref().forward_x(),\nSelf::Variant3(inner) => inner.deref().forward_y(),\nSelf::Variant4(inner) => inner.deref().forward_z(),\nSelf::Variant5(inner) => inner.deref().position_x(),\nSelf::Variant6(inner) => inner.deref().position_y(),\nSelf::Variant7(inner) => inner.deref().position_z(),\nSelf::Variant8(inner) => inner.deref().up_x(),\nSelf::Variant9(inner) => inner.deref().up_y(),\nSelf::Variant10(inner) => inner.deref().up_z(),\nSelf::Variant11(inner) => inner.deref().detune(),\nSelf::Variant12(inner) => inner.deref().frequency(),\nSelf::Variant13(inner) => inner.deref().gain(),\nSelf::Variant14(inner) => inner.deref().q(),\nSelf::Variant15(inner) => inner.deref().offset(),\nSelf::Variant16(inner) => inner.deref().delay_time(),\nSelf::Variant17(inner) => inner.deref().attack(),\nSelf::Variant18(inner) => inner.deref().knee(),\nSelf::Variant19(inner) => inner.deref().ratio(),\nSelf::Variant20(inner) => inner.deref().release(),\nSelf::Variant21(inner) => inner.deref().threshold(),\nSelf::Variant22(inner) => inner.deref().gain(),\nSelf::Variant23(inner) => inner.deref().detune(),\nSelf::Variant24(inner) => inner.deref().frequency(),\nSelf::Variant25(inner) => inner.deref().orientation_x(),\nSelf::Variant26(inner) => inner.deref().orientation_y(),\nSelf::Variant27(inner) => inner.deref().orientation_z(),\nSelf::Variant28(inner) => inner.deref().position_x(),\nSelf::Variant29(inner) => inner.deref().position_y(),\nSelf::Variant30(inner) => inner.deref().position_z(),\nSelf::Variant31(inner) => inner.deref().pan(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant1(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioBufferSourceNode>),\nVariant2(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant3(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant4(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant5(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant6(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant7(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant8(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant9(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant10(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, AudioListener>),\nVariant11(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant12(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant13(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant14(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, BiquadFilterNode>),\nVariant15(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ConstantSourceNode>),\nVariant16(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DelayNode>),\nVariant17(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant18(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant19(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant20(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant21(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, DynamicsCompressorNode>),\nVariant22(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, GainNode>),\nVariant23(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant24(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, OscillatorNode>),\nVariant25(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant26(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant27(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant28(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant29(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant30(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, PannerNode>),\nVariant31(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, StereoPannerNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'_> {\n            type Target = AudioParam;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().detune(),\nSelf::Variant1(inner) => inner.deref().playback_rate(),\nSelf::Variant2(inner) => inner.deref().forward_x(),\nSelf::Variant3(inner) => inner.deref().forward_y(),\nSelf::Variant4(inner) => inner.deref().forward_z(),\nSelf::Variant5(inner) => inner.deref().position_x(),\nSelf::Variant6(inner) => inner.deref().position_y(),\nSelf::Variant7(inner) => inner.deref().position_z(),\nSelf::Variant8(inner) => inner.deref().up_x(),\nSelf::Variant9(inner) => inner.deref().up_y(),\nSelf::Variant10(inner) => inner.deref().up_z(),\nSelf::Variant11(inner) => inner.deref().detune(),\nSelf::Variant12(inner) => inner.deref().frequency(),\nSelf::Variant13(inner) => inner.deref().gain(),\nSelf::Variant14(inner) => inner.deref().q(),\nSelf::Variant15(inner) => inner.deref().offset(),\nSelf::Variant16(inner) => inner.deref().delay_time(),\nSelf::Variant17(inner) => inner.deref().attack(),\nSelf::Variant18(inner) => inner.deref().knee(),\nSelf::Variant19(inner) => inner.deref().ratio(),\nSelf::Variant20(inner) => inner.deref().release(),\nSelf::Variant21(inner) => inner.deref().threshold(),\nSelf::Variant22(inner) => inner.deref().gain(),\nSelf::Variant23(inner) => inner.deref().detune(),\nSelf::Variant24(inner) => inner.deref().frequency(),\nSelf::Variant25(inner) => inner.deref().orientation_x(),\nSelf::Variant26(inner) => inner.deref().orientation_y(),\nSelf::Variant27(inner) => inner.deref().orientation_z(),\nSelf::Variant28(inner) => inner.deref().position_x(),\nSelf::Variant29(inner) => inner.deref().position_y(),\nSelf::Variant30(inner) => inner.deref().position_z(),\nSelf::Variant31(inner) => inner.deref().pan(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnumRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    unreachable!()\n                }\n            }\n            \n        pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            Variant0(RustAutoOpaque<MediaStreamAudioDestinationNode>),\n\n        }\n\n                pub fn frb_internal_no_impl_dummy_function_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum(a: Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum) { }\n                \n        impl Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            pub fn blocking_read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard::Variant0(inner.blocking_read()),\n\n        }\n            }\n\n            pub fn blocking_write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n\n            pub async fn read(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard {\n                match self {\n            Self::Variant0(inner) => Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard::Variant0(inner.read().await),\n\n        }\n            }\n\n            pub async fn write(&self) -> Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard {\n                unreachable!()\n            }\n        }\n\n        impl Lockable for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum {\n            type RwLockReadGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'a>;\n            type RwLockWriteGuard<'a> = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'a>;\n\n            fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {\n                match self {\n            Self::Variant0(inner) => flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner),\n\n        }\n            }\n\n            fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {\n                self.blocking_read()\n            }\n\n            fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {\n                self.blocking_write()\n            }\n\n            fn lockable_decode_async_ref<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.read().await })\n            }\n\n            fn lockable_decode_async_ref_mut<'a>(\n                &'a self,\n            ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'_>> + Send + 'a>>\n            where\n                Self: Sync + 'a,\n            {\n                Box::pin(async move { self.write().await })\n            }\n        }\n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, MediaStreamAudioDestinationNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockReadGuard<'_> {\n            type Target = MediaStream;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().stream(),\n\n        }\n            }\n        }\n        \n\n        \n        \n\n                pub enum Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'a> {\n            Variant0(flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, MediaStreamAudioDestinationNode>),\n\n        }\n\n        \n        impl std::ops::Deref for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'_> {\n            type Target = MediaStream;\n\n            fn deref(&self) -> &Self::Target {\n                match self {\n            Self::Variant0(inner) => inner.deref().stream(),\n\n        }\n            }\n        }\n        \n\n        \n            impl std::ops::DerefMut for Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnumRwLockWriteGuard<'_> {\n                fn deref_mut(&mut self) -> &mut Self::Target {\n                    unreachable!()\n                }\n            }\n            \n        ",
    "extra_dart_output_code": {
      "header": {
        "file_top": "",
        "import": "",
        "part": ""
      },
      "body": ""
    },
    "skips": [
      {
        "name": "crate::api::simple/send",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::buffer/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::capacity/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/hash",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::concrete_base/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::concrete_base/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::concrete_base/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::offline/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::context::online/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/hash",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/hash",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_devices/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_recorder/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_recorder/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_streams/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_node/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::analyser/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::analyser/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::analyser/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::analyser/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::audio_buffer_source/before_drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::biquad_filter/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_merger/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_merger/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_merger/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_merger/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_merger/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_splitter/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_splitter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_splitter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_splitter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::channel_splitter/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::constant_source/before_drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::convolver/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::convolver/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::convolver/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::convolver/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::convolver/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/ring_buffer_mut",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/has_side_effects",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/ring_buffer_mut",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::delay/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::destination/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::destination/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::destination/has_side_effects",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::dynamics_compressor/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::dynamics_compressor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::dynamics_compressor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::dynamics_compressor/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::gain/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::gain/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::gain/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::gain/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::iir_filter/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::iir_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::iir_filter/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::iir_filter/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_element_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_element_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_destination/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_destination/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_destination/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_track_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::media_stream_track_source/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::oscillator/before_drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::panner/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::script_processor/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::script_processor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::script_processor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::script_processor/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::script_processor/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::stereo_panner/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::stereo_panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::stereo_panner/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::stereo_panner/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/from",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::node::waveshaper/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/hash",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::events/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::message_port/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/assert_receiver_is_total_eq",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::param/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::periodic_wave/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::periodic_wave/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::periodic_wave/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::periodic_wave/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::graph/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::graph/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::graph/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::thread/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::thread/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::thread/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::processor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::processor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::processor/deref",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::processor/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/deref",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/deref_mut",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/as_ref",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::quantum/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::render::node_collection/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::spatial/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::spatial/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/build_output",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/build_input",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/resume",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/suspend",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/close",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/sample_rate",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/number_of_channels",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/output_latency",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/sink_id",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::none/enumerate_devices_sync",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/build_output",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/build_input",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/resume",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/suspend",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/close",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/sample_rate",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/number_of_channels",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/output_latency",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/sink_id",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal/enumerate_devices_sync",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::cpal::private/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::microphone/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::microphone/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::io::microphone/drop",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::analysis/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::analysis/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::decoding/read",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::decoding/seek",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::decoding/is_seekable",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::decoding/byte_len",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::decoding/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_element/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_element/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::media_element/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::resampling/next",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/clone",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/fmt",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/process",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/onmessage",
        "reason": "IgnoreBecauseNotDefinedTrait"
      },
      {
        "name": "web_audio_api::worklet/has_side_effects",
        "reason": "IgnoreBecauseNotDefinedTrait"
      }
    ]
  },
  "proxied_types": [
    {
      "original_ty": {
        "type": "RustAutoOpaque",
        "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
        "data": {
          "ownership_mode": "Ref",
          "inner": {
            "namespace": "web_audio_api",
            "inner": {
              "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
            },
            "codec": "Moi",
            "dart_api_type": null,
            "brief_name": true
          },
          "raw": {
            "string": {
              "raw": "AudioParam"
            },
            "segments": [
              {
                "ident": "AudioParam",
                "args": ""
              }
            ]
          },
          "reason": null,
          "ignore": false
        }
      },
      "proxy_enum_namespace": "crate::frb_generated",
      "variants": [
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioBufferSourceNode"
                },
                "segments": [
                  {
                    "ident": "AudioBufferSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "detune"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioBufferSourceNode"
                },
                "segments": [
                  {
                    "ident": "AudioBufferSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "playback_rate"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "forward_x"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "forward_y"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "forward_z"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_x"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_y"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_z"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "up_x"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "up_y"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioListener"
                },
                "segments": [
                  {
                    "ident": "AudioListener",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "up_z"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "BiquadFilterNode"
                },
                "segments": [
                  {
                    "ident": "BiquadFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "detune"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "BiquadFilterNode"
                },
                "segments": [
                  {
                    "ident": "BiquadFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "frequency"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "BiquadFilterNode"
                },
                "segments": [
                  {
                    "ident": "BiquadFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "gain"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "BiquadFilterNode"
                },
                "segments": [
                  {
                    "ident": "BiquadFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "q"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ConstantSourceNode"
                },
                "segments": [
                  {
                    "ident": "ConstantSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "offset"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DelayNode"
                },
                "segments": [
                  {
                    "ident": "DelayNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "delay_time"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "attack"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "knee"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "ratio"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "release"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "threshold"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "GainNode"
                },
                "segments": [
                  {
                    "ident": "GainNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "gain"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "OscillatorNode"
                },
                "segments": [
                  {
                    "ident": "OscillatorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "detune"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "OscillatorNode"
                },
                "segments": [
                  {
                    "ident": "OscillatorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "frequency"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "orientation_x"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "orientation_y"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "orientation_z"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_x"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_y"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "position_z"
        },
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "StereoPannerNode"
                },
                "segments": [
                  {
                    "ident": "StereoPannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "pan"
        }
      ]
    },
    {
      "original_ty": {
        "type": "RustAutoOpaque",
        "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream",
        "data": {
          "ownership_mode": "Ref",
          "inner": {
            "namespace": "web_audio_api::media_streams",
            "inner": {
              "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>"
            },
            "codec": "Moi",
            "dart_api_type": null,
            "brief_name": true
          },
          "raw": {
            "string": {
              "raw": "MediaStream"
            },
            "segments": [
              {
                "ident": "MediaStream",
                "args": ""
              }
            ]
          },
          "reason": null,
          "ignore": false
        }
      },
      "proxy_enum_namespace": "crate::frb_generated",
      "variants": [
        {
          "inner": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream",
            "data": {
              "ownership_mode": "Ref",
              "inner": {
                "namespace": "web_audio_api::media_streams",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStream>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaStream"
                },
                "segments": [
                  {
                    "ident": "MediaStream",
                    "args": ""
                  }
                ]
              },
              "reason": null,
              "ignore": false
            }
          },
          "upstream": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaStreamAudioDestinationNode"
                },
                "segments": [
                  {
                    "ident": "MediaStreamAudioDestinationNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          },
          "upstream_method_name": "stream"
        }
      ]
    }
  ],
  "trait_def_infos": [
    {
      "trait_def_name": "web_audio_api::node/AudioNode",
      "delegate_namespace": "crate::frb_generated",
      "variants": [
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AnalyserNode"
                },
                "segments": [
                  {
                    "ident": "AnalyserNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioBufferSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioBufferSourceNode"
                },
                "segments": [
                  {
                    "ident": "AudioBufferSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioDestinationNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioDestinationNode"
                },
                "segments": [
                  {
                    "ident": "AudioDestinationNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParam>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioParam"
                },
                "segments": [
                  {
                    "ident": "AudioParam",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::worklet",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "AudioWorkletNode"
                },
                "segments": [
                  {
                    "ident": "AudioWorkletNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "BiquadFilterNode"
                },
                "segments": [
                  {
                    "ident": "BiquadFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ChannelMergerNode"
                },
                "segments": [
                  {
                    "ident": "ChannelMergerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ChannelSplitterNode"
                },
                "segments": [
                  {
                    "ident": "ChannelSplitterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ConstantSourceNode"
                },
                "segments": [
                  {
                    "ident": "ConstantSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ConvolverNode"
                },
                "segments": [
                  {
                    "ident": "ConvolverNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DelayNode"
                },
                "segments": [
                  {
                    "ident": "DelayNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "DynamicsCompressorNode"
                },
                "segments": [
                  {
                    "ident": "DynamicsCompressorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "GainNode"
                },
                "segments": [
                  {
                    "ident": "GainNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "IIRFilterNode"
                },
                "segments": [
                  {
                    "ident": "IIRFilterNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaElementAudioSourceNode"
                },
                "segments": [
                  {
                    "ident": "MediaElementAudioSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioDestinationNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaStreamAudioDestinationNode"
                },
                "segments": [
                  {
                    "ident": "MediaStreamAudioDestinationNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaStreamAudioSourceNode"
                },
                "segments": [
                  {
                    "ident": "MediaStreamAudioSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackAudioSourceNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "MediaStreamTrackAudioSourceNode"
                },
                "segments": [
                  {
                    "ident": "MediaStreamTrackAudioSourceNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OscillatorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "OscillatorNode"
                },
                "segments": [
                  {
                    "ident": "OscillatorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "PannerNode"
                },
                "segments": [
                  {
                    "ident": "PannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ScriptProcessorNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "ScriptProcessorNode"
                },
                "segments": [
                  {
                    "ident": "ScriptProcessorNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StereoPannerNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "StereoPannerNode"
                },
                "segments": [
                  {
                    "ident": "StereoPannerNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        },
        {
          "ty": {
            "type": "RustAutoOpaque",
            "safe_ident": "Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode",
            "data": {
              "ownership_mode": "Owned",
              "inner": {
                "namespace": "web_audio_api::node",
                "inner": {
                  "raw": "flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WaveShaperNode>"
                },
                "codec": "Moi",
                "dart_api_type": null,
                "brief_name": true
              },
              "raw": {
                "string": {
                  "raw": "WaveShaperNode"
                },
                "segments": [
                  {
                    "ident": "WaveShaperNode",
                    "args": ""
                  }
                ]
              },
              "reason": "StructOrEnumRequireOpaque",
              "ignore": false
            }
          }
        }
      ]
    }
  ]
}