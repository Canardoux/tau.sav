// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.40.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../api/node/audio_buffer_source.dart';
import '../../api/node/audio_node.dart';
import '../../frb_generated.dart';
import '../../third_party/web_audio_api.dart';
import '../../third_party/web_audio_api/node.dart';
import '../../third_party/web_audio_api/worklet.dart';
import '../web_audio_api.dart';
import 'audio_buffer_source.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'worklet.dart';


            // These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `get_x_node`


            

            
                abstract class AudioNode {
                     void  connect({required AudioNode dest });


 void  getXNode();


/// Config for up/down-mixing of input channels for this node.
///
/// Only when implementing the [`AudioNode`] trait manually, this struct is of any concern.
 Future<void>  channelConfig();


/// Represents an integer used to determine how many channels are used when up-mixing and
/// down-mixing connections to any inputs to the node.
 Future<BigInt>  channelCount();


/// Represents an enumerated value describing the way channels must be matched between the
/// node's inputs and outputs.
 Future<ChannelCountMode>  channelCountMode();


/// Represents an enumerated value describing the meaning of the channels. This interpretation
/// will define how audio up-mixing and down-mixing will happen.
 Future<ChannelInterpretation>  channelInterpretation();


/// Unset the callback to run when an unhandled exception occurs in the audio processor.
 Future<void>  clearOnprocessorerror();


/// Connect a specific output of this AudioNode to a specific input of another node.
///
/// # Panics
///
/// This function will panic when
/// - the AudioContext of the source and destination does not match
/// - if the input port is out of bounds for the destination node
/// - if the output port is out of bounds for the source node
 Future<void>  connectFromOutputToInput({required AudioNode dest , required BigInt output , required BigInt input });


/// The [`BaseAudioContext`](crate::context::BaseAudioContext) concrete type which owns this
/// AudioNode.
 Future<void>  context();


/// Disconnects all outgoing connections from the AudioNode.
 Future<void>  disconnect();


/// Disconnects all outputs of the AudioNode that go to a specific destination AudioNode.
///
/// # Panics
///
/// This function will panic when
/// - the AudioContext of the source and destination does not match
/// - the source node was not connected to the destination node
 Future<void>  disconnectDest({required AudioNode dest });


/// Disconnects a specific output of the AudioNode to a specific destination AudioNode
///
/// # Panics
///
/// This function will panic when
/// - the AudioContext of the source and destination does not match
/// - if the output port is out of bounds for the source node
/// - the source node was not connected to the destination node
 Future<void>  disconnectDestFromOutput({required AudioNode dest , required BigInt output });


/// Disconnects a specific output of the AudioNode to a specific input of some destination
/// AudioNode
///
/// # Panics
///
/// This function will panic when
/// - the AudioContext of the source and destination does not match
/// - if the input port is out of bounds for the destination node
/// - if the output port is out of bounds for the source node
/// - the source node was not connected to the destination node
 Future<void>  disconnectDestFromOutputToInput({required AudioNode dest , required BigInt output , required BigInt input });


/// Disconnects all outgoing connections at the given output port from the AudioNode.
///
/// # Panics
///
/// This function will panic when
/// - if the output port is out of bounds for this node
 Future<void>  disconnectOutput({required BigInt output });


/// The number of inputs feeding into the AudioNode. For source nodes, this will be 0.
 Future<BigInt>  numberOfInputs();


/// The number of outputs coming out of the AudioNode.
 Future<BigInt>  numberOfOutputs();


/// Handle of the associated [`BaseAudioContext`](crate::context::BaseAudioContext).
///
/// Only when implementing the AudioNode trait manually, this struct is of any concern.
 Future<void>  registration();


/// Update the `channel_count` attribute
 Future<void>  setChannelCount({required BigInt v });


/// Update the `channel_count_mode` attribute
 Future<void>  setChannelCountMode({required ChannelCountMode v });


/// Update the `channel_interpretation` attribute
 Future<void>  setChannelInterpretation({required ChannelInterpretation v });


/// Register callback to run when an unhandled exception occurs in the audio processor.
///
/// Note that once a unhandled exception is thrown, the processor will output silence throughout its lifetime.
///
/// Only a single event handler is active at any time. Calling this method multiple times will
/// override the previous event handler.
 Future<void>  setOnprocessorerror({required BoxFnOnceErrorEvent callback });


                }
                
            