{
  "misc": {
    "wire_class": {
      "common": [],
      "io": [
        {
          "header": {
            "file_top": "",
            "import": "import 'dart:ffi' as ffi;\n",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": "\n        class RustLibWire implements BaseWire {\n\n            factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>\n              RustLibWire(lib.ffiDynamicLibrary);\n        \n            /// Holds the symbol lookup function.\n            final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)\n                _lookup;\n  \n            /// The symbols are looked up in [dynamicLibrary].\n            RustLibWire(ffi.DynamicLibrary dynamicLibrary)\n                : _lookup = dynamicLibrary.lookup;\n\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistrationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistrationPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistrationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistrationPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListenerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListenerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListenerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListenerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamIdPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamIdPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamIdPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamIdPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfigPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfigPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfigPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfigPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorderPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorderPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorderPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorderPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraintsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraintsPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraintsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraintsPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElementPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElementPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElementPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElementPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEventPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEventPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContextPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWavePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWavePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWavePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWavePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode');\n            late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode = _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n            void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(\n              ffi.Pointer<ffi.Void> ptr,\n            ) {\n              return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(\n                ptr,\n              );\n            }\n\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('frbgen_tau_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode');\n            late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode = _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNodePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();\n            \n        }\n        "
        }
      ],
      "web": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": "class RustLibWire implements BaseWire {\n            RustLibWire.fromExternalLibrary(ExternalLibrary lib);\n\n            void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(ptr);\n\nvoid rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(int ptr) => wasmModule.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr);\n\nvoid rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(int ptr) => wasmModule.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(ptr);\n        }\n        @JS('wasm_bindgen') external RustLibWasmModule get wasmModule;\n\n        @JS() @anonymous extension type RustLibWasmModule._(JSObject _) implements JSObject {\n            external void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(int ptr);\n\nexternal void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(int ptr);\n\nexternal void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(int ptr);\n        }\n        "
        }
      ]
    },
    "boilerplate": {
      "common": [
        {
          "header": {
            "file_top": "// This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field\n",
            "import": "\n                    import 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'api/toto.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/mimi.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'api/zozo.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'api/media_element.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/simple.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\n\n    import 'dart:convert';\n    import 'dart:async';\n    \n                    import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';\n                    import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';\n                    ",
            "part": ""
          },
          "body_top": "\n                /// Main entrypoint of the Rust API\n                class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {\n                  @internal\n                  static final instance = RustLib._();\n\n                  RustLib._();\n\n                  /// Initialize flutter_rust_bridge\n                  static Future<void> init({\n                    RustLibApi? api,\n                    BaseHandler? handler,\n                    ExternalLibrary? externalLibrary,\n                  }) async {\n                    await instance.initImpl(\n                      api: api,\n                      handler: handler,\n                      externalLibrary: externalLibrary,\n                    );\n                  }\n\n                  /// Dispose flutter_rust_bridge\n                  ///\n                  /// The call to this function is optional, since flutter_rust_bridge (and everything else)\n                  /// is automatically disposed when the app stops.\n                  static void dispose() => instance.disposeImpl();\n\n                  @override\n                  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;\n\n                  @override\n                  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;\n\n                  @override\n                  Future<void> executeRustInitializers() async {\n                    await api.crateApiSimpleInitApp();\n\n                  }\n\n                  @override\n                  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;\n\n                  @override\n                  String get codegenVersion => '2.0.0';\n\n                  @override\n                  int get rustContentHash => 29689956;\n\n                  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(\n                    stem: 'tau',\n                    ioDirectory: 'rust/target/release/',\n                    webPrefix: 'pkg/',\n                  );\n                }\n                ",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        }
      ],
      "io": [
        {
          "header": {
            "file_top": "// This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field\n",
            "import": "\n                    import 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'api/toto.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/mimi.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'api/zozo.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'api/media_element.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/simple.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\n\n    import 'dart:convert';\n    import 'dart:async';\n    \n                    import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';\n                    import 'frb_generated.dart';\n                    ",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        }
      ],
      "web": [
        {
          "header": {
            "file_top": "// This file is automatically generated, so please do not edit it.\n// Generated by `flutter_rust_bridge`@ 2.0.0.\n\n// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field\n\n\n// Static analysis wrongly picks the IO variant, thus ignore this\n// ignore_for_file: argument_type_not_assignable\n",
            "import": "\n                    import 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'api/toto.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/mimi.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'api/zozo.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'api/media_element.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_recorder.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/media_element.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/worklet.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'api/override_web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'third_party/web_audio_api/context.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'frb_generated.dart';\nimport 'frb_generated.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'api/simple.dart';\nimport 'api/simple.dart';\nimport 'third_party/web_audio_api/media_streams.dart';\nimport 'third_party/web_audio_api/media_devices.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api.dart';\nimport 'third_party/web_audio_api/node.dart';\nimport 'third_party/web_audio_api/node.dart';\n\n    import 'dart:convert';\n    import 'dart:async';\n    \n                    import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';\n                    import 'frb_generated.dart';\n                    ",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        }
      ]
    },
    "api_impl_normal_functions": [
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> crateApiMediaElementMyMediaElementCurrentTime({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<double> crateApiMediaElementMyMediaElementCurrentTime({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementCurrentTimeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementCurrentTimeConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_current_time\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<bool> crateApiMediaElementMyMediaElementLoop({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<bool> crateApiMediaElementMyMediaElementLoop({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_bool,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementLoopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementLoopConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_loop_\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "MyMediaElement crateApiMediaElementMyMediaElementNew({required String file });\n\n",
        "api_impl_class_body": "@override MyMediaElement crateApiMediaElementMyMediaElementNew({required String file })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(file, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement,\n          decodeErrorData: sse_decode_AnyhowException,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementNewConstMeta,\n            argValues: [file],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementNewConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_new\",\n            argNames: [\"file\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiMediaElementMyMediaElementPause({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiMediaElementMyMediaElementPause({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementPauseConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementPauseConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_pause\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<bool> crateApiMediaElementMyMediaElementPaused({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<bool> crateApiMediaElementMyMediaElementPaused({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_bool,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementPausedConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementPausedConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_paused\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiMediaElementMyMediaElementPlay({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiMediaElementMyMediaElementPlay({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementPlayConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementPlayConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_play\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> crateApiMediaElementMyMediaElementPlaybackRate({required MyMediaElement that });\n\n",
        "api_impl_class_body": "@override Future<double> crateApiMediaElementMyMediaElementPlaybackRate({required MyMediaElement that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementPlaybackRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementPlaybackRateConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_playback_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiMediaElementMyMediaElementSetCurrentTime({required MyMediaElement that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiMediaElementMyMediaElementSetCurrentTime({required MyMediaElement that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementSetCurrentTimeConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementSetCurrentTimeConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_set_current_time\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiMediaElementMyMediaElementSetLoop({required MyMediaElement that , required bool value });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiMediaElementMyMediaElementSetLoop({required MyMediaElement that , required bool value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\nsse_encode_bool(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementSetLoopConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementSetLoopConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_set_loop\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiMediaElementMyMediaElementSetPlaybackRate({required MyMediaElement that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiMediaElementMyMediaElementSetPlaybackRate({required MyMediaElement that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMediaElementMyMediaElementSetPlaybackRateConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMediaElementMyMediaElementSetPlaybackRateConstMeta => const TaskConstMeta(\n            debugName: \"MyMediaElement_set_playback_rate\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<String> crateApiMimiMimi();\n\n",
        "api_impl_class_body": "@override Future<String> crateApiMimiMimi()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiMimiMimiConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiMimiMimiConstMeta => const TaskConstMeta(\n            debugName: \"mimi\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<String> crateApiSimpleGreet({required String name });\n\n",
        "api_impl_class_body": "@override Future<String> crateApiSimpleGreet({required String name })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(name, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiSimpleGreetConstMeta,\n            argValues: [name],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(\n            debugName: \"greet\",\n            argNames: [\"name\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiSimpleInitApp();\n\n",
        "api_impl_class_body": "@override Future<void> crateApiSimpleInitApp()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiSimpleInitAppConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(\n            debugName: \"init_app\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<bool> crateApiSimpleInitTauCore();\n\n",
        "api_impl_class_body": "@override Future<bool> crateApiSimpleInitTauCore()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_bool,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiSimpleInitTauCoreConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiSimpleInitTauCoreConstMeta => const TaskConstMeta(\n            debugName: \"init_tau_core\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> crateApiSimpleRustSetLogLevel({required int level });\n\n",
        "api_impl_class_body": "@override Future<void> crateApiSimpleRustSetLogLevel({required int level })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_i_32(level, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiSimpleRustSetLogLevelConstMeta,\n            argValues: [level],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiSimpleRustSetLogLevelConstMeta => const TaskConstMeta(\n            debugName: \"rust_set_log_level\",\n            argNames: [\"level\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Stream<LogEntry> crateApiSimpleTraceLogger();\n\n",
        "api_impl_class_body": "@override Stream<LogEntry> crateApiSimpleTraceLogger()  { \n            final sink = RustStreamSink<LogEntry>();\n            unawaited(handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_StreamSink_log_entry_Sse(sink, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiSimpleTraceLoggerConstMeta,\n            argValues: [sink],\n            apiImpl: this,\n        )));\n            return sink.stream;\n             }\n\n\n        TaskConstMeta get kCrateApiSimpleTraceLoggerConstMeta => const TaskConstMeta(\n            debugName: \"trace_logger\",\n            argNames: [\"sink\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<String> crateApiTotoToto();\n\n",
        "api_impl_class_body": "@override Future<String> crateApiTotoToto()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiTotoTotoConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiTotoTotoConstMeta => const TaskConstMeta(\n            debugName: \"toto\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<String> crateApiTotoZozo();\n\n",
        "api_impl_class_body": "@override Future<String> crateApiTotoZozo()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiTotoZozoConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiTotoZozoConstMeta => const TaskConstMeta(\n            debugName: \"zozo\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> crateApiZozoSum({required int a , required int b });\n\n",
        "api_impl_class_body": "@override Future<int> crateApiZozoSum({required int a , required int b })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_CastedPrimitive_usize(a, serializer);\nsse_encode_CastedPrimitive_usize(b, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiZozoSumConstMeta,\n            argValues: [a, b],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiZozoSumConstMeta => const TaskConstMeta(\n            debugName: \"sum\",\n            argNames: [\"a\", \"b\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> crateApiZozoSumLongRunning({required int a , required int b });\n\n",
        "api_impl_class_body": "@override Future<int> crateApiZozoSumLongRunning({required int a , required int b })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_CastedPrimitive_usize(a, serializer);\nsse_encode_CastedPrimitive_usize(b, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kCrateApiZozoSumLongRunningConstMeta,\n            argValues: [a, b],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kCrateApiZozoSumLongRunningConstMeta => const TaskConstMeta(\n            debugName: \"sum_long_running\",\n            argNames: [\"a\", \"b\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiAudioBufferDuration({required AudioBuffer that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiAudioBufferDuration({required AudioBuffer that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferDurationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferDurationConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_duration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiAudioBufferFrom({required List<Float32List> samples , required double sampleRate });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiAudioBufferFrom({required List<Float32List> samples , required double sampleRate })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_list_list_prim_f_32_strict(samples, serializer);\nsse_encode_f_32(sampleRate, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 80, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferFromConstMeta,\n            argValues: [samples, sampleRate],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferFromConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_from\",\n            argNames: [\"samples\", \"sampleRate\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioBufferGetChannelData({required AudioBuffer that , required int channelNumber });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioBufferGetChannelData({required AudioBuffer that , required int channelNumber })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\nsse_encode_CastedPrimitive_usize(channelNumber, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferGetChannelDataConstMeta,\n            argValues: [that, channelNumber],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferGetChannelDataConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_get_channel_data\",\n            argNames: [\"that\", \"channelNumber\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioBufferGetChannelDataMut({required AudioBuffer that , required int channelNumber });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioBufferGetChannelDataMut({required AudioBuffer that , required int channelNumber })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\nsse_encode_CastedPrimitive_usize(channelNumber, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferGetChannelDataMutConstMeta,\n            argValues: [that, channelNumber],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferGetChannelDataMutConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_get_channel_data_mut\",\n            argNames: [\"that\", \"channelNumber\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiAudioBufferLength({required AudioBuffer that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiAudioBufferLength({required AudioBuffer that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferLengthConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferLengthConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_length\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiAudioBufferNew({required AudioBufferOptions options });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiAudioBufferNew({required AudioBufferOptions options })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_audio_buffer_options(options, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 84, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferNewConstMeta,\n            argValues: [options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferNewConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_new\",\n            argNames: [\"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiAudioBufferNumberOfChannels({required AudioBuffer that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiAudioBufferNumberOfChannels({required AudioBuffer that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 85, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferNumberOfChannelsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferNumberOfChannelsConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_number_of_channels\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiAudioBufferSampleRate({required AudioBuffer that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiAudioBufferSampleRate({required AudioBuffer that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioBufferSampleRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioBufferSampleRateConstMeta => const TaskConstMeta(\n            debugName: \"AudioBuffer_sample_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AutomationRate> webAudioApiAudioParamAutomationRate({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<AutomationRate> webAudioApiAudioParamAutomationRate({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_automation_rate,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamAutomationRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamAutomationRateConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_automation_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamCancelAndHoldAtTime({required AudioParam that , required double cancelTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamCancelAndHoldAtTime({required AudioParam that , required double cancelTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_64(cancelTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamCancelAndHoldAtTimeConstMeta,\n            argValues: [that, cancelTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamCancelAndHoldAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_cancel_and_hold_at_time\",\n            argNames: [\"that\", \"cancelTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamCancelScheduledValues({required AudioParam that , required double cancelTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamCancelScheduledValues({required AudioParam that , required double cancelTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_64(cancelTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamCancelScheduledValuesConstMeta,\n            argValues: [that, cancelTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamCancelScheduledValuesConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_cancel_scheduled_values\",\n            argNames: [\"that\", \"cancelTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamChannelConfig({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamChannelConfig({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 99, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiAudioParamChannelCount({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiAudioParamChannelCount({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 100, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiAudioParamChannelCountMode({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiAudioParamChannelCountMode({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 101, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiAudioParamChannelInterpretation({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiAudioParamChannelInterpretation({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 102, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamClearOnprocessorerror({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamClearOnprocessorerror({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 103, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiAudioParamDefaultValue({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiAudioParamDefaultValue({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 104, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamDefaultValueConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamDefaultValueConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_default_value\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamDisconnect({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamDisconnect({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 105, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamDisconnectOutput({required AudioParam that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamDisconnectOutput({required AudioParam that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamExponentialRampToValueAtTime({required AudioParam that , required double value , required double endTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamExponentialRampToValueAtTime({required AudioParam that , required double value , required double endTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_32(value, serializer);\nsse_encode_f_64(endTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 107, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamExponentialRampToValueAtTimeConstMeta,\n            argValues: [that, value, endTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamExponentialRampToValueAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_exponential_ramp_to_value_at_time\",\n            argNames: [\"that\", \"value\", \"endTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamFrbOverrideConnect({required AudioParam that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamFrbOverrideConnect({required AudioParam that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamLinearRampToValueAtTime({required AudioParam that , required double value , required double endTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamLinearRampToValueAtTime({required AudioParam that , required double value , required double endTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_32(value, serializer);\nsse_encode_f_64(endTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamLinearRampToValueAtTimeConstMeta,\n            argValues: [that, value, endTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamLinearRampToValueAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_linear_ramp_to_value_at_time\",\n            argNames: [\"that\", \"value\", \"endTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiAudioParamMaxValue({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiAudioParamMaxValue({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamMaxValueConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamMaxValueConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_max_value\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiAudioParamMinValue({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiAudioParamMinValue({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamMinValueConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamMinValueConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_min_value\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiAudioParamNumberOfInputs({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiAudioParamNumberOfInputs({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiAudioParamNumberOfOutputs({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiAudioParamNumberOfOutputs({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamRegistration({required AudioParam that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamRegistration({required AudioParam that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetAutomationRate({required AudioParam that , required AutomationRate value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetAutomationRate({required AudioParam that , required AutomationRate value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_automation_rate(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 115, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetAutomationRateConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetAutomationRateConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_automation_rate\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetChannelCount({required AudioParam that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetChannelCount({required AudioParam that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 116, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetChannelCountMode({required AudioParam that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetChannelCountMode({required AudioParam that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 117, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetChannelInterpretation({required AudioParam that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetChannelInterpretation({required AudioParam that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 118, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetOnProcessorError({required AudioParam that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetOnProcessorError({required AudioParam that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 119, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetTargetAtTime({required AudioParam that , required double value , required double startTime , required double timeConstant });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetTargetAtTime({required AudioParam that , required double value , required double startTime , required double timeConstant })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_32(value, serializer);\nsse_encode_f_64(startTime, serializer);\nsse_encode_f_64(timeConstant, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 120, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetTargetAtTimeConstMeta,\n            argValues: [that, value, startTime, timeConstant],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetTargetAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_target_at_time\",\n            argNames: [\"that\", \"value\", \"startTime\", \"timeConstant\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioParamSetValue({required AudioParam that , required double value });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioParamSetValue({required AudioParam that , required double value })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_32(value, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 121)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetValueConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetValueConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_value\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetValueAtTime({required AudioParam that , required double value , required double startTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetValueAtTime({required AudioParam that , required double value , required double startTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_f_32(value, serializer);\nsse_encode_f_64(startTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 122, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetValueAtTimeConstMeta,\n            argValues: [that, value, startTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetValueAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_value_at_time\",\n            argNames: [\"that\", \"value\", \"startTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioParamSetValueCurveAtTime({required AudioParam that , required List<double> values , required double startTime , required double duration });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioParamSetValueCurveAtTime({required AudioParam that , required List<double> values , required double startTime , required double duration })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\nsse_encode_list_prim_f_32_loose(values, serializer);\nsse_encode_f_64(startTime, serializer);\nsse_encode_f_64(duration, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 123, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamSetValueCurveAtTimeConstMeta,\n            argValues: [that, values, startTime, duration],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamSetValueCurveAtTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_set_value_curve_at_time\",\n            argNames: [\"that\", \"values\", \"startTime\", \"duration\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioParamValue({required AudioParam that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioParamValue({required AudioParam that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 124)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioParamValueConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioParamValueConstMeta => const TaskConstMeta(\n            debugName: \"AudioParam_value\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "AudioBuffer webAudioApiAudioProcessingEventAutoAccessorGetInputBuffer({required AudioProcessingEvent that });\n\n",
        "api_impl_class_body": "@override AudioBuffer webAudioApiAudioProcessingEventAutoAccessorGetInputBuffer({required AudioProcessingEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 125)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorGetInputBufferConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorGetInputBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_get_input_buffer\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "AudioBuffer webAudioApiAudioProcessingEventAutoAccessorGetOutputBuffer({required AudioProcessingEvent that });\n\n",
        "api_impl_class_body": "@override AudioBuffer webAudioApiAudioProcessingEventAutoAccessorGetOutputBuffer({required AudioProcessingEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 126)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorGetOutputBufferConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorGetOutputBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_get_output_buffer\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioProcessingEventAutoAccessorGetPlaybackTime({required AudioProcessingEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioProcessingEventAutoAccessorGetPlaybackTime({required AudioProcessingEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 127)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorGetPlaybackTimeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorGetPlaybackTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_get_playback_time\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioProcessingEventAutoAccessorSetInputBuffer({required AudioProcessingEvent that , required AudioBuffer inputBuffer });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioProcessingEventAutoAccessorSetInputBuffer({required AudioProcessingEvent that , required AudioBuffer inputBuffer })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(inputBuffer, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 128)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorSetInputBufferConstMeta,\n            argValues: [that, inputBuffer],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorSetInputBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_set_input_buffer\",\n            argNames: [\"that\", \"inputBuffer\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioProcessingEventAutoAccessorSetOutputBuffer({required AudioProcessingEvent that , required AudioBuffer outputBuffer });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioProcessingEventAutoAccessorSetOutputBuffer({required AudioProcessingEvent that , required AudioBuffer outputBuffer })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(outputBuffer, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorSetOutputBufferConstMeta,\n            argValues: [that, outputBuffer],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorSetOutputBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_set_output_buffer\",\n            argNames: [\"that\", \"outputBuffer\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioProcessingEventAutoAccessorSetPlaybackTime({required AudioProcessingEvent that , required double playbackTime });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioProcessingEventAutoAccessorSetPlaybackTime({required AudioProcessingEvent that , required double playbackTime })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(that, serializer);\nsse_encode_f_64(playbackTime, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 130)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioProcessingEventAutoAccessorSetPlaybackTimeConstMeta,\n            argValues: [that, playbackTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioProcessingEventAutoAccessorSetPlaybackTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioProcessingEvent_auto_accessor_set_playback_time\",\n            argNames: [\"that\", \"playbackTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioRenderCapacityEventAutoAccessorGetAverageLoad({required AudioRenderCapacityEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioRenderCapacityEventAutoAccessorGetAverageLoad({required AudioRenderCapacityEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 131)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorGetAverageLoadConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorGetAverageLoadConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_get_average_load\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Event webAudioApiAudioRenderCapacityEventAutoAccessorGetEvent({required AudioRenderCapacityEvent that });\n\n",
        "api_impl_class_body": "@override Event webAudioApiAudioRenderCapacityEventAutoAccessorGetEvent({required AudioRenderCapacityEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 132)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorGetEventConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorGetEventConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_get_event\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioRenderCapacityEventAutoAccessorGetPeakLoad({required AudioRenderCapacityEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioRenderCapacityEventAutoAccessorGetPeakLoad({required AudioRenderCapacityEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 133)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorGetPeakLoadConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorGetPeakLoadConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_get_peak_load\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioRenderCapacityEventAutoAccessorGetTimestamp({required AudioRenderCapacityEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioRenderCapacityEventAutoAccessorGetTimestamp({required AudioRenderCapacityEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 134)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorGetTimestampConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorGetTimestampConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_get_timestamp\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiAudioRenderCapacityEventAutoAccessorGetUnderrunRatio({required AudioRenderCapacityEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiAudioRenderCapacityEventAutoAccessorGetUnderrunRatio({required AudioRenderCapacityEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 135)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorGetUnderrunRatioConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorGetUnderrunRatioConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_get_underrun_ratio\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioRenderCapacityEventAutoAccessorSetAverageLoad({required AudioRenderCapacityEvent that , required double averageLoad });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioRenderCapacityEventAutoAccessorSetAverageLoad({required AudioRenderCapacityEvent that , required double averageLoad })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\nsse_encode_f_64(averageLoad, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 136)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorSetAverageLoadConstMeta,\n            argValues: [that, averageLoad],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorSetAverageLoadConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_set_average_load\",\n            argNames: [\"that\", \"averageLoad\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioRenderCapacityEventAutoAccessorSetEvent({required AudioRenderCapacityEvent that , required Event event });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioRenderCapacityEventAutoAccessorSetEvent({required AudioRenderCapacityEvent that , required Event event })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(event, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 137)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorSetEventConstMeta,\n            argValues: [that, event],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorSetEventConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_set_event\",\n            argNames: [\"that\", \"event\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioRenderCapacityEventAutoAccessorSetPeakLoad({required AudioRenderCapacityEvent that , required double peakLoad });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioRenderCapacityEventAutoAccessorSetPeakLoad({required AudioRenderCapacityEvent that , required double peakLoad })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\nsse_encode_f_64(peakLoad, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 138)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorSetPeakLoadConstMeta,\n            argValues: [that, peakLoad],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorSetPeakLoadConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_set_peak_load\",\n            argNames: [\"that\", \"peakLoad\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioRenderCapacityEventAutoAccessorSetTimestamp({required AudioRenderCapacityEvent that , required double timestamp });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioRenderCapacityEventAutoAccessorSetTimestamp({required AudioRenderCapacityEvent that , required double timestamp })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\nsse_encode_f_64(timestamp, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 139)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorSetTimestampConstMeta,\n            argValues: [that, timestamp],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorSetTimestampConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_set_timestamp\",\n            argNames: [\"that\", \"timestamp\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiAudioRenderCapacityEventAutoAccessorSetUnderrunRatio({required AudioRenderCapacityEvent that , required double underrunRatio });\n\n",
        "api_impl_class_body": "@override void webAudioApiAudioRenderCapacityEventAutoAccessorSetUnderrunRatio({required AudioRenderCapacityEvent that , required double underrunRatio })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(that, serializer);\nsse_encode_f_64(underrunRatio, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 140)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityEventAutoAccessorSetUnderrunRatioConstMeta,\n            argValues: [that, underrunRatio],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityEventAutoAccessorSetUnderrunRatioConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacityEvent_auto_accessor_set_underrun_ratio\",\n            argNames: [\"that\", \"underrunRatio\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioRenderCapacityClearOnupdate({required AudioRenderCapacity that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioRenderCapacityClearOnupdate({required AudioRenderCapacity that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 141, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityClearOnupdateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityClearOnupdateConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacity_clear_onupdate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioRenderCapacityStart({required AudioRenderCapacity that , required AudioRenderCapacityOptions options });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioRenderCapacityStart({required AudioRenderCapacity that , required AudioRenderCapacityOptions options })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(that, serializer);\nsse_encode_box_autoadd_audio_render_capacity_options(options, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 142, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityStartConstMeta,\n            argValues: [that, options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityStartConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacity_start\",\n            argNames: [\"that\", \"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiAudioRenderCapacityStop({required AudioRenderCapacity that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiAudioRenderCapacityStop({required AudioRenderCapacity that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 143, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityStopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityStopConstMeta => const TaskConstMeta(\n            debugName: \"AudioRenderCapacity_stop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "String webAudioApiEventType({required Event that });\n\n",
        "api_impl_class_body": "@override String webAudioApiEventType({required Event that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 144)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiEventTypeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiEventTypeConstMeta => const TaskConstMeta(\n            debugName: \"Event_type_\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Event webAudioApiOfflineAudioCompletionEventAutoAccessorGetEvent({required OfflineAudioCompletionEvent that });\n\n",
        "api_impl_class_body": "@override Event webAudioApiOfflineAudioCompletionEventAutoAccessorGetEvent({required OfflineAudioCompletionEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 145)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiOfflineAudioCompletionEventAutoAccessorGetEventConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiOfflineAudioCompletionEventAutoAccessorGetEventConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioCompletionEvent_auto_accessor_get_event\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "AudioBuffer webAudioApiOfflineAudioCompletionEventAutoAccessorGetRenderedBuffer({required OfflineAudioCompletionEvent that });\n\n",
        "api_impl_class_body": "@override AudioBuffer webAudioApiOfflineAudioCompletionEventAutoAccessorGetRenderedBuffer({required OfflineAudioCompletionEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 146)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiOfflineAudioCompletionEventAutoAccessorGetRenderedBufferConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiOfflineAudioCompletionEventAutoAccessorGetRenderedBufferConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioCompletionEvent_auto_accessor_get_rendered_buffer\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiOfflineAudioCompletionEventAutoAccessorSetEvent({required OfflineAudioCompletionEvent that , required Event event });\n\n",
        "api_impl_class_body": "@override void webAudioApiOfflineAudioCompletionEventAutoAccessorSetEvent({required OfflineAudioCompletionEvent that , required Event event })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(event, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 147)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiOfflineAudioCompletionEventAutoAccessorSetEventConstMeta,\n            argValues: [that, event],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiOfflineAudioCompletionEventAutoAccessorSetEventConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioCompletionEvent_auto_accessor_set_event\",\n            argNames: [\"that\", \"event\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiOfflineAudioCompletionEventAutoAccessorSetRenderedBuffer({required OfflineAudioCompletionEvent that , required AudioBuffer renderedBuffer });\n\n",
        "api_impl_class_body": "@override void webAudioApiOfflineAudioCompletionEventAutoAccessorSetRenderedBuffer({required OfflineAudioCompletionEvent that , required AudioBuffer renderedBuffer })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(renderedBuffer, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 148)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiOfflineAudioCompletionEventAutoAccessorSetRenderedBufferConstMeta,\n            argValues: [that, renderedBuffer],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiOfflineAudioCompletionEventAutoAccessorSetRenderedBufferConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioCompletionEvent_auto_accessor_set_rendered_buffer\",\n            argNames: [\"that\", \"renderedBuffer\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PeriodicWave> webAudioApiPeriodicWaveDefault();\n\n",
        "api_impl_class_body": "@override Future<PeriodicWave> webAudioApiPeriodicWaveDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 149, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiPeriodicWaveDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiPeriodicWaveDefaultConstMeta => const TaskConstMeta(\n            debugName: \"PeriodicWave_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioRenderCapacityOptions> webAudioApiAudioRenderCapacityOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioRenderCapacityOptions> webAudioApiAudioRenderCapacityOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 150, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_render_capacity_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiAudioRenderCapacityOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiAudioRenderCapacityOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_render_capacity_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PeriodicWaveOptions> webAudioApiPeriodicWaveOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<PeriodicWaveOptions> webAudioApiPeriodicWaveOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 151, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_periodic_wave_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiPeriodicWaveOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiPeriodicWaveOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"periodic_wave_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextAudioContextBaseLatency({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextAudioContextBaseLatency({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 152, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextBaseLatencyConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextBaseLatencyConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_base_latency\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextClearOnsinkchange({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextClearOnsinkchange({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 153, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextClearOnsinkchangeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextClearOnsinkchangeConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_clear_onsinkchange\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextClearOnstatechange({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextClearOnstatechange({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 154, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextClearOnstatechangeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextClearOnstatechangeConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_clear_onstatechange\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextClose({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextClose({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 155, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCloseConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCloseConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_close\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextCloseSync({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextCloseSync({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 156, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCloseSyncConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCloseSyncConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_close_sync\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AnalyserNode> webAudioApiContextAudioContextCreateAnalyser({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AnalyserNode> webAudioApiContextAudioContextCreateAnalyser({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 157, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateAnalyserConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateAnalyserConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_analyser\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<(AudioParam,AudioParamId)> webAudioApiContextAudioContextCreateAudioParam({required AudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest });\n\n",
        "api_impl_class_body": "@override Future<(AudioParam,AudioParamId)> webAudioApiContextAudioContextCreateAudioParam({required AudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_box_autoadd_audio_param_descriptor(opts, serializer);\nsse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 158, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateAudioParamConstMeta,\n            argValues: [that, opts, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateAudioParamConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_audio_param\",\n            argNames: [\"that\", \"opts\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterNode> webAudioApiContextAudioContextCreateBiquadFilter({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterNode> webAudioApiContextAudioContextCreateBiquadFilter({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 159, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateBiquadFilterConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateBiquadFilterConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_biquad_filter\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextAudioContextCreateBuffer({required AudioContext that , required int numberOfChannels , required int length , required double sampleRate });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextAudioContextCreateBuffer({required AudioContext that , required int numberOfChannels , required int length , required double sampleRate })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfChannels, serializer);\nsse_encode_CastedPrimitive_usize(length, serializer);\nsse_encode_f_32(sampleRate, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 160, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateBufferConstMeta,\n            argValues: [that, numberOfChannels, length, sampleRate],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_buffer\",\n            argNames: [\"that\", \"numberOfChannels\", \"length\", \"sampleRate\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBufferSourceNode> webAudioApiContextAudioContextCreateBufferSource({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioBufferSourceNode> webAudioApiContextAudioContextCreateBufferSource({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 161, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateBufferSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateBufferSourceConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_buffer_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelMergerNode> webAudioApiContextAudioContextCreateChannelMerger({required AudioContext that , required int numberOfInputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelMergerNode> webAudioApiContextAudioContextCreateChannelMerger({required AudioContext that , required int numberOfInputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 162, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateChannelMergerConstMeta,\n            argValues: [that, numberOfInputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateChannelMergerConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_channel_merger\",\n            argNames: [\"that\", \"numberOfInputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelSplitterNode> webAudioApiContextAudioContextCreateChannelSplitter({required AudioContext that , required int numberOfOutputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelSplitterNode> webAudioApiContextAudioContextCreateChannelSplitter({required AudioContext that , required int numberOfOutputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 163, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateChannelSplitterConstMeta,\n            argValues: [that, numberOfOutputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateChannelSplitterConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_channel_splitter\",\n            argNames: [\"that\", \"numberOfOutputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConstantSourceNode> webAudioApiContextAudioContextCreateConstantSource({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConstantSourceNode> webAudioApiContextAudioContextCreateConstantSource({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 164, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateConstantSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateConstantSourceConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_constant_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConvolverNode> webAudioApiContextAudioContextCreateConvolver({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConvolverNode> webAudioApiContextAudioContextCreateConvolver({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 165, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateConvolverConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateConvolverConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_convolver\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DelayNode> webAudioApiContextAudioContextCreateDelay({required AudioContext that , required double maxDelayTime });\n\n",
        "api_impl_class_body": "@override Future<DelayNode> webAudioApiContextAudioContextCreateDelay({required AudioContext that , required double maxDelayTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_f_64(maxDelayTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 166, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateDelayConstMeta,\n            argValues: [that, maxDelayTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateDelayConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_delay\",\n            argNames: [\"that\", \"maxDelayTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DynamicsCompressorNode> webAudioApiContextAudioContextCreateDynamicsCompressor({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<DynamicsCompressorNode> webAudioApiContextAudioContextCreateDynamicsCompressor({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 167, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateDynamicsCompressorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateDynamicsCompressorConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_dynamics_compressor\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<GainNode> webAudioApiContextAudioContextCreateGain({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<GainNode> webAudioApiContextAudioContextCreateGain({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 168, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateGainConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateGainConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_gain\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<IirFilterNode> webAudioApiContextAudioContextCreateIirFilter({required AudioContext that , required List<double> feedforward , required List<double> feedback });\n\n",
        "api_impl_class_body": "@override Future<IirFilterNode> webAudioApiContextAudioContextCreateIirFilter({required AudioContext that , required List<double> feedforward , required List<double> feedback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_list_prim_f_64_loose(feedforward, serializer);\nsse_encode_list_prim_f_64_loose(feedback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 169, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateIirFilterConstMeta,\n            argValues: [that, feedforward, feedback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateIirFilterConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_iir_filter\",\n            argNames: [\"that\", \"feedforward\", \"feedback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStreamAudioDestinationNode> webAudioApiContextAudioContextCreateMediaStreamDestination({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<MediaStreamAudioDestinationNode> webAudioApiContextAudioContextCreateMediaStreamDestination({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 170, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateMediaStreamDestinationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateMediaStreamDestinationConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_media_stream_destination\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStreamAudioSourceNode> webAudioApiContextAudioContextCreateMediaStreamSource({required AudioContext that , required MediaStream media });\n\n",
        "api_impl_class_body": "@override Future<MediaStreamAudioSourceNode> webAudioApiContextAudioContextCreateMediaStreamSource({required AudioContext that , required MediaStream media })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(media, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 171, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateMediaStreamSourceConstMeta,\n            argValues: [that, media],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateMediaStreamSourceConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_media_stream_source\",\n            argNames: [\"that\", \"media\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStreamTrackAudioSourceNode> webAudioApiContextAudioContextCreateMediaStreamTrackSource({required AudioContext that , required MediaStreamTrack media });\n\n",
        "api_impl_class_body": "@override Future<MediaStreamTrackAudioSourceNode> webAudioApiContextAudioContextCreateMediaStreamTrackSource({required AudioContext that , required MediaStreamTrack media })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(media, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 172, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateMediaStreamTrackSourceConstMeta,\n            argValues: [that, media],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateMediaStreamTrackSourceConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_media_stream_track_source\",\n            argNames: [\"that\", \"media\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorNode> webAudioApiContextAudioContextCreateOscillator({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<OscillatorNode> webAudioApiContextAudioContextCreateOscillator({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 173, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateOscillatorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateOscillatorConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_oscillator\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PannerNode> webAudioApiContextAudioContextCreatePanner({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<PannerNode> webAudioApiContextAudioContextCreatePanner({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 174, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreatePannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreatePannerConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PeriodicWave> webAudioApiContextAudioContextCreatePeriodicWave({required AudioContext that , required PeriodicWaveOptions options });\n\n",
        "api_impl_class_body": "@override Future<PeriodicWave> webAudioApiContextAudioContextCreatePeriodicWave({required AudioContext that , required PeriodicWaveOptions options })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_box_autoadd_periodic_wave_options(options, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 175, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreatePeriodicWaveConstMeta,\n            argValues: [that, options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreatePeriodicWaveConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_periodic_wave\",\n            argNames: [\"that\", \"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ScriptProcessorNode> webAudioApiContextAudioContextCreateScriptProcessor({required AudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels });\n\n",
        "api_impl_class_body": "@override Future<ScriptProcessorNode> webAudioApiContextAudioContextCreateScriptProcessor({required AudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(bufferSize, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputChannels, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputChannels, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 176, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateScriptProcessorConstMeta,\n            argValues: [that, bufferSize, numberOfInputChannels, numberOfOutputChannels],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateScriptProcessorConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_script_processor\",\n            argNames: [\"that\", \"bufferSize\", \"numberOfInputChannels\", \"numberOfOutputChannels\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<StereoPannerNode> webAudioApiContextAudioContextCreateStereoPanner({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<StereoPannerNode> webAudioApiContextAudioContextCreateStereoPanner({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 177, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateStereoPannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateStereoPannerConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_stereo_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<WaveShaperNode> webAudioApiContextAudioContextCreateWaveShaper({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<WaveShaperNode> webAudioApiContextAudioContextCreateWaveShaper({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 178, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCreateWaveShaperConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCreateWaveShaperConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_create_wave_shaper\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextAudioContextCurrentTime({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextAudioContextCurrentTime({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 179, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextCurrentTimeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextCurrentTimeConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_current_time\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContext> webAudioApiContextAudioContextDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioContext> webAudioApiContextAudioContextDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 180, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextDefaultConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioDestinationNode> webAudioApiContextAudioContextDestination({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioDestinationNode> webAudioApiContextAudioContextDestination({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 181, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextDestinationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextDestinationConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_destination\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaElementAudioSourceNode> webAudioApiContextAudioContextFrbOverrideCreateMediaElementSource({required AudioContext that , required MyMediaElement mediaElement });\n\n",
        "api_impl_class_body": "@override Future<MediaElementAudioSourceNode> webAudioApiContextAudioContextFrbOverrideCreateMediaElementSource({required AudioContext that , required MyMediaElement mediaElement })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(mediaElement, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 182, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextFrbOverrideCreateMediaElementSourceConstMeta,\n            argValues: [that, mediaElement],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextFrbOverrideCreateMediaElementSourceConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_frb_override_create_media_element_source\",\n            argNames: [\"that\", \"mediaElement\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextAudioContextFrbOverrideDecodeAudioDataSync({required AudioContext that , required String inputPath });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextAudioContextFrbOverrideDecodeAudioDataSync({required AudioContext that , required String inputPath })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_String(inputPath, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 183, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: sse_decode_AnyhowException,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextFrbOverrideDecodeAudioDataSyncConstMeta,\n            argValues: [that, inputPath],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextFrbOverrideDecodeAudioDataSyncConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_frb_override_decode_audio_data_sync\",\n            argNames: [\"that\", \"inputPath\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioListener> webAudioApiContextAudioContextListener({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioListener> webAudioApiContextAudioContextListener({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 184, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextListenerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextListenerConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_listener\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "AudioContext webAudioApiContextAudioContextNew({required AudioContextOptions options });\n\n",
        "api_impl_class_body": "@override AudioContext webAudioApiContextAudioContextNew({required AudioContextOptions options })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_audio_context_options(options, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 185)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextNewConstMeta,\n            argValues: [options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextNewConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_new\",\n            argNames: [\"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextAudioContextOutputLatency({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextAudioContextOutputLatency({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 186, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextOutputLatencyConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextOutputLatencyConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_output_latency\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextRenderCapacity({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextRenderCapacity({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 187, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextRenderCapacityConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextRenderCapacityConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_render_capacity\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextResumeSync({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextResumeSync({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 188, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextResumeSyncConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextResumeSyncConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_resume_sync\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextAudioContextSampleRate({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextAudioContextSampleRate({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 189, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSampleRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSampleRateConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_sample_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextSetOnStateChange({required AudioContext that , required FutureOr<void> Function(Event) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextSetOnStateChange({required AudioContext that , required FutureOr<void> Function(Event) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 190, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSetOnStateChangeConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSetOnStateChangeConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_set_on_state_change\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextSetSinkId({required AudioContext that , required String sinkId });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextSetSinkId({required AudioContext that , required String sinkId })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\nsse_encode_String(sinkId, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 191, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: sse_decode_AnyhowException,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSetSinkIdConstMeta,\n            argValues: [that, sinkId],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSetSinkIdConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_set_sink_id\",\n            argNames: [\"that\", \"sinkId\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<String> webAudioApiContextAudioContextSinkId({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<String> webAudioApiContextAudioContextSinkId({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 192, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_String,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSinkIdConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSinkIdConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_sink_id\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextState> webAudioApiContextAudioContextState({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioContextState> webAudioApiContextAudioContextState({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 193, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_state,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextStateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextStateConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_state\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextSuspend({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextSuspend({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 194, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSuspendConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSuspendConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_suspend\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextAudioContextSuspendSync({required AudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextAudioContextSuspendSync({required AudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 195, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextSuspendSyncConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextSuspendSyncConstMeta => const TaskConstMeta(\n            debugName: \"AudioContext_suspend_sync\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextConcreteBaseAudioContextClearOnstatechange({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextConcreteBaseAudioContextClearOnstatechange({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 196, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextClearOnstatechangeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextClearOnstatechangeConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_clear_onstatechange\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AnalyserNode> webAudioApiContextConcreteBaseAudioContextCreateAnalyser({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AnalyserNode> webAudioApiContextConcreteBaseAudioContextCreateAnalyser({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 197, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateAnalyserConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateAnalyserConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_analyser\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<(AudioParam,AudioParamId)> webAudioApiContextConcreteBaseAudioContextCreateAudioParam({required ConcreteBaseAudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest });\n\n",
        "api_impl_class_body": "@override Future<(AudioParam,AudioParamId)> webAudioApiContextConcreteBaseAudioContextCreateAudioParam({required ConcreteBaseAudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_box_autoadd_audio_param_descriptor(opts, serializer);\nsse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 198, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateAudioParamConstMeta,\n            argValues: [that, opts, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateAudioParamConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_audio_param\",\n            argNames: [\"that\", \"opts\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterNode> webAudioApiContextConcreteBaseAudioContextCreateBiquadFilter({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterNode> webAudioApiContextConcreteBaseAudioContextCreateBiquadFilter({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 199, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateBiquadFilterConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateBiquadFilterConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_biquad_filter\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextConcreteBaseAudioContextCreateBuffer({required ConcreteBaseAudioContext that , required int numberOfChannels , required int length , required double sampleRate });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextConcreteBaseAudioContextCreateBuffer({required ConcreteBaseAudioContext that , required int numberOfChannels , required int length , required double sampleRate })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfChannels, serializer);\nsse_encode_CastedPrimitive_usize(length, serializer);\nsse_encode_f_32(sampleRate, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 200, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateBufferConstMeta,\n            argValues: [that, numberOfChannels, length, sampleRate],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateBufferConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_buffer\",\n            argNames: [\"that\", \"numberOfChannels\", \"length\", \"sampleRate\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBufferSourceNode> webAudioApiContextConcreteBaseAudioContextCreateBufferSource({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioBufferSourceNode> webAudioApiContextConcreteBaseAudioContextCreateBufferSource({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 201, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateBufferSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateBufferSourceConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_buffer_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelMergerNode> webAudioApiContextConcreteBaseAudioContextCreateChannelMerger({required ConcreteBaseAudioContext that , required int numberOfInputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelMergerNode> webAudioApiContextConcreteBaseAudioContextCreateChannelMerger({required ConcreteBaseAudioContext that , required int numberOfInputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 202, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateChannelMergerConstMeta,\n            argValues: [that, numberOfInputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateChannelMergerConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_channel_merger\",\n            argNames: [\"that\", \"numberOfInputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelSplitterNode> webAudioApiContextConcreteBaseAudioContextCreateChannelSplitter({required ConcreteBaseAudioContext that , required int numberOfOutputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelSplitterNode> webAudioApiContextConcreteBaseAudioContextCreateChannelSplitter({required ConcreteBaseAudioContext that , required int numberOfOutputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 203, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateChannelSplitterConstMeta,\n            argValues: [that, numberOfOutputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateChannelSplitterConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_channel_splitter\",\n            argNames: [\"that\", \"numberOfOutputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConstantSourceNode> webAudioApiContextConcreteBaseAudioContextCreateConstantSource({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConstantSourceNode> webAudioApiContextConcreteBaseAudioContextCreateConstantSource({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 204, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateConstantSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateConstantSourceConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_constant_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConvolverNode> webAudioApiContextConcreteBaseAudioContextCreateConvolver({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConvolverNode> webAudioApiContextConcreteBaseAudioContextCreateConvolver({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 205, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateConvolverConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateConvolverConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_convolver\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DelayNode> webAudioApiContextConcreteBaseAudioContextCreateDelay({required ConcreteBaseAudioContext that , required double maxDelayTime });\n\n",
        "api_impl_class_body": "@override Future<DelayNode> webAudioApiContextConcreteBaseAudioContextCreateDelay({required ConcreteBaseAudioContext that , required double maxDelayTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_f_64(maxDelayTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 206, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateDelayConstMeta,\n            argValues: [that, maxDelayTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateDelayConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_delay\",\n            argNames: [\"that\", \"maxDelayTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DynamicsCompressorNode> webAudioApiContextConcreteBaseAudioContextCreateDynamicsCompressor({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<DynamicsCompressorNode> webAudioApiContextConcreteBaseAudioContextCreateDynamicsCompressor({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 207, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateDynamicsCompressorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateDynamicsCompressorConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_dynamics_compressor\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<GainNode> webAudioApiContextConcreteBaseAudioContextCreateGain({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<GainNode> webAudioApiContextConcreteBaseAudioContextCreateGain({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 208, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateGainConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateGainConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_gain\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<IirFilterNode> webAudioApiContextConcreteBaseAudioContextCreateIirFilter({required ConcreteBaseAudioContext that , required List<double> feedforward , required List<double> feedback });\n\n",
        "api_impl_class_body": "@override Future<IirFilterNode> webAudioApiContextConcreteBaseAudioContextCreateIirFilter({required ConcreteBaseAudioContext that , required List<double> feedforward , required List<double> feedback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_list_prim_f_64_loose(feedforward, serializer);\nsse_encode_list_prim_f_64_loose(feedback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 209, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateIirFilterConstMeta,\n            argValues: [that, feedforward, feedback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateIirFilterConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_iir_filter\",\n            argNames: [\"that\", \"feedforward\", \"feedback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorNode> webAudioApiContextConcreteBaseAudioContextCreateOscillator({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<OscillatorNode> webAudioApiContextConcreteBaseAudioContextCreateOscillator({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 210, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateOscillatorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateOscillatorConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_oscillator\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PannerNode> webAudioApiContextConcreteBaseAudioContextCreatePanner({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<PannerNode> webAudioApiContextConcreteBaseAudioContextCreatePanner({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 211, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreatePannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreatePannerConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PeriodicWave> webAudioApiContextConcreteBaseAudioContextCreatePeriodicWave({required ConcreteBaseAudioContext that , required PeriodicWaveOptions options });\n\n",
        "api_impl_class_body": "@override Future<PeriodicWave> webAudioApiContextConcreteBaseAudioContextCreatePeriodicWave({required ConcreteBaseAudioContext that , required PeriodicWaveOptions options })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_box_autoadd_periodic_wave_options(options, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 212, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreatePeriodicWaveConstMeta,\n            argValues: [that, options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreatePeriodicWaveConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_periodic_wave\",\n            argNames: [\"that\", \"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ScriptProcessorNode> webAudioApiContextConcreteBaseAudioContextCreateScriptProcessor({required ConcreteBaseAudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels });\n\n",
        "api_impl_class_body": "@override Future<ScriptProcessorNode> webAudioApiContextConcreteBaseAudioContextCreateScriptProcessor({required ConcreteBaseAudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(bufferSize, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputChannels, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputChannels, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 213, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateScriptProcessorConstMeta,\n            argValues: [that, bufferSize, numberOfInputChannels, numberOfOutputChannels],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateScriptProcessorConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_script_processor\",\n            argNames: [\"that\", \"bufferSize\", \"numberOfInputChannels\", \"numberOfOutputChannels\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<StereoPannerNode> webAudioApiContextConcreteBaseAudioContextCreateStereoPanner({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<StereoPannerNode> webAudioApiContextConcreteBaseAudioContextCreateStereoPanner({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 214, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateStereoPannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateStereoPannerConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_stereo_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<WaveShaperNode> webAudioApiContextConcreteBaseAudioContextCreateWaveShaper({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<WaveShaperNode> webAudioApiContextConcreteBaseAudioContextCreateWaveShaper({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 215, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCreateWaveShaperConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCreateWaveShaperConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_create_wave_shaper\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextConcreteBaseAudioContextCurrentTime({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextConcreteBaseAudioContextCurrentTime({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 216, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextCurrentTimeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextCurrentTimeConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_current_time\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioDestinationNode> webAudioApiContextConcreteBaseAudioContextDestination({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioDestinationNode> webAudioApiContextConcreteBaseAudioContextDestination({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 217, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextDestinationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextDestinationConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_destination\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioListener> webAudioApiContextConcreteBaseAudioContextListener({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioListener> webAudioApiContextConcreteBaseAudioContextListener({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 218, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextListenerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextListenerConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_listener\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextConcreteBaseAudioContextMarkCycleBreaker({required ConcreteBaseAudioContext that , required AudioContextRegistration reg });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextConcreteBaseAudioContextMarkCycleBreaker({required ConcreteBaseAudioContext that , required AudioContextRegistration reg })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\nsse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(reg, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 219, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextMarkCycleBreakerConstMeta,\n            argValues: [that, reg],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextMarkCycleBreakerConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_mark_cycle_breaker\",\n            argNames: [\"that\", \"reg\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextConcreteBaseAudioContextSampleRate({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextConcreteBaseAudioContextSampleRate({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 220, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextSampleRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextSampleRateConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_sample_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextState> webAudioApiContextConcreteBaseAudioContextState({required ConcreteBaseAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioContextState> webAudioApiContextConcreteBaseAudioContextState({required ConcreteBaseAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 221, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_state,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextConcreteBaseAudioContextStateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextConcreteBaseAudioContextStateConstMeta => const TaskConstMeta(\n            debugName: \"ConcreteBaseAudioContext_state\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextOfflineAudioContextClearOncomplete({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextOfflineAudioContextClearOncomplete({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 222, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextClearOncompleteConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextClearOncompleteConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_clear_oncomplete\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextOfflineAudioContextClearOnstatechange({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextOfflineAudioContextClearOnstatechange({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 223, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextClearOnstatechangeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextClearOnstatechangeConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_clear_onstatechange\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AnalyserNode> webAudioApiContextOfflineAudioContextCreateAnalyser({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AnalyserNode> webAudioApiContextOfflineAudioContextCreateAnalyser({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 224, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateAnalyserConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateAnalyserConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_analyser\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<(AudioParam,AudioParamId)> webAudioApiContextOfflineAudioContextCreateAudioParam({required OfflineAudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest });\n\n",
        "api_impl_class_body": "@override Future<(AudioParam,AudioParamId)> webAudioApiContextOfflineAudioContextCreateAudioParam({required OfflineAudioContext that , required AudioParamDescriptor opts , required AudioContextRegistration dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_box_autoadd_audio_param_descriptor(opts, serializer);\nsse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 225, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateAudioParamConstMeta,\n            argValues: [that, opts, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateAudioParamConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_audio_param\",\n            argNames: [\"that\", \"opts\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterNode> webAudioApiContextOfflineAudioContextCreateBiquadFilter({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterNode> webAudioApiContextOfflineAudioContextCreateBiquadFilter({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 226, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateBiquadFilterConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateBiquadFilterConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_biquad_filter\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextOfflineAudioContextCreateBuffer({required OfflineAudioContext that , required int numberOfChannels , required int length , required double sampleRate });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextOfflineAudioContextCreateBuffer({required OfflineAudioContext that , required int numberOfChannels , required int length , required double sampleRate })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfChannels, serializer);\nsse_encode_CastedPrimitive_usize(length, serializer);\nsse_encode_f_32(sampleRate, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 227, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateBufferConstMeta,\n            argValues: [that, numberOfChannels, length, sampleRate],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateBufferConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_buffer\",\n            argNames: [\"that\", \"numberOfChannels\", \"length\", \"sampleRate\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBufferSourceNode> webAudioApiContextOfflineAudioContextCreateBufferSource({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioBufferSourceNode> webAudioApiContextOfflineAudioContextCreateBufferSource({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 228, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateBufferSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateBufferSourceConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_buffer_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelMergerNode> webAudioApiContextOfflineAudioContextCreateChannelMerger({required OfflineAudioContext that , required int numberOfInputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelMergerNode> webAudioApiContextOfflineAudioContextCreateChannelMerger({required OfflineAudioContext that , required int numberOfInputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 229, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateChannelMergerConstMeta,\n            argValues: [that, numberOfInputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateChannelMergerConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_channel_merger\",\n            argNames: [\"that\", \"numberOfInputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelSplitterNode> webAudioApiContextOfflineAudioContextCreateChannelSplitter({required OfflineAudioContext that , required int numberOfOutputs });\n\n",
        "api_impl_class_body": "@override Future<ChannelSplitterNode> webAudioApiContextOfflineAudioContextCreateChannelSplitter({required OfflineAudioContext that , required int numberOfOutputs })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputs, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 230, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateChannelSplitterConstMeta,\n            argValues: [that, numberOfOutputs],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateChannelSplitterConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_channel_splitter\",\n            argNames: [\"that\", \"numberOfOutputs\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConstantSourceNode> webAudioApiContextOfflineAudioContextCreateConstantSource({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConstantSourceNode> webAudioApiContextOfflineAudioContextCreateConstantSource({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 231, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateConstantSourceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateConstantSourceConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_constant_source\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConvolverNode> webAudioApiContextOfflineAudioContextCreateConvolver({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<ConvolverNode> webAudioApiContextOfflineAudioContextCreateConvolver({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 232, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateConvolverConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateConvolverConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_convolver\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DelayNode> webAudioApiContextOfflineAudioContextCreateDelay({required OfflineAudioContext that , required double maxDelayTime });\n\n",
        "api_impl_class_body": "@override Future<DelayNode> webAudioApiContextOfflineAudioContextCreateDelay({required OfflineAudioContext that , required double maxDelayTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_f_64(maxDelayTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 233, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateDelayConstMeta,\n            argValues: [that, maxDelayTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateDelayConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_delay\",\n            argNames: [\"that\", \"maxDelayTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DynamicsCompressorNode> webAudioApiContextOfflineAudioContextCreateDynamicsCompressor({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<DynamicsCompressorNode> webAudioApiContextOfflineAudioContextCreateDynamicsCompressor({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 234, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateDynamicsCompressorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateDynamicsCompressorConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_dynamics_compressor\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<GainNode> webAudioApiContextOfflineAudioContextCreateGain({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<GainNode> webAudioApiContextOfflineAudioContextCreateGain({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 235, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateGainConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateGainConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_gain\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<IirFilterNode> webAudioApiContextOfflineAudioContextCreateIirFilter({required OfflineAudioContext that , required List<double> feedforward , required List<double> feedback });\n\n",
        "api_impl_class_body": "@override Future<IirFilterNode> webAudioApiContextOfflineAudioContextCreateIirFilter({required OfflineAudioContext that , required List<double> feedforward , required List<double> feedback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_list_prim_f_64_loose(feedforward, serializer);\nsse_encode_list_prim_f_64_loose(feedback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 236, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateIirFilterConstMeta,\n            argValues: [that, feedforward, feedback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateIirFilterConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_iir_filter\",\n            argNames: [\"that\", \"feedforward\", \"feedback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorNode> webAudioApiContextOfflineAudioContextCreateOscillator({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<OscillatorNode> webAudioApiContextOfflineAudioContextCreateOscillator({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 237, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateOscillatorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateOscillatorConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_oscillator\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PannerNode> webAudioApiContextOfflineAudioContextCreatePanner({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<PannerNode> webAudioApiContextOfflineAudioContextCreatePanner({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 238, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreatePannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreatePannerConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PeriodicWave> webAudioApiContextOfflineAudioContextCreatePeriodicWave({required OfflineAudioContext that , required PeriodicWaveOptions options });\n\n",
        "api_impl_class_body": "@override Future<PeriodicWave> webAudioApiContextOfflineAudioContextCreatePeriodicWave({required OfflineAudioContext that , required PeriodicWaveOptions options })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_box_autoadd_periodic_wave_options(options, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 239, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreatePeriodicWaveConstMeta,\n            argValues: [that, options],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreatePeriodicWaveConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_periodic_wave\",\n            argNames: [\"that\", \"options\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ScriptProcessorNode> webAudioApiContextOfflineAudioContextCreateScriptProcessor({required OfflineAudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels });\n\n",
        "api_impl_class_body": "@override Future<ScriptProcessorNode> webAudioApiContextOfflineAudioContextCreateScriptProcessor({required OfflineAudioContext that , required int bufferSize , required int numberOfInputChannels , required int numberOfOutputChannels })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_CastedPrimitive_usize(bufferSize, serializer);\nsse_encode_CastedPrimitive_usize(numberOfInputChannels, serializer);\nsse_encode_CastedPrimitive_usize(numberOfOutputChannels, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 240, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateScriptProcessorConstMeta,\n            argValues: [that, bufferSize, numberOfInputChannels, numberOfOutputChannels],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateScriptProcessorConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_script_processor\",\n            argNames: [\"that\", \"bufferSize\", \"numberOfInputChannels\", \"numberOfOutputChannels\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<StereoPannerNode> webAudioApiContextOfflineAudioContextCreateStereoPanner({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<StereoPannerNode> webAudioApiContextOfflineAudioContextCreateStereoPanner({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 241, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateStereoPannerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateStereoPannerConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_stereo_panner\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<WaveShaperNode> webAudioApiContextOfflineAudioContextCreateWaveShaper({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<WaveShaperNode> webAudioApiContextOfflineAudioContextCreateWaveShaper({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 242, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCreateWaveShaperConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCreateWaveShaperConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_create_wave_shaper\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextOfflineAudioContextCurrentTime({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextOfflineAudioContextCurrentTime({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 243, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextCurrentTimeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextCurrentTimeConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_current_time\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioDestinationNode> webAudioApiContextOfflineAudioContextDestination({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioDestinationNode> webAudioApiContextOfflineAudioContextDestination({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 244, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextDestinationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextDestinationConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_destination\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiContextOfflineAudioContextLength({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiContextOfflineAudioContextLength({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 245, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextLengthConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextLengthConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_length\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioListener> webAudioApiContextOfflineAudioContextListener({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioListener> webAudioApiContextOfflineAudioContextListener({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 246, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextListenerConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextListenerConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_listener\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OfflineAudioContext> webAudioApiContextOfflineAudioContextNew({required int numberOfChannels , required int length , required double sampleRate });\n\n",
        "api_impl_class_body": "@override Future<OfflineAudioContext> webAudioApiContextOfflineAudioContextNew({required int numberOfChannels , required int length , required double sampleRate })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_CastedPrimitive_usize(numberOfChannels, serializer);\nsse_encode_CastedPrimitive_usize(length, serializer);\nsse_encode_f_32(sampleRate, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 247, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextNewConstMeta,\n            argValues: [numberOfChannels, length, sampleRate],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextNewConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_new\",\n            argNames: [\"numberOfChannels\", \"length\", \"sampleRate\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextOfflineAudioContextResume({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextOfflineAudioContextResume({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 248, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextResumeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextResumeConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_resume\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiContextOfflineAudioContextSampleRate({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiContextOfflineAudioContextSampleRate({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 249, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextSampleRateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextSampleRateConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_sample_rate\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextOfflineAudioContextSetOnComplete({required OfflineAudioContext that , required FutureOr<void> Function(OfflineAudioCompletionEvent) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextOfflineAudioContextSetOnComplete({required OfflineAudioContext that , required FutureOr<void> Function(OfflineAudioCompletionEvent) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 250, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextSetOnCompleteConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextSetOnCompleteConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_set_on_complete\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextOfflineAudioContextStartRendering({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextOfflineAudioContextStartRendering({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 251, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextStartRenderingConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextStartRenderingConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_start_rendering\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBuffer> webAudioApiContextOfflineAudioContextStartRenderingSync({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioBuffer> webAudioApiContextOfflineAudioContextStartRenderingSync({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 252, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextStartRenderingSyncConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextStartRenderingSyncConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_start_rendering_sync\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextState> webAudioApiContextOfflineAudioContextState({required OfflineAudioContext that });\n\n",
        "api_impl_class_body": "@override Future<AudioContextState> webAudioApiContextOfflineAudioContextState({required OfflineAudioContext that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 253, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_state,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextStateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextStateConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_state\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiContextOfflineAudioContextSuspend({required OfflineAudioContext that , required double suspendTime });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiContextOfflineAudioContextSuspend({required OfflineAudioContext that , required double suspendTime })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(that, serializer);\nsse_encode_f_64(suspendTime, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 254, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextOfflineAudioContextSuspendConstMeta,\n            argValues: [that, suspendTime],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextOfflineAudioContextSuspendConstMeta => const TaskConstMeta(\n            debugName: \"OfflineAudioContext_suspend\",\n            argNames: [\"that\", \"suspendTime\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextLatencyCategory> webAudioApiContextAudioContextLatencyCategoryDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioContextLatencyCategory> webAudioApiContextAudioContextLatencyCategoryDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 280, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_latency_category,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextLatencyCategoryDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextLatencyCategoryDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_context_latency_category_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextOptions> webAudioApiContextAudioContextOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioContextOptions> webAudioApiContextAudioContextOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 281, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_context_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioContextRenderSizeCategory> webAudioApiContextAudioContextRenderSizeCategoryDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioContextRenderSizeCategory> webAudioApiContextAudioContextRenderSizeCategoryDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 282, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_context_render_size_category,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiContextAudioContextRenderSizeCategoryDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiContextAudioContextRenderSizeCategoryDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_context_render_size_category_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStream> webAudioApiMediaDevicesGetUserMediaSync({required MediaStreamConstraints constraints });\n\n",
        "api_impl_class_body": "@override Future<MediaStream> webAudioApiMediaDevicesGetUserMediaSync({required MediaStreamConstraints constraints })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(constraints, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 283, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaDevicesGetUserMediaSyncConstMeta,\n            argValues: [constraints],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaDevicesGetUserMediaSyncConstMeta => const TaskConstMeta(\n            debugName: \"get_user_media_sync\",\n            argNames: [\"constraints\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaTrackConstraints> webAudioApiMediaDevicesMediaTrackConstraintsDefault();\n\n",
        "api_impl_class_body": "@override Future<MediaTrackConstraints> webAudioApiMediaDevicesMediaTrackConstraintsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 284, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_media_track_constraints,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaDevicesMediaTrackConstraintsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaDevicesMediaTrackConstraintsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"media_track_constraints_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Uint8List webAudioApiMediaRecorderBlobEventAutoAccessorGetBlob({required BlobEvent that });\n\n",
        "api_impl_class_body": "@override Uint8List webAudioApiMediaRecorderBlobEventAutoAccessorGetBlob({required BlobEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 285)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_list_prim_u_8_strict,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorGetBlobConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorGetBlobConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_get_blob\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Event webAudioApiMediaRecorderBlobEventAutoAccessorGetEvent({required BlobEvent that });\n\n",
        "api_impl_class_body": "@override Event webAudioApiMediaRecorderBlobEventAutoAccessorGetEvent({required BlobEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 286)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorGetEventConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorGetEventConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_get_event\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "double webAudioApiMediaRecorderBlobEventAutoAccessorGetTimecode({required BlobEvent that });\n\n",
        "api_impl_class_body": "@override double webAudioApiMediaRecorderBlobEventAutoAccessorGetTimecode({required BlobEvent that })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 287)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorGetTimecodeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorGetTimecodeConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_get_timecode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiMediaRecorderBlobEventAutoAccessorSetBlob({required BlobEvent that , required Uint8List blob });\n\n",
        "api_impl_class_body": "@override void webAudioApiMediaRecorderBlobEventAutoAccessorSetBlob({required BlobEvent that , required Uint8List blob })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\nsse_encode_list_prim_u_8_strict(blob, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 288)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorSetBlobConstMeta,\n            argValues: [that, blob],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorSetBlobConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_set_blob\",\n            argNames: [\"that\", \"blob\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiMediaRecorderBlobEventAutoAccessorSetEvent({required BlobEvent that , required Event event });\n\n",
        "api_impl_class_body": "@override void webAudioApiMediaRecorderBlobEventAutoAccessorSetEvent({required BlobEvent that , required Event event })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(event, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 289)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorSetEventConstMeta,\n            argValues: [that, event],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorSetEventConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_set_event\",\n            argNames: [\"that\", \"event\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "void webAudioApiMediaRecorderBlobEventAutoAccessorSetTimecode({required BlobEvent that , required double timecode });\n\n",
        "api_impl_class_body": "@override void webAudioApiMediaRecorderBlobEventAutoAccessorSetTimecode({required BlobEvent that , required double timecode })  { return handler.executeSync(SyncTask(\n            callFfi: () {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(that, serializer);\nsse_encode_f_64(timecode, serializer);\n            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 290)!;\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderBlobEventAutoAccessorSetTimecodeConstMeta,\n            argValues: [that, timecode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderBlobEventAutoAccessorSetTimecodeConstMeta => const TaskConstMeta(\n            debugName: \"BlobEvent_auto_accessor_set_timecode\",\n            argNames: [\"that\", \"timecode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaRecorderMediaRecorderClearOndataavailable({required MediaRecorder that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaRecorderMediaRecorderClearOndataavailable({required MediaRecorder that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 291, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderClearOndataavailableConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderClearOndataavailableConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_clear_ondataavailable\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaRecorderMediaRecorderClearOnerror({required MediaRecorder that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaRecorderMediaRecorderClearOnerror({required MediaRecorder that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 292, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderClearOnerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderClearOnerrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_clear_onerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaRecorderMediaRecorderClearOnstop({required MediaRecorder that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaRecorderMediaRecorderClearOnstop({required MediaRecorder that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 293, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderClearOnstopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderClearOnstopConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_clear_onstop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaRecorder> webAudioApiMediaRecorderMediaRecorderNew({required MediaStream stream });\n\n",
        "api_impl_class_body": "@override Future<MediaRecorder> webAudioApiMediaRecorderMediaRecorderNew({required MediaStream stream })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(stream, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 294, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderNewConstMeta,\n            argValues: [stream],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderNewConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_new\",\n            argNames: [\"stream\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaRecorderMediaRecorderStart({required MediaRecorder that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaRecorderMediaRecorderStart({required MediaRecorder that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 295, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderStartConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderStartConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_start\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaRecorderMediaRecorderStop({required MediaRecorder that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaRecorderMediaRecorderStop({required MediaRecorder that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 296, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaRecorderMediaRecorderStopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaRecorderMediaRecorderStopConstMeta => const TaskConstMeta(\n            debugName: \"MediaRecorder_stop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiMediaStreamsMediaStreamTrackClose({required MediaStreamTrack that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiMediaStreamsMediaStreamTrackClose({required MediaStreamTrack that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 297, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaStreamsMediaStreamTrackCloseConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaStreamsMediaStreamTrackCloseConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrack_close\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStreamTrackState> webAudioApiMediaStreamsMediaStreamTrackReadyState({required MediaStreamTrack that });\n\n",
        "api_impl_class_body": "@override Future<MediaStreamTrackState> webAudioApiMediaStreamsMediaStreamTrackReadyState({required MediaStreamTrack that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 298, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_media_stream_track_state,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaStreamsMediaStreamTrackReadyStateConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaStreamsMediaStreamTrackReadyStateConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrack_ready_state\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<List<MediaStreamTrack>> webAudioApiMediaStreamsMediaStreamFrbOverrideGetTracks({required MediaStream that });\n\n",
        "api_impl_class_body": "@override Future<List<MediaStreamTrack>> webAudioApiMediaStreamsMediaStreamFrbOverrideGetTracks({required MediaStream that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 299, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaStreamsMediaStreamFrbOverrideGetTracksConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaStreamsMediaStreamFrbOverrideGetTracksConstMeta => const TaskConstMeta(\n            debugName: \"MediaStream_frb_override_get_tracks\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<MediaStream> webAudioApiMediaStreamsMediaStreamFromTracks({required List<MediaStreamTrack> tracks });\n\n",
        "api_impl_class_body": "@override Future<MediaStream> webAudioApiMediaStreamsMediaStreamFromTracks({required List<MediaStreamTrack> tracks })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(tracks, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 300, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiMediaStreamsMediaStreamFromTracksConstMeta,\n            argValues: [tracks],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiMediaStreamsMediaStreamFromTracksConstMeta => const TaskConstMeta(\n            debugName: \"MediaStream_from_tracks\",\n            argNames: [\"tracks\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeChannelConfig({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeChannelConfig({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 301, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAnalyserNodeChannelCount({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAnalyserNodeChannelCount({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 302, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeAnalyserNodeChannelCountMode({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeAnalyserNodeChannelCountMode({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 303, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeAnalyserNodeChannelInterpretation({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeAnalyserNodeChannelInterpretation({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 304, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeClearOnprocessorerror({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeClearOnprocessorerror({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 305, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeDisconnect({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeDisconnect({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 306, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeDisconnectOutput({required AnalyserNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeDisconnectOutput({required AnalyserNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 307, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAnalyserNodeFftSize({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAnalyserNodeFftSize({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 308, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeFftSizeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeFftSizeConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_fft_size\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeFrbOverrideConnect({required AnalyserNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeFrbOverrideConnect({required AnalyserNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 309, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAnalyserNodeFrequencyBinCount({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAnalyserNodeFrequencyBinCount({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 310, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeFrequencyBinCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeFrequencyBinCountConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_frequency_bin_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAnalyserNodeMaxDecibels({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAnalyserNodeMaxDecibels({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 311, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeMaxDecibelsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeMaxDecibelsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_max_decibels\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAnalyserNodeMinDecibels({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAnalyserNodeMinDecibels({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 312, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeMinDecibelsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeMinDecibelsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_min_decibels\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAnalyserNodeNumberOfInputs({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAnalyserNodeNumberOfInputs({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 313, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAnalyserNodeNumberOfOutputs({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAnalyserNodeNumberOfOutputs({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 314, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeRegistration({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeRegistration({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 315, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetChannelCount({required AnalyserNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetChannelCount({required AnalyserNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 316, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetChannelCountMode({required AnalyserNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetChannelCountMode({required AnalyserNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 317, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetChannelInterpretation({required AnalyserNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetChannelInterpretation({required AnalyserNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 318, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetFftSize({required AnalyserNode that , required int fftSize });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetFftSize({required AnalyserNode that , required int fftSize })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_CastedPrimitive_usize(fftSize, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 319, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetFftSizeConstMeta,\n            argValues: [that, fftSize],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetFftSizeConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_fft_size\",\n            argNames: [\"that\", \"fftSize\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetMaxDecibels({required AnalyserNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetMaxDecibels({required AnalyserNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 320, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetMaxDecibelsConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetMaxDecibelsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_max_decibels\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetMinDecibels({required AnalyserNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetMinDecibels({required AnalyserNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 321, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetMinDecibelsConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetMinDecibelsConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_min_decibels\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetOnProcessorError({required AnalyserNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetOnProcessorError({required AnalyserNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 322, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAnalyserNodeSetSmoothingTimeConstant({required AnalyserNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAnalyserNodeSetSmoothingTimeConstant({required AnalyserNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 323, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSetSmoothingTimeConstantConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSetSmoothingTimeConstantConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_set_smoothing_time_constant\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAnalyserNodeSmoothingTimeConstant({required AnalyserNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAnalyserNodeSmoothingTimeConstant({required AnalyserNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 324, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserNodeSmoothingTimeConstantConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserNodeSmoothingTimeConstantConstMeta => const TaskConstMeta(\n            debugName: \"AnalyserNode_smoothing_time_constant\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeChannelConfig({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeChannelConfig({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 325, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioBufferSourceNodeChannelCount({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioBufferSourceNodeChannelCount({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 326, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeAudioBufferSourceNodeChannelCountMode({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeAudioBufferSourceNodeChannelCountMode({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 327, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeAudioBufferSourceNodeChannelInterpretation({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeAudioBufferSourceNodeChannelInterpretation({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 328, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeClearOnended({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeClearOnended({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 329, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeClearOnendedConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeClearOnendedConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_clear_onended\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeClearOnprocessorerror({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeClearOnprocessorerror({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 330, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeDisconnect({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeDisconnect({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 332, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeDisconnectOutput({required AudioBufferSourceNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeDisconnectOutput({required AudioBufferSourceNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 333, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeFrbOverrideConnect({required AudioBufferSourceNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeFrbOverrideConnect({required AudioBufferSourceNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 334, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<bool> webAudioApiNodeAudioBufferSourceNodeLoop({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<bool> webAudioApiNodeAudioBufferSourceNodeLoop({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 335, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_bool,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeLoopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeLoopConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_loop_\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAudioBufferSourceNodeLoopEnd({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAudioBufferSourceNodeLoopEnd({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 336, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeLoopEndConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeLoopEndConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_loop_end\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAudioBufferSourceNodeLoopStart({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAudioBufferSourceNodeLoopStart({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 337, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeLoopStartConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeLoopStartConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_loop_start\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioBufferSourceNodeNumberOfInputs({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioBufferSourceNodeNumberOfInputs({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 338, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioBufferSourceNodeNumberOfOutputs({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioBufferSourceNodeNumberOfOutputs({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 339, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeAudioBufferSourceNodePosition({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeAudioBufferSourceNodePosition({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 341, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodePositionConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodePositionConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_position\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeRegistration({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeRegistration({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 342, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetBuffer({required AudioBufferSourceNode that , required AudioBuffer audioBuffer });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetBuffer({required AudioBufferSourceNode that , required AudioBuffer audioBuffer })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(audioBuffer, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 343, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetBufferConstMeta,\n            argValues: [that, audioBuffer],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetBufferConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_buffer\",\n            argNames: [\"that\", \"audioBuffer\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelCount({required AudioBufferSourceNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelCount({required AudioBufferSourceNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 344, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelCountMode({required AudioBufferSourceNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelCountMode({required AudioBufferSourceNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 345, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelInterpretation({required AudioBufferSourceNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetChannelInterpretation({required AudioBufferSourceNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 346, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoop({required AudioBufferSourceNode that , required bool value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoop({required AudioBufferSourceNode that , required bool value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_bool(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 347, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetLoopConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetLoopConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_loop\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoopEnd({required AudioBufferSourceNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoopEnd({required AudioBufferSourceNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 348, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetLoopEndConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetLoopEndConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_loop_end\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoopStart({required AudioBufferSourceNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetLoopStart({required AudioBufferSourceNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 349, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetLoopStartConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetLoopStartConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_loop_start\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetOnEnded({required AudioBufferSourceNode that , required FutureOr<void> Function(Event) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetOnEnded({required AudioBufferSourceNode that , required FutureOr<void> Function(Event) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 350, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetOnEndedConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetOnEndedConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_on_ended\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeSetOnProcessorError({required AudioBufferSourceNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeSetOnProcessorError({required AudioBufferSourceNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 351, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStart({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStart({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 352, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStartConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStartConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_start\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStartAt({required AudioBufferSourceNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStartAt({required AudioBufferSourceNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 353, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStartAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStartAtConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_start_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStartAtWithOffset({required AudioBufferSourceNode that , required double start , required double offset });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStartAtWithOffset({required AudioBufferSourceNode that , required double start , required double offset })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(start, serializer);\nsse_encode_f_64(offset, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 354, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetConstMeta,\n            argValues: [that, start, offset],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_start_at_with_offset\",\n            argNames: [\"that\", \"start\", \"offset\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetAndDuration({required AudioBufferSourceNode that , required double start , required double offset , required double duration });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetAndDuration({required AudioBufferSourceNode that , required double start , required double offset , required double duration })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(start, serializer);\nsse_encode_f_64(offset, serializer);\nsse_encode_f_64(duration, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 355, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetAndDurationConstMeta,\n            argValues: [that, start, offset, duration],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStartAtWithOffsetAndDurationConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_start_at_with_offset_and_duration\",\n            argNames: [\"that\", \"start\", \"offset\", \"duration\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStop({required AudioBufferSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStop({required AudioBufferSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 356, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStopConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_stop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioBufferSourceNodeStopAt({required AudioBufferSourceNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioBufferSourceNodeStopAt({required AudioBufferSourceNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 357, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceNodeStopAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceNodeStopAtConstMeta => const TaskConstMeta(\n            debugName: \"AudioBufferSourceNode_stop_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeChannelConfig({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeChannelConfig({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 358, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioDestinationNodeChannelCount({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioDestinationNodeChannelCount({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 359, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeAudioDestinationNodeChannelCountMode({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeAudioDestinationNodeChannelCountMode({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 360, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeAudioDestinationNodeChannelInterpretation({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeAudioDestinationNodeChannelInterpretation({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 361, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeClearOnprocessorerror({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeClearOnprocessorerror({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 362, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeDisconnect({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeDisconnect({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 363, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeDisconnectOutput({required AudioDestinationNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeDisconnectOutput({required AudioDestinationNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 364, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeFrbOverrideConnect({required AudioDestinationNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeFrbOverrideConnect({required AudioDestinationNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 365, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioDestinationNodeMaxChannelCount({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioDestinationNodeMaxChannelCount({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 366, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeMaxChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeMaxChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_max_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioDestinationNodeNumberOfInputs({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioDestinationNodeNumberOfInputs({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 367, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeAudioDestinationNodeNumberOfOutputs({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeAudioDestinationNodeNumberOfOutputs({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 368, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeRegistration({required AudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeRegistration({required AudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 369, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeSetChannelCount({required AudioDestinationNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeSetChannelCount({required AudioDestinationNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 370, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeSetChannelCountMode({required AudioDestinationNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeSetChannelCountMode({required AudioDestinationNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 371, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeSetChannelInterpretation({required AudioDestinationNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeSetChannelInterpretation({required AudioDestinationNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 372, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeAudioDestinationNodeSetOnProcessorError({required AudioDestinationNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeAudioDestinationNodeSetOnProcessorError({required AudioDestinationNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 373, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioDestinationNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioDestinationNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioDestinationNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeChannelConfig({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeChannelConfig({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 374, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeBiquadFilterNodeChannelCount({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeBiquadFilterNodeChannelCount({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 375, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeBiquadFilterNodeChannelCountMode({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeBiquadFilterNodeChannelCountMode({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 376, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeBiquadFilterNodeChannelInterpretation({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeBiquadFilterNodeChannelInterpretation({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 377, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeClearOnprocessorerror({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeClearOnprocessorerror({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 378, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeDisconnect({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeDisconnect({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 380, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeDisconnectOutput({required BiquadFilterNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeDisconnectOutput({required BiquadFilterNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 381, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeFrbOverrideConnect({required BiquadFilterNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeFrbOverrideConnect({required BiquadFilterNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 382, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeBiquadFilterNodeNumberOfInputs({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeBiquadFilterNodeNumberOfInputs({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 385, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeBiquadFilterNodeNumberOfOutputs({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeBiquadFilterNodeNumberOfOutputs({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 386, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeRegistration({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeRegistration({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 388, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeSetChannelCount({required BiquadFilterNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeSetChannelCount({required BiquadFilterNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 389, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeSetChannelCountMode({required BiquadFilterNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeSetChannelCountMode({required BiquadFilterNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 390, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeSetChannelInterpretation({required BiquadFilterNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeSetChannelInterpretation({required BiquadFilterNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 391, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeSetOnProcessorError({required BiquadFilterNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeSetOnProcessorError({required BiquadFilterNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 392, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeBiquadFilterNodeSetType({required BiquadFilterNode that , required BiquadFilterType type });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeBiquadFilterNodeSetType({required BiquadFilterNode that , required BiquadFilterType type })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\nsse_encode_biquad_filter_type(type, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 393, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeSetTypeConstMeta,\n            argValues: [that, type],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeSetTypeConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_set_type\",\n            argNames: [\"that\", \"type\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterType> webAudioApiNodeBiquadFilterNodeType({required BiquadFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterType> webAudioApiNodeBiquadFilterNodeType({required BiquadFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 394, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_biquad_filter_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterNodeTypeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterNodeTypeConstMeta => const TaskConstMeta(\n            debugName: \"BiquadFilterNode_type_\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelConfig> webAudioApiNodeChannelConfigDefault();\n\n",
        "api_impl_class_body": "@override Future<ChannelConfig> webAudioApiNodeChannelConfigDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 395, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelConfigDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelConfigDefaultConstMeta => const TaskConstMeta(\n            debugName: \"ChannelConfig_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeChannelConfig({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeChannelConfig({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 396, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelMergerNodeChannelCount({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelMergerNodeChannelCount({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 397, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeChannelMergerNodeChannelCountMode({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeChannelMergerNodeChannelCountMode({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 398, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeChannelMergerNodeChannelInterpretation({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeChannelMergerNodeChannelInterpretation({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 399, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeClearOnprocessorerror({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeClearOnprocessorerror({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 400, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeDisconnect({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeDisconnect({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 401, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeDisconnectOutput({required ChannelMergerNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeDisconnectOutput({required ChannelMergerNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 402, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeFrbOverrideConnect({required ChannelMergerNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeFrbOverrideConnect({required ChannelMergerNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 403, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelMergerNodeNumberOfInputs({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelMergerNodeNumberOfInputs({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 404, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelMergerNodeNumberOfOutputs({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelMergerNodeNumberOfOutputs({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 405, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeRegistration({required ChannelMergerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeRegistration({required ChannelMergerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 406, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeSetChannelCount({required ChannelMergerNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeSetChannelCount({required ChannelMergerNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 407, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeSetChannelCountMode({required ChannelMergerNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeSetChannelCountMode({required ChannelMergerNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 408, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeSetChannelInterpretation({required ChannelMergerNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeSetChannelInterpretation({required ChannelMergerNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 409, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelMergerNodeSetOnProcessorError({required ChannelMergerNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelMergerNodeSetOnProcessorError({required ChannelMergerNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 410, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"ChannelMergerNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeChannelConfig({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeChannelConfig({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 411, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelSplitterNodeChannelCount({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelSplitterNodeChannelCount({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 412, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeChannelSplitterNodeChannelCountMode({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeChannelSplitterNodeChannelCountMode({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 413, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeChannelSplitterNodeChannelInterpretation({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeChannelSplitterNodeChannelInterpretation({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 414, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeClearOnprocessorerror({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeClearOnprocessorerror({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 415, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeDisconnect({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeDisconnect({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 416, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeDisconnectOutput({required ChannelSplitterNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeDisconnectOutput({required ChannelSplitterNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 417, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeFrbOverrideConnect({required ChannelSplitterNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeFrbOverrideConnect({required ChannelSplitterNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 418, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelSplitterNodeNumberOfInputs({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelSplitterNodeNumberOfInputs({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 419, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeChannelSplitterNodeNumberOfOutputs({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeChannelSplitterNodeNumberOfOutputs({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 420, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeRegistration({required ChannelSplitterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeRegistration({required ChannelSplitterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 421, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeSetChannelCount({required ChannelSplitterNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeSetChannelCount({required ChannelSplitterNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 422, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeSetChannelCountMode({required ChannelSplitterNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeSetChannelCountMode({required ChannelSplitterNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 423, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeSetChannelInterpretation({required ChannelSplitterNode that , required ChannelInterpretation interpretation });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeSetChannelInterpretation({required ChannelSplitterNode that , required ChannelInterpretation interpretation })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_channel_interpretation(interpretation, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 424, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeSetChannelInterpretationConstMeta,\n            argValues: [that, interpretation],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_set_channel_interpretation\",\n            argNames: [\"that\", \"interpretation\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeChannelSplitterNodeSetOnProcessorError({required ChannelSplitterNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeChannelSplitterNodeSetOnProcessorError({required ChannelSplitterNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 425, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"ChannelSplitterNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeChannelConfig({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeChannelConfig({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 426, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConstantSourceNodeChannelCount({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConstantSourceNodeChannelCount({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 427, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeConstantSourceNodeChannelCountMode({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeConstantSourceNodeChannelCountMode({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 428, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeConstantSourceNodeChannelInterpretation({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeConstantSourceNodeChannelInterpretation({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 429, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeClearOnended({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeClearOnended({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 430, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeClearOnendedConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeClearOnendedConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_clear_onended\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeClearOnprocessorerror({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeClearOnprocessorerror({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 431, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeDisconnect({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeDisconnect({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 432, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeDisconnectOutput({required ConstantSourceNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeDisconnectOutput({required ConstantSourceNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 433, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeFrbOverrideConnect({required ConstantSourceNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeFrbOverrideConnect({required ConstantSourceNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 434, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConstantSourceNodeNumberOfInputs({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConstantSourceNodeNumberOfInputs({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 435, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConstantSourceNodeNumberOfOutputs({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConstantSourceNodeNumberOfOutputs({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 436, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeRegistration({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeRegistration({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 438, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeSetChannelCount({required ConstantSourceNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeSetChannelCount({required ConstantSourceNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 439, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeSetChannelCountMode({required ConstantSourceNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeSetChannelCountMode({required ConstantSourceNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 440, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeSetChannelInterpretation({required ConstantSourceNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeSetChannelInterpretation({required ConstantSourceNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 441, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeSetOnEnded({required ConstantSourceNode that , required FutureOr<void> Function(Event) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeSetOnEnded({required ConstantSourceNode that , required FutureOr<void> Function(Event) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 442, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeSetOnEndedConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeSetOnEndedConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_set_on_ended\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeSetOnProcessorError({required ConstantSourceNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeSetOnProcessorError({required ConstantSourceNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 443, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeStart({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeStart({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 444, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeStartConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeStartConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_start\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeStartAt({required ConstantSourceNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeStartAt({required ConstantSourceNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 445, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeStartAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeStartAtConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_start_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeStop({required ConstantSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeStop({required ConstantSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 446, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeStopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeStopConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_stop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConstantSourceNodeStopAt({required ConstantSourceNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConstantSourceNodeStopAt({required ConstantSourceNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 447, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceNodeStopAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceNodeStopAtConstMeta => const TaskConstMeta(\n            debugName: \"ConstantSourceNode_stop_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeChannelConfig({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeChannelConfig({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 448, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConvolverNodeChannelCount({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConvolverNodeChannelCount({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 449, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeConvolverNodeChannelCountMode({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeConvolverNodeChannelCountMode({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 450, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeConvolverNodeChannelInterpretation({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeConvolverNodeChannelInterpretation({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 451, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeClearOnprocessorerror({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeClearOnprocessorerror({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 452, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeDisconnect({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeDisconnect({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 453, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeDisconnectOutput({required ConvolverNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeDisconnectOutput({required ConvolverNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 454, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeFrbOverrideConnect({required ConvolverNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeFrbOverrideConnect({required ConvolverNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 455, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<bool> webAudioApiNodeConvolverNodeNormalize({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<bool> webAudioApiNodeConvolverNodeNormalize({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 456, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_bool,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeNormalizeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeNormalizeConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_normalize\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConvolverNodeNumberOfInputs({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConvolverNodeNumberOfInputs({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 457, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeConvolverNodeNumberOfOutputs({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeConvolverNodeNumberOfOutputs({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 458, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeRegistration({required ConvolverNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeRegistration({required ConvolverNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 459, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetBuffer({required ConvolverNode that , required AudioBuffer buffer });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetBuffer({required ConvolverNode that , required AudioBuffer buffer })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(buffer, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 460, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetBufferConstMeta,\n            argValues: [that, buffer],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetBufferConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_buffer\",\n            argNames: [\"that\", \"buffer\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetChannelCount({required ConvolverNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetChannelCount({required ConvolverNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 461, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetChannelCountMode({required ConvolverNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetChannelCountMode({required ConvolverNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 462, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetChannelInterpretation({required ConvolverNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetChannelInterpretation({required ConvolverNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 463, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetNormalize({required ConvolverNode that , required bool value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetNormalize({required ConvolverNode that , required bool value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_bool(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 464, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetNormalizeConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetNormalizeConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_normalize\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeConvolverNodeSetOnProcessorError({required ConvolverNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeConvolverNodeSetOnProcessorError({required ConvolverNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 465, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"ConvolverNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeChannelConfig({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeChannelConfig({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 466, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDelayNodeChannelCount({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDelayNodeChannelCount({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 467, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeDelayNodeChannelCountMode({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeDelayNodeChannelCountMode({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 468, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeDelayNodeChannelInterpretation({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeDelayNodeChannelInterpretation({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 469, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeClearOnprocessorerror({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeClearOnprocessorerror({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 470, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeDisconnect({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeDisconnect({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 472, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeDisconnectOutput({required DelayNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeDisconnectOutput({required DelayNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 473, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeFrbOverrideConnect({required DelayNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeFrbOverrideConnect({required DelayNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 474, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDelayNodeNumberOfInputs({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDelayNodeNumberOfInputs({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 475, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDelayNodeNumberOfOutputs({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDelayNodeNumberOfOutputs({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 476, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeRegistration({required DelayNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeRegistration({required DelayNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 477, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeSetChannelCount({required DelayNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeSetChannelCount({required DelayNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 478, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeSetChannelCountMode({required DelayNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeSetChannelCountMode({required DelayNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 479, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeSetChannelInterpretation({required DelayNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeSetChannelInterpretation({required DelayNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 480, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDelayNodeSetOnProcessorError({required DelayNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDelayNodeSetOnProcessorError({required DelayNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 481, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"DelayNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeChannelConfig({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeChannelConfig({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 483, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDynamicsCompressorNodeChannelCount({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDynamicsCompressorNodeChannelCount({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 484, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeDynamicsCompressorNodeChannelCountMode({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeDynamicsCompressorNodeChannelCountMode({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 485, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeDynamicsCompressorNodeChannelInterpretation({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeDynamicsCompressorNodeChannelInterpretation({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 486, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeClearOnprocessorerror({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeClearOnprocessorerror({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 487, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeDisconnect({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeDisconnect({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 488, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeDisconnectOutput({required DynamicsCompressorNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeDisconnectOutput({required DynamicsCompressorNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 489, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeFrbOverrideConnect({required DynamicsCompressorNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeFrbOverrideConnect({required DynamicsCompressorNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 490, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDynamicsCompressorNodeNumberOfInputs({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDynamicsCompressorNodeNumberOfInputs({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 492, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeDynamicsCompressorNodeNumberOfOutputs({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeDynamicsCompressorNodeNumberOfOutputs({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 493, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodeDynamicsCompressorNodeReduction({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodeDynamicsCompressorNodeReduction({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 495, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_32,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeReductionConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeReductionConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_reduction\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeRegistration({required DynamicsCompressorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeRegistration({required DynamicsCompressorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 496, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelCount({required DynamicsCompressorNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelCount({required DynamicsCompressorNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 498, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelCountMode({required DynamicsCompressorNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelCountMode({required DynamicsCompressorNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 499, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelInterpretation({required DynamicsCompressorNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeSetChannelInterpretation({required DynamicsCompressorNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 500, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeDynamicsCompressorNodeSetOnProcessorError({required DynamicsCompressorNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeDynamicsCompressorNodeSetOnProcessorError({required DynamicsCompressorNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 501, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"DynamicsCompressorNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeChannelConfig({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeChannelConfig({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 503, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeGainNodeChannelCount({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeGainNodeChannelCount({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 504, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeGainNodeChannelCountMode({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeGainNodeChannelCountMode({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 505, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeGainNodeChannelInterpretation({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeGainNodeChannelInterpretation({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 506, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeClearOnprocessorerror({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeClearOnprocessorerror({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 507, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeDisconnect({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeDisconnect({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 508, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeDisconnectOutput({required GainNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeDisconnectOutput({required GainNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 509, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeFrbOverrideConnect({required GainNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeFrbOverrideConnect({required GainNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 510, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeGainNodeNumberOfInputs({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeGainNodeNumberOfInputs({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 512, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeGainNodeNumberOfOutputs({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeGainNodeNumberOfOutputs({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 513, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeRegistration({required GainNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeRegistration({required GainNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 514, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeSetChannelCount({required GainNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeSetChannelCount({required GainNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 515, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeSetChannelCountMode({required GainNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeSetChannelCountMode({required GainNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 516, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeSetChannelInterpretation({required GainNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeSetChannelInterpretation({required GainNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 517, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeGainNodeSetOnProcessorError({required GainNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeGainNodeSetOnProcessorError({required GainNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 518, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"GainNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeChannelConfig({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeChannelConfig({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 519, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeIirFilterNodeChannelCount({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeIirFilterNodeChannelCount({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 520, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeIirFilterNodeChannelCountMode({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeIirFilterNodeChannelCountMode({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 521, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeIirFilterNodeChannelInterpretation({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeIirFilterNodeChannelInterpretation({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 522, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeClearOnprocessorerror({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeClearOnprocessorerror({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 523, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeDisconnect({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeDisconnect({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 524, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeDisconnectOutput({required IirFilterNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeDisconnectOutput({required IirFilterNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 525, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeFrbOverrideConnect({required IirFilterNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeFrbOverrideConnect({required IirFilterNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 526, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeIirFilterNodeNumberOfInputs({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeIirFilterNodeNumberOfInputs({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 527, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeIirFilterNodeNumberOfOutputs({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeIirFilterNodeNumberOfOutputs({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 528, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeRegistration({required IirFilterNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeRegistration({required IirFilterNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 529, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeSetChannelCount({required IirFilterNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeSetChannelCount({required IirFilterNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 530, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeSetChannelCountMode({required IirFilterNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeSetChannelCountMode({required IirFilterNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 531, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeSetChannelInterpretation({required IirFilterNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeSetChannelInterpretation({required IirFilterNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 532, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeIirFilterNodeSetOnProcessorError({required IirFilterNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeIirFilterNodeSetOnProcessorError({required IirFilterNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 533, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeIirFilterNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeIirFilterNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"IirFilterNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeChannelConfig({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeChannelConfig({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 534, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaElementAudioSourceNodeChannelCount({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaElementAudioSourceNodeChannelCount({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 535, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeMediaElementAudioSourceNodeChannelCountMode({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeMediaElementAudioSourceNodeChannelCountMode({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 536, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeMediaElementAudioSourceNodeChannelInterpretation({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeMediaElementAudioSourceNodeChannelInterpretation({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 537, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeClearOnprocessorerror({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeClearOnprocessorerror({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 538, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeDisconnect({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeDisconnect({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 539, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeDisconnectOutput({required MediaElementAudioSourceNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeDisconnectOutput({required MediaElementAudioSourceNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 540, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeFrbOverrideConnect({required MediaElementAudioSourceNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeFrbOverrideConnect({required MediaElementAudioSourceNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 541, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaElementAudioSourceNodeNumberOfInputs({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaElementAudioSourceNodeNumberOfInputs({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 542, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaElementAudioSourceNodeNumberOfOutputs({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaElementAudioSourceNodeNumberOfOutputs({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 543, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeRegistration({required MediaElementAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeRegistration({required MediaElementAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 544, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelCount({required MediaElementAudioSourceNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelCount({required MediaElementAudioSourceNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 545, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelCountMode({required MediaElementAudioSourceNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelCountMode({required MediaElementAudioSourceNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 546, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelInterpretation({required MediaElementAudioSourceNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetChannelInterpretation({required MediaElementAudioSourceNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 547, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetOnProcessorError({required MediaElementAudioSourceNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaElementAudioSourceNodeSetOnProcessorError({required MediaElementAudioSourceNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 548, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaElementAudioSourceNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaElementAudioSourceNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaElementAudioSourceNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeChannelConfig({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeChannelConfig({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 549, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeChannelCount({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeChannelCount({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 550, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeMediaStreamAudioDestinationNodeChannelCountMode({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeMediaStreamAudioDestinationNodeChannelCountMode({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 551, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeMediaStreamAudioDestinationNodeChannelInterpretation({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeMediaStreamAudioDestinationNodeChannelInterpretation({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 552, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeClearOnprocessorerror({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeClearOnprocessorerror({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 553, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeDisconnect({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeDisconnect({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 554, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeDisconnectOutput({required MediaStreamAudioDestinationNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeDisconnectOutput({required MediaStreamAudioDestinationNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 555, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeFrbOverrideConnect({required MediaStreamAudioDestinationNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeFrbOverrideConnect({required MediaStreamAudioDestinationNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 556, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeNumberOfInputs({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeNumberOfInputs({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 557, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeNumberOfOutputs({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioDestinationNodeNumberOfOutputs({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 558, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeRegistration({required MediaStreamAudioDestinationNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeRegistration({required MediaStreamAudioDestinationNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 559, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCount({required MediaStreamAudioDestinationNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCount({required MediaStreamAudioDestinationNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 560, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountMode({required MediaStreamAudioDestinationNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountMode({required MediaStreamAudioDestinationNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 561, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelInterpretation({required MediaStreamAudioDestinationNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetChannelInterpretation({required MediaStreamAudioDestinationNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 562, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetOnProcessorError({required MediaStreamAudioDestinationNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioDestinationNodeSetOnProcessorError({required MediaStreamAudioDestinationNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 563, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioDestinationNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioDestinationNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioDestinationNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeChannelConfig({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeChannelConfig({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 565, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioSourceNodeChannelCount({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioSourceNodeChannelCount({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 566, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeMediaStreamAudioSourceNodeChannelCountMode({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeMediaStreamAudioSourceNodeChannelCountMode({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 567, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeMediaStreamAudioSourceNodeChannelInterpretation({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeMediaStreamAudioSourceNodeChannelInterpretation({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 568, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeClearOnprocessorerror({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeClearOnprocessorerror({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 569, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeDisconnect({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeDisconnect({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 570, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeDisconnectOutput({required MediaStreamAudioSourceNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeDisconnectOutput({required MediaStreamAudioSourceNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 571, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeFrbOverrideConnect({required MediaStreamAudioSourceNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeFrbOverrideConnect({required MediaStreamAudioSourceNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 572, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioSourceNodeNumberOfInputs({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioSourceNodeNumberOfInputs({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 573, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamAudioSourceNodeNumberOfOutputs({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamAudioSourceNodeNumberOfOutputs({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 574, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeRegistration({required MediaStreamAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeRegistration({required MediaStreamAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 575, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelCount({required MediaStreamAudioSourceNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelCount({required MediaStreamAudioSourceNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 576, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountMode({required MediaStreamAudioSourceNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountMode({required MediaStreamAudioSourceNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 577, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelInterpretation({required MediaStreamAudioSourceNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetChannelInterpretation({required MediaStreamAudioSourceNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 578, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetOnProcessorError({required MediaStreamAudioSourceNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamAudioSourceNodeSetOnProcessorError({required MediaStreamAudioSourceNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 579, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamAudioSourceNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamAudioSourceNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamAudioSourceNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelConfig({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelConfig({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 580, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCount({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCount({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 581, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountMode({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountMode({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 582, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelInterpretation({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeMediaStreamTrackAudioSourceNodeChannelInterpretation({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 583, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeClearOnprocessorerror({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeClearOnprocessorerror({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 584, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnect({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnect({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 585, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectOutput({required MediaStreamTrackAudioSourceNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectOutput({required MediaStreamTrackAudioSourceNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 586, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeFrbOverrideConnect({required MediaStreamTrackAudioSourceNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeFrbOverrideConnect({required MediaStreamTrackAudioSourceNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 587, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfInputs({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfInputs({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 588, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfOutputs({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfOutputs({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 589, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeRegistration({required MediaStreamTrackAudioSourceNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeRegistration({required MediaStreamTrackAudioSourceNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 590, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCount({required MediaStreamTrackAudioSourceNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCount({required MediaStreamTrackAudioSourceNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 591, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountMode({required MediaStreamTrackAudioSourceNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountMode({required MediaStreamTrackAudioSourceNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 592, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelInterpretation({required MediaStreamTrackAudioSourceNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelInterpretation({required MediaStreamTrackAudioSourceNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 593, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetOnProcessorError({required MediaStreamTrackAudioSourceNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeMediaStreamTrackAudioSourceNodeSetOnProcessorError({required MediaStreamTrackAudioSourceNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 594, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeMediaStreamTrackAudioSourceNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"MediaStreamTrackAudioSourceNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeChannelConfig({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeChannelConfig({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 595, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeOscillatorNodeChannelCount({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeOscillatorNodeChannelCount({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 596, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeOscillatorNodeChannelCountMode({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeOscillatorNodeChannelCountMode({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 597, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeOscillatorNodeChannelInterpretation({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeOscillatorNodeChannelInterpretation({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 598, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeClearOnended({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeClearOnended({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 599, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeClearOnendedConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeClearOnendedConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_clear_onended\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeClearOnprocessorerror({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeClearOnprocessorerror({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 600, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeDisconnect({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeDisconnect({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 602, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeDisconnectOutput({required OscillatorNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeDisconnectOutput({required OscillatorNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 603, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeFrbOverrideConnect({required OscillatorNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeFrbOverrideConnect({required OscillatorNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 604, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeOscillatorNodeNumberOfInputs({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeOscillatorNodeNumberOfInputs({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 606, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeOscillatorNodeNumberOfOutputs({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeOscillatorNodeNumberOfOutputs({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 607, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeRegistration({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeRegistration({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 608, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetChannelCount({required OscillatorNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetChannelCount({required OscillatorNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 609, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetChannelCountMode({required OscillatorNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetChannelCountMode({required OscillatorNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 610, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetChannelInterpretation({required OscillatorNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetChannelInterpretation({required OscillatorNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 611, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetOnEnded({required OscillatorNode that , required FutureOr<void> Function(Event) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetOnEnded({required OscillatorNode that , required FutureOr<void> Function(Event) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 612, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetOnEndedConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetOnEndedConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_on_ended\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetOnProcessorError({required OscillatorNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetOnProcessorError({required OscillatorNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 613, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetPeriodicWave({required OscillatorNode that , required PeriodicWave periodicWave });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetPeriodicWave({required OscillatorNode that , required PeriodicWave periodicWave })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(periodicWave, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 614, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetPeriodicWaveConstMeta,\n            argValues: [that, periodicWave],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetPeriodicWaveConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_periodic_wave\",\n            argNames: [\"that\", \"periodicWave\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeSetType({required OscillatorNode that , required OscillatorType type });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeSetType({required OscillatorNode that , required OscillatorType type })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_oscillator_type(type, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 615, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeSetTypeConstMeta,\n            argValues: [that, type],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeSetTypeConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_set_type\",\n            argNames: [\"that\", \"type\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeStart({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeStart({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 616, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeStartConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeStartConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_start\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeStartAt({required OscillatorNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeStartAt({required OscillatorNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 617, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeStartAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeStartAtConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_start_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeStop({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeStop({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 618, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeStopConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeStopConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_stop\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeOscillatorNodeStopAt({required OscillatorNode that , required double when });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeOscillatorNodeStopAt({required OscillatorNode that , required double when })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\nsse_encode_f_64(when, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 619, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeStopAtConstMeta,\n            argValues: [that, when],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeStopAtConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_stop_at\",\n            argNames: [\"that\", \"when\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorType> webAudioApiNodeOscillatorNodeType({required OscillatorNode that });\n\n",
        "api_impl_class_body": "@override Future<OscillatorType> webAudioApiNodeOscillatorNodeType({required OscillatorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 620, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_oscillator_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorNodeTypeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorNodeTypeConstMeta => const TaskConstMeta(\n            debugName: \"OscillatorNode_type_\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeChannelConfig({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeChannelConfig({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 621, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodePannerNodeChannelCount({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodePannerNodeChannelCount({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 622, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodePannerNodeChannelCountMode({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodePannerNodeChannelCountMode({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 623, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodePannerNodeChannelInterpretation({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodePannerNodeChannelInterpretation({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 624, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeClearOnprocessorerror({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeClearOnprocessorerror({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 625, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeConeInnerAngle({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeConeInnerAngle({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 626, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeConeInnerAngleConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeConeInnerAngleConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_cone_inner_angle\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeConeOuterAngle({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeConeOuterAngle({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 627, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeConeOuterAngleConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeConeOuterAngleConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_cone_outer_angle\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeConeOuterGain({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeConeOuterGain({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 628, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeConeOuterGainConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeConeOuterGainConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_cone_outer_gain\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeDisconnect({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeDisconnect({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 629, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeDisconnectOutput({required PannerNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeDisconnectOutput({required PannerNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 630, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DistanceModelType> webAudioApiNodePannerNodeDistanceModel({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<DistanceModelType> webAudioApiNodePannerNodeDistanceModel({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 631, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_distance_model_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeDistanceModelConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeDistanceModelConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_distance_model\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeFrbOverrideConnect({required PannerNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeFrbOverrideConnect({required PannerNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 632, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeMaxDistance({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeMaxDistance({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 633, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeMaxDistanceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeMaxDistanceConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_max_distance\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodePannerNodeNumberOfInputs({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodePannerNodeNumberOfInputs({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 634, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodePannerNodeNumberOfOutputs({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodePannerNodeNumberOfOutputs({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 635, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PanningModelType> webAudioApiNodePannerNodePanningModel({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<PanningModelType> webAudioApiNodePannerNodePanningModel({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 639, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_panning_model_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodePanningModelConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodePanningModelConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_panning_model\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeRefDistance({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeRefDistance({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 643, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeRefDistanceConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeRefDistanceConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_ref_distance\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeRegistration({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeRegistration({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 644, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<double> webAudioApiNodePannerNodeRolloffFactor({required PannerNode that });\n\n",
        "api_impl_class_body": "@override Future<double> webAudioApiNodePannerNodeRolloffFactor({required PannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 645, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_f_64,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeRolloffFactorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeRolloffFactorConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_rolloff_factor\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetChannelCount({required PannerNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetChannelCount({required PannerNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 646, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetChannelCountMode({required PannerNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetChannelCountMode({required PannerNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 647, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetChannelInterpretation({required PannerNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetChannelInterpretation({required PannerNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 648, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetConeInnerAngle({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetConeInnerAngle({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 649, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetConeInnerAngleConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetConeInnerAngleConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_cone_inner_angle\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetConeOuterAngle({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetConeOuterAngle({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 650, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetConeOuterAngleConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetConeOuterAngleConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_cone_outer_angle\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetConeOuterGain({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetConeOuterGain({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 651, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetConeOuterGainConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetConeOuterGainConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_cone_outer_gain\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetDistanceModel({required PannerNode that , required DistanceModelType value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetDistanceModel({required PannerNode that , required DistanceModelType value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_distance_model_type(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 652, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetDistanceModelConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetDistanceModelConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_distance_model\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetMaxDistance({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetMaxDistance({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 653, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetMaxDistanceConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetMaxDistanceConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_max_distance\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetOnProcessorError({required PannerNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetOnProcessorError({required PannerNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 654, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetOrientation({required PannerNode that , required double x , required double y , required double z });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetOrientation({required PannerNode that , required double x , required double y , required double z })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_32(x, serializer);\nsse_encode_f_32(y, serializer);\nsse_encode_f_32(z, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 655, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetOrientationConstMeta,\n            argValues: [that, x, y, z],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetOrientationConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_orientation\",\n            argNames: [\"that\", \"x\", \"y\", \"z\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetPanningModel({required PannerNode that , required PanningModelType value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetPanningModel({required PannerNode that , required PanningModelType value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_panning_model_type(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 656, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetPanningModelConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetPanningModelConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_panning_model\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetPosition({required PannerNode that , required double x , required double y , required double z });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetPosition({required PannerNode that , required double x , required double y , required double z })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_32(x, serializer);\nsse_encode_f_32(y, serializer);\nsse_encode_f_32(z, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 657, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetPositionConstMeta,\n            argValues: [that, x, y, z],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetPositionConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_position\",\n            argNames: [\"that\", \"x\", \"y\", \"z\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetRefDistance({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetRefDistance({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 658, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetRefDistanceConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetRefDistanceConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_ref_distance\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodePannerNodeSetRolloffFactor({required PannerNode that , required double value });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodePannerNodeSetRolloffFactor({required PannerNode that , required double value })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(that, serializer);\nsse_encode_f_64(value, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 659, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerNodeSetRolloffFactorConstMeta,\n            argValues: [that, value],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerNodeSetRolloffFactorConstMeta => const TaskConstMeta(\n            debugName: \"PannerNode_set_rolloff_factor\",\n            argNames: [\"that\", \"value\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeScriptProcessorNodeBufferSize({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeScriptProcessorNodeBufferSize({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 660, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeBufferSizeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeBufferSizeConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_buffer_size\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeChannelConfig({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeChannelConfig({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 661, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeScriptProcessorNodeChannelCount({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeScriptProcessorNodeChannelCount({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 662, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeScriptProcessorNodeChannelCountMode({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeScriptProcessorNodeChannelCountMode({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 663, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeScriptProcessorNodeChannelInterpretation({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeScriptProcessorNodeChannelInterpretation({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 664, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeClearOnaudioprocess({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeClearOnaudioprocess({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 665, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeClearOnaudioprocessConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeClearOnaudioprocessConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_clear_onaudioprocess\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeClearOnprocessorerror({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeClearOnprocessorerror({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 666, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeDisconnect({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeDisconnect({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 667, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeDisconnectOutput({required ScriptProcessorNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeDisconnectOutput({required ScriptProcessorNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 668, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeFrbOverrideConnect({required ScriptProcessorNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeFrbOverrideConnect({required ScriptProcessorNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 669, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeScriptProcessorNodeNumberOfInputs({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeScriptProcessorNodeNumberOfInputs({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 670, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeScriptProcessorNodeNumberOfOutputs({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeScriptProcessorNodeNumberOfOutputs({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 671, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeRegistration({required ScriptProcessorNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeRegistration({required ScriptProcessorNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 672, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeSetChannelCount({required ScriptProcessorNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeSetChannelCount({required ScriptProcessorNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 673, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeSetChannelCountMode({required ScriptProcessorNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeSetChannelCountMode({required ScriptProcessorNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 674, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeSetChannelInterpretation({required ScriptProcessorNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeSetChannelInterpretation({required ScriptProcessorNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 675, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeScriptProcessorNodeSetOnProcessorError({required ScriptProcessorNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeScriptProcessorNodeSetOnProcessorError({required ScriptProcessorNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 676, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeScriptProcessorNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeScriptProcessorNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"ScriptProcessorNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeChannelConfig({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeChannelConfig({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 677, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeStereoPannerNodeChannelCount({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeStereoPannerNodeChannelCount({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 678, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeStereoPannerNodeChannelCountMode({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeStereoPannerNodeChannelCountMode({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 679, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeStereoPannerNodeChannelInterpretation({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeStereoPannerNodeChannelInterpretation({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 680, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeClearOnprocessorerror({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeClearOnprocessorerror({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 681, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeDisconnect({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeDisconnect({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 682, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeDisconnectOutput({required StereoPannerNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeDisconnectOutput({required StereoPannerNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 683, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeFrbOverrideConnect({required StereoPannerNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeFrbOverrideConnect({required StereoPannerNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 684, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeStereoPannerNodeNumberOfInputs({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeStereoPannerNodeNumberOfInputs({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 685, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeStereoPannerNodeNumberOfOutputs({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeStereoPannerNodeNumberOfOutputs({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 686, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeRegistration({required StereoPannerNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeRegistration({required StereoPannerNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 688, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeSetChannelCount({required StereoPannerNode that , required int count });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeSetChannelCount({required StereoPannerNode that , required int count })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_CastedPrimitive_usize(count, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 689, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeSetChannelCountConstMeta,\n            argValues: [that, count],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_set_channel_count\",\n            argNames: [\"that\", \"count\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeSetChannelCountMode({required StereoPannerNode that , required ChannelCountMode mode });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeSetChannelCountMode({required StereoPannerNode that , required ChannelCountMode mode })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_channel_count_mode(mode, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 690, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeSetChannelCountModeConstMeta,\n            argValues: [that, mode],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_set_channel_count_mode\",\n            argNames: [\"that\", \"mode\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeSetChannelInterpretation({required StereoPannerNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeSetChannelInterpretation({required StereoPannerNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 691, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeStereoPannerNodeSetOnProcessorError({required StereoPannerNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeStereoPannerNodeSetOnProcessorError({required StereoPannerNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 692, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"StereoPannerNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeChannelConfig({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeChannelConfig({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 711, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeWaveShaperNodeChannelCount({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeWaveShaperNodeChannelCount({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 712, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiNodeWaveShaperNodeChannelCountMode({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiNodeWaveShaperNodeChannelCountMode({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 713, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiNodeWaveShaperNodeChannelInterpretation({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiNodeWaveShaperNodeChannelInterpretation({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 714, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeClearOnprocessorerror({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeClearOnprocessorerror({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 715, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeDisconnect({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeDisconnect({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 716, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeDisconnectOutput({required WaveShaperNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeDisconnectOutput({required WaveShaperNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 717, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeFrbOverrideConnect({required WaveShaperNode that , required AudioNode dest });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeFrbOverrideConnect({required WaveShaperNode that , required AudioNode dest })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_DynTrait_AudioNode(dest, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 718, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeFrbOverrideConnectConstMeta,\n            argValues: [that, dest],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeFrbOverrideConnectConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_frb_override_connect\",\n            argNames: [\"that\", \"dest\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<Float32List?> webAudioApiNodeWaveShaperNodeFrbOverrideCurve({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<Float32List?> webAudioApiNodeWaveShaperNodeFrbOverrideCurve({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 719, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_opt_list_prim_f_32_strict,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeFrbOverrideCurveConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeFrbOverrideCurveConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_frb_override_curve\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeWaveShaperNodeNumberOfInputs({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeWaveShaperNodeNumberOfInputs({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 720, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiNodeWaveShaperNodeNumberOfOutputs({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiNodeWaveShaperNodeNumberOfOutputs({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 721, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OverSampleType> webAudioApiNodeWaveShaperNodeOversample({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<OverSampleType> webAudioApiNodeWaveShaperNodeOversample({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 722, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_over_sample_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeOversampleConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeOversampleConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_oversample\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeRegistration({required WaveShaperNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeRegistration({required WaveShaperNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 723, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetChannelCount({required WaveShaperNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetChannelCount({required WaveShaperNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 724, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetChannelCountMode({required WaveShaperNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetChannelCountMode({required WaveShaperNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 725, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetChannelInterpretation({required WaveShaperNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetChannelInterpretation({required WaveShaperNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 726, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetCurve({required WaveShaperNode that , required List<double> curve });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetCurve({required WaveShaperNode that , required List<double> curve })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_list_prim_f_32_loose(curve, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 727, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetCurveConstMeta,\n            argValues: [that, curve],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetCurveConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_curve\",\n            argNames: [\"that\", \"curve\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetOnProcessorError({required WaveShaperNode that , required FutureOr<void> Function(String) callback });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetOnProcessorError({required WaveShaperNode that , required FutureOr<void> Function(String) callback })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(callback, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 728, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetOnProcessorErrorConstMeta,\n            argValues: [that, callback],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetOnProcessorErrorConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_on_processor_error\",\n            argNames: [\"that\", \"callback\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiNodeWaveShaperNodeSetOversample({required WaveShaperNode that , required OverSampleType oversample });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiNodeWaveShaperNodeSetOversample({required WaveShaperNode that , required OverSampleType oversample })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(that, serializer);\nsse_encode_over_sample_type(oversample, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 729, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperNodeSetOversampleConstMeta,\n            argValues: [that, oversample],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperNodeSetOversampleConstMeta => const TaskConstMeta(\n            debugName: \"WaveShaperNode_set_oversample\",\n            argNames: [\"that\", \"oversample\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AnalyserOptions> webAudioApiNodeAnalyserOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<AnalyserOptions> webAudioApiNodeAnalyserOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 730, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_analyser_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAnalyserOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAnalyserOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"analyser_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioBufferSourceOptions> webAudioApiNodeAudioBufferSourceOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioBufferSourceOptions> webAudioApiNodeAudioBufferSourceOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 731, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_buffer_source_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioBufferSourceOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioBufferSourceOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_buffer_source_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<AudioNodeOptions> webAudioApiNodeAudioNodeOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<AudioNodeOptions> webAudioApiNodeAudioNodeOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 732, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_audio_node_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeAudioNodeOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeAudioNodeOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"audio_node_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterOptions> webAudioApiNodeBiquadFilterOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterOptions> webAudioApiNodeBiquadFilterOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 733, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_biquad_filter_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"biquad_filter_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<BiquadFilterType> webAudioApiNodeBiquadFilterTypeDefault();\n\n",
        "api_impl_class_body": "@override Future<BiquadFilterType> webAudioApiNodeBiquadFilterTypeDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 734, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_biquad_filter_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeBiquadFilterTypeDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeBiquadFilterTypeDefaultConstMeta => const TaskConstMeta(\n            debugName: \"biquad_filter_type_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelMergerOptions> webAudioApiNodeChannelMergerOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<ChannelMergerOptions> webAudioApiNodeChannelMergerOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 735, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_merger_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelMergerOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelMergerOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"channel_merger_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelSplitterOptions> webAudioApiNodeChannelSplitterOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<ChannelSplitterOptions> webAudioApiNodeChannelSplitterOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 736, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_splitter_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeChannelSplitterOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeChannelSplitterOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"channel_splitter_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConstantSourceOptions> webAudioApiNodeConstantSourceOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<ConstantSourceOptions> webAudioApiNodeConstantSourceOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 737, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_constant_source_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConstantSourceOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConstantSourceOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"constant_source_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ConvolverOptions> webAudioApiNodeConvolverOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<ConvolverOptions> webAudioApiNodeConvolverOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 738, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_convolver_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeConvolverOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeConvolverOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"convolver_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DelayOptions> webAudioApiNodeDelayOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<DelayOptions> webAudioApiNodeDelayOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 739, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_delay_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDelayOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDelayOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"delay_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DistanceModelType> webAudioApiNodeDistanceModelTypeDefault();\n\n",
        "api_impl_class_body": "@override Future<DistanceModelType> webAudioApiNodeDistanceModelTypeDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 740, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_distance_model_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDistanceModelTypeDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDistanceModelTypeDefaultConstMeta => const TaskConstMeta(\n            debugName: \"distance_model_type_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<DynamicsCompressorOptions> webAudioApiNodeDynamicsCompressorOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<DynamicsCompressorOptions> webAudioApiNodeDynamicsCompressorOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 741, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_dynamics_compressor_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeDynamicsCompressorOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeDynamicsCompressorOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"dynamics_compressor_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<GainOptions> webAudioApiNodeGainOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<GainOptions> webAudioApiNodeGainOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 742, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_gain_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeGainOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeGainOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"gain_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorOptions> webAudioApiNodeOscillatorOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<OscillatorOptions> webAudioApiNodeOscillatorOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 743, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_oscillator_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"oscillator_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OscillatorType> webAudioApiNodeOscillatorTypeDefault();\n\n",
        "api_impl_class_body": "@override Future<OscillatorType> webAudioApiNodeOscillatorTypeDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 744, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_oscillator_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOscillatorTypeDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOscillatorTypeDefaultConstMeta => const TaskConstMeta(\n            debugName: \"oscillator_type_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<OverSampleType> webAudioApiNodeOverSampleTypeDefault();\n\n",
        "api_impl_class_body": "@override Future<OverSampleType> webAudioApiNodeOverSampleTypeDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 745, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_over_sample_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeOverSampleTypeDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeOverSampleTypeDefaultConstMeta => const TaskConstMeta(\n            debugName: \"over_sample_type_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PannerOptions> webAudioApiNodePannerOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<PannerOptions> webAudioApiNodePannerOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 746, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_panner_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePannerOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePannerOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"panner_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<PanningModelType> webAudioApiNodePanningModelTypeDefault();\n\n",
        "api_impl_class_body": "@override Future<PanningModelType> webAudioApiNodePanningModelTypeDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 747, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_panning_model_type,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodePanningModelTypeDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodePanningModelTypeDefaultConstMeta => const TaskConstMeta(\n            debugName: \"panning_model_type_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<StereoPannerOptions> webAudioApiNodeStereoPannerOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<StereoPannerOptions> webAudioApiNodeStereoPannerOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 748, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_stereo_panner_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeStereoPannerOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeStereoPannerOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"stereo_panner_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<WaveShaperOptions> webAudioApiNodeWaveShaperOptionsDefault();\n\n",
        "api_impl_class_body": "@override Future<WaveShaperOptions> webAudioApiNodeWaveShaperOptionsDefault()  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 749, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_wave_shaper_options,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiNodeWaveShaperOptionsDefaultConstMeta,\n            argValues: [],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiNodeWaveShaperOptionsDefaultConstMeta => const TaskConstMeta(\n            debugName: \"wave_shaper_options_default\",\n            argNames: [],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeChannelConfig({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeChannelConfig({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 750, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeChannelConfigConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeChannelConfigConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_channel_config\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiWorkletAudioWorkletNodeChannelCount({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiWorkletAudioWorkletNodeChannelCount({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 751, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeChannelCountConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_channel_count\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelCountMode> webAudioApiWorkletAudioWorkletNodeChannelCountMode({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelCountMode> webAudioApiWorkletAudioWorkletNodeChannelCountMode({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 752, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_count_mode,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeChannelCountModeConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_channel_count_mode\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<ChannelInterpretation> webAudioApiWorkletAudioWorkletNodeChannelInterpretation({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<ChannelInterpretation> webAudioApiWorkletAudioWorkletNodeChannelInterpretation({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 753, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_channel_interpretation,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeChannelInterpretationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_channel_interpretation\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeClearOnprocessorerror({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeClearOnprocessorerror({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 754, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeClearOnprocessorerrorConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeClearOnprocessorerrorConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_clear_onprocessorerror\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeDisconnect({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeDisconnect({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 755, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeDisconnectConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeDisconnectConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_disconnect\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeDisconnectOutput({required AudioWorkletNode that , required int output });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeDisconnectOutput({required AudioWorkletNode that , required int output })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\nsse_encode_CastedPrimitive_usize(output, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 756, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeDisconnectOutputConstMeta,\n            argValues: [that, output],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeDisconnectOutputConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_disconnect_output\",\n            argNames: [\"that\", \"output\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiWorkletAudioWorkletNodeNumberOfInputs({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiWorkletAudioWorkletNodeNumberOfInputs({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 757, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeNumberOfInputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeNumberOfInputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_number_of_inputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<int> webAudioApiWorkletAudioWorkletNodeNumberOfOutputs({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<int> webAudioApiWorkletAudioWorkletNodeNumberOfOutputs({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 758, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_CastedPrimitive_usize,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeNumberOfOutputsConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeNumberOfOutputsConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_number_of_outputs\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeParameters({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeParameters({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 759, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeParametersConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeParametersConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_parameters\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeRegistration({required AudioWorkletNode that });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeRegistration({required AudioWorkletNode that })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 760, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeRegistrationConstMeta,\n            argValues: [that],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeRegistrationConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_registration\",\n            argNames: [\"that\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelCount({required AudioWorkletNode that , required int v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelCount({required AudioWorkletNode that , required int v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\nsse_encode_CastedPrimitive_usize(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 761, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeSetChannelCountConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeSetChannelCountConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_set_channel_count\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelCountMode({required AudioWorkletNode that , required ChannelCountMode v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelCountMode({required AudioWorkletNode that , required ChannelCountMode v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\nsse_encode_channel_count_mode(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 762, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeSetChannelCountModeConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeSetChannelCountModeConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_set_channel_count_mode\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      },
      {
        "header": {
          "file_top": "",
          "import": "",
          "part": ""
        },
        "body_top": "",
        "api_class_body": "Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelInterpretation({required AudioWorkletNode that , required ChannelInterpretation v });\n\n",
        "api_impl_class_body": "@override Future<void> webAudioApiWorkletAudioWorkletNodeSetChannelInterpretation({required AudioWorkletNode that , required ChannelInterpretation v })  { return handler.executeNormal(NormalTask(\n            callFfi: (port_) {\n              \n            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(that, serializer);\nsse_encode_channel_interpretation(v, serializer);\n            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 763, port: port_);\n            \n            },\n            codec: \n        SseCodec(\n          decodeSuccessData: sse_decode_unit,\n          decodeErrorData: null,\n        )\n        ,\n            constMeta: kWebAudioApiWorkletAudioWorkletNodeSetChannelInterpretationConstMeta,\n            argValues: [that, v],\n            apiImpl: this,\n        )); }\n\n\n        TaskConstMeta get kWebAudioApiWorkletAudioWorkletNodeSetChannelInterpretationConstMeta => const TaskConstMeta(\n            debugName: \"AudioWorkletNode_set_channel_interpretation\",\n            argNames: [\"that\", \"v\"],\n        );\n        \n\n",
        "api_impl_class_methods": [],
        "body": ""
      }
    ],
    "extra_functions": {
      "common": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "\n            Future<void> Function(int, dynamic)\n                encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(FutureOr<void> Function(Event) raw) {\n              return (callId, rawArg0) async {\n                final arg0 = dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(rawArg0);\n\n\n                Box<void>? rawOutput;\n                Box<AnyhowException>? rawError;\n                try {\n                    rawOutput = Box(await raw(arg0));\n                } catch (e, s) {\n                    rawError = Box(AnyhowException(\"$e\\n\\n$s\"));\n                }\n\n                final serializer = SseSerializer(generalizedFrbRustBinding);\n                assert((rawOutput != null) ^ (rawError != null));\n                if (rawOutput != null) {\n                    serializer.buffer.putUint8(0);\n                    sse_encode_unit(rawOutput.value, serializer);\n                } else {\n                    serializer.buffer.putUint8(1);\n                    sse_encode_AnyhowException(rawError!.value, serializer);\n                }\n                final output = serializer.intoRaw();\n\n                generalizedFrbRustBinding.dartFnDeliverOutput(\n                  callId: callId, ptr: output.ptr, rustVecLen: output.rustVecLen, dataLen: output.dataLen);\n              };\n            }\n            ",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "\n            Future<void> Function(int, dynamic)\n                encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(FutureOr<void> Function(OfflineAudioCompletionEvent) raw) {\n              return (callId, rawArg0) async {\n                final arg0 = dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(rawArg0);\n\n\n                Box<void>? rawOutput;\n                Box<AnyhowException>? rawError;\n                try {\n                    rawOutput = Box(await raw(arg0));\n                } catch (e, s) {\n                    rawError = Box(AnyhowException(\"$e\\n\\n$s\"));\n                }\n\n                final serializer = SseSerializer(generalizedFrbRustBinding);\n                assert((rawOutput != null) ^ (rawError != null));\n                if (rawOutput != null) {\n                    serializer.buffer.putUint8(0);\n                    sse_encode_unit(rawOutput.value, serializer);\n                } else {\n                    serializer.buffer.putUint8(1);\n                    sse_encode_AnyhowException(rawError!.value, serializer);\n                }\n                final output = serializer.intoRaw();\n\n                generalizedFrbRustBinding.dartFnDeliverOutput(\n                  callId: callId, ptr: output.ptr, rustVecLen: output.rustVecLen, dataLen: output.dataLen);\n              };\n            }\n            ",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "\n            Future<void> Function(int, dynamic)\n                encode_DartFn_Inputs_String_Output_unit_AnyhowException(FutureOr<void> Function(String) raw) {\n              return (callId, rawArg0) async {\n                final arg0 = dco_decode_String(rawArg0);\n\n\n                Box<void>? rawOutput;\n                Box<AnyhowException>? rawError;\n                try {\n                    rawOutput = Box(await raw(arg0));\n                } catch (e, s) {\n                    rawError = Box(AnyhowException(\"$e\\n\\n$s\"));\n                }\n\n                final serializer = SseSerializer(generalizedFrbRustBinding);\n                assert((rawOutput != null) ^ (rawError != null));\n                if (rawOutput != null) {\n                    serializer.buffer.putUint8(0);\n                    sse_encode_unit(rawOutput.value, serializer);\n                } else {\n                    serializer.buffer.putUint8(1);\n                    sse_encode_AnyhowException(rawError!.value, serializer);\n                }\n                final output = serializer.intoRaw();\n\n                generalizedFrbRustBinding.dartFnDeliverOutput(\n                  callId: callId, ptr: output.ptr, rustVecLen: output.rustVecLen, dataLen: output.dataLen);\n              };\n            }\n            ",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AnalyserNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AnalyserNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnalyserNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AnalyserNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AnalyserNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioBuffer;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioBuffer;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioBuffer => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioBuffer => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioBufferSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioBufferSourceNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferSourceNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioBufferSourceNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioBufferSourceNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioContext;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioContext => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioContext => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioContextRegistration;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioContextRegistration;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextRegistrationPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioContextRegistration => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioContextRegistration => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioDestinationNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioDestinationNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioDestinationNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioDestinationNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioDestinationNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioListener;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioListener;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioListenerPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioListener => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioListener => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioParam;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioParam;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioParam => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioParam => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioParamId;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioParamId;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamIdPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioParamId => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioParamId => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioProcessingEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioProcessingEvent;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioProcessingEventPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioProcessingEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioProcessingEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioRenderCapacity;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioRenderCapacity;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioRenderCapacity => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioRenderCapacity => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioRenderCapacityEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioRenderCapacityEvent;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityEventPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioRenderCapacityEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioRenderCapacityEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioWorkletNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioWorkletNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioWorkletNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AudioWorkletNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AudioWorkletNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BiquadFilterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BiquadFilterNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BiquadFilterNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BiquadFilterNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BiquadFilterNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BlobEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BlobEvent;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BlobEventPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BlobEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BlobEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelConfig;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelConfig;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelConfigPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelConfig => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelConfig => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelMergerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelMergerNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelMergerNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelMergerNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelMergerNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelSplitterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelSplitterNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelSplitterNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ChannelSplitterNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ChannelSplitterNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConcreteBaseAudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConcreteBaseAudioContext;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConcreteBaseAudioContextPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConcreteBaseAudioContext => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConcreteBaseAudioContext => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConstantSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConstantSourceNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConstantSourceNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConstantSourceNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConstantSourceNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConvolverNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConvolverNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConvolverNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ConvolverNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ConvolverNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DelayNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DelayNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DelayNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DelayNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DelayNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DynamicsCompressorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DynamicsCompressorNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DynamicsCompressorNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_DynamicsCompressorNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_DynamicsCompressorNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Event => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Event => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GainNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GainNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GainNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_GainNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_GainNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IirFilterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IirFilterNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IirFilterNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IirFilterNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IirFilterNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaElementAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaElementAudioSourceNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaElementAudioSourceNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaElementAudioSourceNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaElementAudioSourceNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaRecorder;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaRecorder;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaRecorderPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaRecorder => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaRecorder => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStream;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStream;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStream => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStream => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamAudioDestinationNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamAudioDestinationNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioDestinationNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamAudioDestinationNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamAudioDestinationNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamAudioSourceNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioSourceNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamAudioSourceNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamAudioSourceNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamConstraints;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamConstraints;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamConstraintsPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamConstraints => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamConstraints => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamTrack;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamTrack;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamTrack => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamTrack => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamTrackAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamTrackAudioSourceNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackAudioSourceNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MediaStreamTrackAudioSourceNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MediaStreamTrackAudioSourceNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MyMediaElement;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MyMediaElement;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MyMediaElementPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MyMediaElement => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MyMediaElement => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OfflineAudioCompletionEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OfflineAudioCompletionEvent;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioCompletionEventPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OfflineAudioCompletionEvent => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OfflineAudioCompletionEvent => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OfflineAudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OfflineAudioContext;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioContextPtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OfflineAudioContext => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OfflineAudioContext => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OscillatorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OscillatorNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OscillatorNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_OscillatorNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_OscillatorNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PannerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PannerNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PannerNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PannerNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PannerNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PeriodicWave;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PeriodicWave;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PeriodicWavePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PeriodicWave => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PeriodicWave => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ScriptProcessorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ScriptProcessorNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ScriptProcessorNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ScriptProcessorNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ScriptProcessorNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StereoPannerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StereoPannerNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StereoPannerNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StereoPannerNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StereoPannerNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_WaveShaperNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_WaveShaperNode;\n\nCrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WaveShaperNodePtr;\n\n",
          "api_impl_class_body": "RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_WaveShaperNode => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode;\n\nRustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_WaveShaperNode => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        }
      ],
      "io": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnalyserNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferSourceNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextRegistrationPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistrationPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioDestinationNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioListenerPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListenerPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamIdPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamIdPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioProcessingEventPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEventPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityEventPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEventPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioWorkletNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BiquadFilterNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BlobEventPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEventPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelConfigPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfigPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelMergerNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelSplitterNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConcreteBaseAudioContextPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContextPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConstantSourceNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConvolverNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DelayNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DynamicsCompressorNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GainNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IirFilterNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaElementAudioSourceNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaRecorderPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorderPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioDestinationNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioSourceNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamConstraintsPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraintsPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackAudioSourceNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MyMediaElementPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElementPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioCompletionEventPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEventPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioContextPtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContextPtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OscillatorNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PannerNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PeriodicWavePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWavePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ScriptProcessorNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StereoPannerNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WaveShaperNodePtr => wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNodePtr;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        }
      ],
      "web": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AnalyserNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioBufferSourceNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioContextRegistrationPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioDestinationNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioListenerPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioParamIdPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioProcessingEventPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioRenderCapacityEventPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AudioWorkletNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BiquadFilterNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BlobEventPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelConfigPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelMergerNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChannelSplitterNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConcreteBaseAudioContextPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConstantSourceNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConvolverNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DelayNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DynamicsCompressorNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EventPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GainNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IirFilterNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaElementAudioSourceNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaRecorderPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioDestinationNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamAudioSourceNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamConstraintsPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MediaStreamTrackAudioSourceNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MyMediaElementPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioCompletionEventPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OfflineAudioContextPtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OscillatorNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PannerNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PeriodicWavePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ScriptProcessorNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StereoPannerNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WaveShaperNodePtr => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode;\n\n",
          "api_impl_class_methods": [],
          "body": ""
        }
      ]
    },
    "extra_from_parser": {
      "common": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        }
      ],
      "io": [],
      "web": []
    }
  },
  "rust2dart": {
    "inner": {
      "common": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnyhowException dco_decode_AnyhowException(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AnyhowException(raw as String);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamId dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioParamIdImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelConfig dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn EventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamConstraints dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamConstraintsImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PeriodicWaveImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRegistration dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextRegistrationImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn EventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_CastedPrimitive_i_64(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_CastedPrimitive_usize(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "FutureOr<void> Function(Event) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "FutureOr<void> Function(OfflineAudioCompletionEvent) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "FutureOr<void> Function(String) dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Object dco_decode_DartOpaque(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn decodeDartOpaque(raw, generalizedFrbRustBinding);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNode dco_decode_DynTrait_AudioNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError('Not implemented in this codec, please use the other one');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRegistration dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextRegistrationImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamId dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioParamIdImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelConfig dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn EventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamConstraints dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamConstraintsImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PeriodicWaveImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalDcoDecode(raw as List<dynamic>);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "String dco_decode_String(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as String;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNodeExt dco_decode_TraitDef_AnalyserNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNodeExt dco_decode_TraitDef_AudioBufferSourceNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_AudioBufferSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextExt dco_decode_TraitDef_AudioContextExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNodeExt dco_decode_TraitDef_AudioDestinationNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNode dco_decode_TraitDef_AudioNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamExt dco_decode_TraitDef_AudioParamExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioScheduledSourceNode dco_decode_TraitDef_AudioScheduledSourceNode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletProcessor dco_decode_TraitDef_AudioWorkletProcessor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BaseAudioContext dco_decode_TraitDef_BaseAudioContext(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNodeExt dco_decode_TraitDef_BiquadFilterNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNodeExt dco_decode_TraitDef_ChannelMergerNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNodeExt dco_decode_TraitDef_ChannelSplitterNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNodeExt dco_decode_TraitDef_ConstantSourceNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_ConstantSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNodeExt dco_decode_TraitDef_ConvolverNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNodeExt dco_decode_TraitDef_DelayNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNodeExt dco_decode_TraitDef_DynamicsCompressorNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "EventExt dco_decode_TraitDef_EventExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNodeExt dco_decode_TraitDef_GainNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IIRFilterNodeExt dco_decode_TraitDef_IIRFilterNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNodeExt dco_decode_TraitDef_MediaElementAudioSourceNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNodeExt dco_decode_TraitDef_MediaStreamAudioDestinationNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNodeExt dco_decode_TraitDef_MediaStreamAudioSourceNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamExt dco_decode_TraitDef_MediaStreamExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNodeExt dco_decode_TraitDef_MediaStreamTrackAudioSourceNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContextExt dco_decode_TraitDef_OfflineAudioContextExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNodeExt dco_decode_TraitDef_OscillatorNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_OscillatorNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNodeExt dco_decode_TraitDef_PannerNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNodeExt dco_decode_TraitDef_ScriptProcessorNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNodeExt dco_decode_TraitDef_StereoPannerNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNodeExt dco_decode_TraitDef_WaveShaperNodeExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNodeMiscExt dco_decode_TraitDef_WaveShaperNodeMiscExt(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nthrow UnimplementedError();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserOptions dco_decode_analyser_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');\n                return AnalyserOptions(fftSize: dco_decode_CastedPrimitive_usize(arr[0]),\nmaxDecibels: dco_decode_f_64(arr[1]),\nminDecibels: dco_decode_f_64(arr[2]),\nsmoothingTimeConstant: dco_decode_f_64(arr[3]),\naudioNodeOptions: dco_decode_audio_node_options(arr[4]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferOptions dco_decode_audio_buffer_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return AudioBufferOptions(numberOfChannels: dco_decode_CastedPrimitive_usize(arr[0]),\nlength: dco_decode_CastedPrimitive_usize(arr[1]),\nsampleRate: dco_decode_f_32(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceOptions dco_decode_audio_buffer_source_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');\n                return AudioBufferSourceOptions(buffer: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(arr[0]),\ndetune: dco_decode_f_32(arr[1]),\nloop: dco_decode_bool(arr[2]),\nloopStart: dco_decode_f_64(arr[3]),\nloopEnd: dco_decode_f_64(arr[4]),\nplaybackRate: dco_decode_f_32(arr[5]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextLatencyCategory dco_decode_audio_context_latency_category(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nswitch (raw[0]) {\n                case 0: return AudioContextLatencyCategory_Balanced();\ncase 1: return AudioContextLatencyCategory_Interactive();\ncase 2: return AudioContextLatencyCategory_Playback();\ncase 3: return AudioContextLatencyCategory_Custom(dco_decode_f_64(raw[1]),);\n                default: throw Exception(\"unreachable\");\n            }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextOptions dco_decode_audio_context_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');\n                return AudioContextOptions(latencyHint: dco_decode_audio_context_latency_category(arr[0]),\nsampleRate: dco_decode_opt_box_autoadd_f_32(arr[1]),\nsinkId: dco_decode_String(arr[2]),\nrenderSizeHint: dco_decode_audio_context_render_size_category(arr[3]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRenderSizeCategory dco_decode_audio_context_render_size_category(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextRenderSizeCategory.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextState dco_decode_audio_context_state(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AudioContextState.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeImplementor dco_decode_audio_node_implementor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nswitch (raw[0]) {\n                case 0: return AudioNodeImplementor_Variant0(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(raw[1]),);\ncase 1: return AudioNodeImplementor_Variant1(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(raw[1]),);\ncase 2: return AudioNodeImplementor_Variant2(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(raw[1]),);\ncase 3: return AudioNodeImplementor_Variant3(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(raw[1]),);\ncase 4: return AudioNodeImplementor_Variant4(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(raw[1]),);\ncase 5: return AudioNodeImplementor_Variant5(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw[1]),);\ncase 6: return AudioNodeImplementor_Variant6(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(raw[1]),);\ncase 7: return AudioNodeImplementor_Variant7(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(raw[1]),);\ncase 8: return AudioNodeImplementor_Variant8(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(raw[1]),);\ncase 9: return AudioNodeImplementor_Variant9(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(raw[1]),);\ncase 10: return AudioNodeImplementor_Variant10(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(raw[1]),);\ncase 11: return AudioNodeImplementor_Variant11(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 12: return AudioNodeImplementor_Variant12(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(raw[1]),);\ncase 13: return AudioNodeImplementor_Variant13(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(raw[1]),);\ncase 14: return AudioNodeImplementor_Variant14(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(raw[1]),);\ncase 15: return AudioNodeImplementor_Variant15(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(raw[1]),);\ncase 16: return AudioNodeImplementor_Variant16(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(raw[1]),);\ncase 17: return AudioNodeImplementor_Variant17(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(raw[1]),);\ncase 18: return AudioNodeImplementor_Variant18(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(raw[1]),);\ncase 19: return AudioNodeImplementor_Variant19(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 20: return AudioNodeImplementor_Variant20(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(raw[1]),);\ncase 21: return AudioNodeImplementor_Variant21(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(raw[1]),);\ncase 22: return AudioNodeImplementor_Variant22(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(raw[1]),);\n                default: throw Exception(\"unreachable\");\n            }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeOptions dco_decode_audio_node_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return AudioNodeOptions(channelCount: dco_decode_CastedPrimitive_usize(arr[0]),\nchannelCountMode: dco_decode_channel_count_mode(arr[1]),\nchannelInterpretation: dco_decode_channel_interpretation(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamDescriptor dco_decode_audio_param_descriptor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');\n                return AudioParamDescriptor(name: dco_decode_String(arr[0]),\nautomationRate: dco_decode_automation_rate(arr[1]),\ndefaultValue: dco_decode_f_32(arr[2]),\nminValue: dco_decode_f_32(arr[3]),\nmaxValue: dco_decode_f_32(arr[4]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityOptions dco_decode_audio_render_capacity_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');\n                return AudioRenderCapacityOptions(updateInterval: dco_decode_f_64(arr[0]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nswitch (raw[0]) {\n                case 0: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant0(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(raw[1]),);\ncase 1: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant1(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(raw[1]),);\ncase 2: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant2(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 3: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant3(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 4: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant4(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 5: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant5(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 6: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant6(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 7: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant7(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 8: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant8(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 9: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant9(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 10: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant10(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(raw[1]),);\ncase 11: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant11(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw[1]),);\ncase 12: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant12(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw[1]),);\ncase 13: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant13(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw[1]),);\ncase 14: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant14(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(raw[1]),);\ncase 15: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant15(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(raw[1]),);\ncase 16: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant16(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(raw[1]),);\ncase 17: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant17(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 18: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant18(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 19: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant19(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 20: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant20(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 21: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant21(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(raw[1]),);\ncase 22: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant22(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(raw[1]),);\ncase 23: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant23(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(raw[1]),);\ncase 24: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant24(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(raw[1]),);\ncase 25: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant25(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 26: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant26(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 27: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant27(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 28: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant28(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 29: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant29(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 30: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant30(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(raw[1]),);\ncase 31: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant31(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(raw[1]),);\n                default: throw Exception(\"unreachable\");\n            }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nswitch (raw[0]) {\n                case 0: return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum_Variant0(dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(raw[1]),);\n                default: throw Exception(\"unreachable\");\n            }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AutomationRate dco_decode_automation_rate(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn AutomationRate.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterOptions dco_decode_biquad_filter_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');\n                return BiquadFilterOptions(q: dco_decode_f_32(arr[0]),\ndetune: dco_decode_f_32(arr[1]),\nfrequency: dco_decode_f_32(arr[2]),\ngain: dco_decode_f_32(arr[3]),\ntype: dco_decode_biquad_filter_type(arr[4]),\naudioNodeOptions: dco_decode_audio_node_options(arr[5]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterType dco_decode_biquad_filter_type(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn BiquadFilterType.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "bool dco_decode_bool(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as bool;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferOptions dco_decode_box_autoadd_audio_buffer_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_audio_buffer_options(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextOptions dco_decode_box_autoadd_audio_context_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_audio_context_options(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeImplementor dco_decode_box_autoadd_audio_node_implementor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_audio_node_implementor(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamDescriptor dco_decode_box_autoadd_audio_param_descriptor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_audio_param_descriptor(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityOptions dco_decode_box_autoadd_audio_render_capacity_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_audio_render_capacity_options(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double dco_decode_box_autoadd_f_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as double;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double dco_decode_box_autoadd_f_64(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as double;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWaveOptions dco_decode_box_autoadd_periodic_wave_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dco_decode_periodic_wave_options(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_box_autoadd_u_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as int;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelCountMode dco_decode_channel_count_mode(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelCountMode.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelInterpretation dco_decode_channel_interpretation(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn ChannelInterpretation.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerOptions dco_decode_channel_merger_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');\n                return ChannelMergerOptions(numberOfInputs: dco_decode_CastedPrimitive_usize(arr[0]),\naudioNodeOptions: dco_decode_audio_node_options(arr[1]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterOptions dco_decode_channel_splitter_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');\n                return ChannelSplitterOptions(numberOfOutputs: dco_decode_CastedPrimitive_usize(arr[0]),\naudioNodeOptions: dco_decode_audio_node_options(arr[1]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceOptions dco_decode_constant_source_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');\n                return ConstantSourceOptions(offset: dco_decode_f_32(arr[0]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverOptions dco_decode_convolver_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return ConvolverOptions(buffer: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(arr[0]),\ndisableNormalization: dco_decode_bool(arr[1]),\naudioNodeOptions: dco_decode_audio_node_options(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayOptions dco_decode_delay_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return DelayOptions(maxDelayTime: dco_decode_f_64(arr[0]),\ndelayTime: dco_decode_f_64(arr[1]),\naudioNodeOptions: dco_decode_audio_node_options(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DistanceModelType dco_decode_distance_model_type(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn DistanceModelType.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorOptions dco_decode_dynamics_compressor_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');\n                return DynamicsCompressorOptions(attack: dco_decode_f_32(arr[0]),\nknee: dco_decode_f_32(arr[1]),\nratio: dco_decode_f_32(arr[2]),\nrelease: dco_decode_f_32(arr[3]),\nthreshold: dco_decode_f_32(arr[4]),\naudioNodeOptions: dco_decode_audio_node_options(arr[5]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double dco_decode_f_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as double;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double dco_decode_f_64(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as double;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainOptions dco_decode_gain_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');\n                return GainOptions(gain: dco_decode_f_32(arr[0]),\naudioNodeOptions: dco_decode_audio_node_options(arr[1]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_i_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as int;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PlatformInt64 dco_decode_i_64(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dcoDecodeI64(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Level dco_decode_level(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn Level.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<MediaStreamTrack> dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn (raw as List<dynamic>).map(dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack).toList();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<AudioParamDescriptor> dco_decode_list_audio_param_descriptor(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn (raw as List<dynamic>).map(dco_decode_audio_param_descriptor).toList();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<Float32List> dco_decode_list_list_prim_f_32_strict(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn (raw as List<dynamic>).map(dco_decode_list_prim_f_32_strict).toList();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<double> dco_decode_list_prim_f_32_loose(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as List<double>;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float32List dco_decode_list_prim_f_32_strict(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as Float32List;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<double> dco_decode_list_prim_f_64_loose(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as List<double>;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float64List dco_decode_list_prim_f_64_strict(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as Float64List;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Uint8List dco_decode_list_prim_u_8_strict(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as Uint8List;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "LogEntry dco_decode_log_entry(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');\n                return LogEntry(timeMillis: dco_decode_CastedPrimitive_i_64(arr[0]),\nmsg: dco_decode_String(arr[1]),\nlogLevel: dco_decode_level(arr[2]),\nlbl: dco_decode_String(arr[3]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackState dco_decode_media_stream_track_state(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn MediaStreamTrackState.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaTrackConstraints dco_decode_media_track_constraints(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');\n                return MediaTrackConstraints(sampleRate: dco_decode_opt_box_autoadd_f_32(arr[0]),\nlatency: dco_decode_opt_box_autoadd_f_64(arr[1]),\nchannelCount: dco_decode_opt_box_autoadd_u_32(arr[2]),\ndeviceId: dco_decode_opt_String(arr[3]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "String? dco_decode_opt_String(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_String(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_box_autoadd_f_32(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_64(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_box_autoadd_f_64(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int? dco_decode_opt_box_autoadd_u_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_box_autoadd_u_32(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float32List? dco_decode_opt_list_prim_f_32_strict(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw == null ? null : dco_decode_list_prim_f_32_strict(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorOptions dco_decode_oscillator_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');\n                return OscillatorOptions(type: dco_decode_oscillator_type(arr[0]),\nfrequency: dco_decode_f_32(arr[1]),\ndetune: dco_decode_f_32(arr[2]),\nperiodicWave: dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(arr[3]),\naudioNodeOptions: dco_decode_audio_node_options(arr[4]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorType dco_decode_oscillator_type(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OscillatorType.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OverSampleType dco_decode_over_sample_type(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn OverSampleType.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerOptions dco_decode_panner_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 15) throw Exception('unexpected arr length: expect 15 but see ${arr.length}');\n                return PannerOptions(panningModel: dco_decode_panning_model_type(arr[0]),\ndistanceModel: dco_decode_distance_model_type(arr[1]),\npositionX: dco_decode_f_32(arr[2]),\npositionY: dco_decode_f_32(arr[3]),\npositionZ: dco_decode_f_32(arr[4]),\norientationX: dco_decode_f_32(arr[5]),\norientationY: dco_decode_f_32(arr[6]),\norientationZ: dco_decode_f_32(arr[7]),\nrefDistance: dco_decode_f_64(arr[8]),\nmaxDistance: dco_decode_f_64(arr[9]),\nrolloffFactor: dco_decode_f_64(arr[10]),\nconeInnerAngle: dco_decode_f_64(arr[11]),\nconeOuterAngle: dco_decode_f_64(arr[12]),\nconeOuterGain: dco_decode_f_64(arr[13]),\naudioNodeOptions: dco_decode_audio_node_options(arr[14]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PanningModelType dco_decode_panning_model_type(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn PanningModelType.values[raw as int];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWaveOptions dco_decode_periodic_wave_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return PeriodicWaveOptions(real: dco_decode_opt_list_prim_f_32_strict(arr[0]),\nimag: dco_decode_opt_list_prim_f_32_strict(arr[1]),\ndisableNormalization: dco_decode_bool(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "(AudioParam,AudioParamId) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n            if (arr.length != 2) {\n                throw Exception('Expected 2 elements, got ${arr.length}');\n            }\n            return (dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(arr[0]),dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(arr[1]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerOptions dco_decode_stereo_panner_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');\n                return StereoPannerOptions(pan: dco_decode_f_32(arr[0]),\naudioNodeOptions: dco_decode_audio_node_options(arr[1]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_u_32(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as int;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int dco_decode_u_8(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn raw as int;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void dco_decode_unit(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BigInt dco_decode_usize(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nreturn dcoDecodeU64(raw);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperOptions dco_decode_wave_shaper_options(dynamic raw)",
              "body": "// Codec=Dco (DartCObject based), see doc to use other codecs\nfinal arr = raw as List<dynamic>;\n                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');\n                return WaveShaperOptions(curve: dco_decode_opt_list_prim_f_32_strict(arr[0]),\noversample: dco_decode_over_sample_type(arr[1]),\naudioNodeOptions: dco_decode_audio_node_options(arr[2]),);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_String(deserializer);\n        return AnyhowException(inner);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(deserializer);\n        return inner;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamId sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioParamIdImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelConfig sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn EventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamConstraints sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamConstraintsImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PeriodicWaveImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRegistration sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioContextRegistrationImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn EventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_64(deserializer);\n        return inner.toInt();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_usize(deserializer);\n        return inner.toInt();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Object sse_decode_DartOpaque(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_usize(deserializer);\n        return decodeDartOpaque(inner, generalizedFrbRustBinding);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNode sse_decode_DynTrait_AudioNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AnalyserNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioBufferSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRegistration sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioContextRegistrationImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioListener sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioListenerImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParam sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioParamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamId sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioParamIdImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioProcessingEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioProcessingEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacity sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioRenderCapacityEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioWorkletNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn AudioWorkletNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BiquadFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BlobEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn BlobEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelConfig sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelMergerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ChannelSplitterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConcreteBaseAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConcreteBaseAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConstantSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ConvolverNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DelayNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn DynamicsCompressorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Event sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn EventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn GainNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "IirFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn IirFilterNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaElementAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaElementAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaRecorder sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaRecorderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStream sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioDestinationNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamConstraints sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamConstraintsImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrack sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MediaStreamTrackAudioSourceNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MyMediaElement sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn MyMediaElementImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioCompletionEventImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OfflineAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OfflineAudioContextImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn OscillatorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn PeriodicWaveImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ScriptProcessorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn ScriptProcessorNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn StereoPannerNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn WaveShaperNodeImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "String sse_decode_String(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_list_prim_u_8_strict(deserializer);\n        return utf8.decoder.convert(inner);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnalyserOptions sse_decode_analyser_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_fftSize = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_maxDecibels = sse_decode_f_64(deserializer);\nvar var_minDecibels = sse_decode_f_64(deserializer);\nvar var_smoothingTimeConstant = sse_decode_f_64(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn AnalyserOptions(fftSize: var_fftSize, maxDecibels: var_maxDecibels, minDecibels: var_minDecibels, smoothingTimeConstant: var_smoothingTimeConstant, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferOptions sse_decode_audio_buffer_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_numberOfChannels = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_length = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_sampleRate = sse_decode_f_32(deserializer);\nreturn AudioBufferOptions(numberOfChannels: var_numberOfChannels, length: var_length, sampleRate: var_sampleRate);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferSourceOptions sse_decode_audio_buffer_source_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_buffer = sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(deserializer);\nvar var_detune = sse_decode_f_32(deserializer);\nvar var_loop = sse_decode_bool(deserializer);\nvar var_loopStart = sse_decode_f_64(deserializer);\nvar var_loopEnd = sse_decode_f_64(deserializer);\nvar var_playbackRate = sse_decode_f_32(deserializer);\nreturn AudioBufferSourceOptions(buffer: var_buffer, detune: var_detune, loop: var_loop, loopStart: var_loopStart, loopEnd: var_loopEnd, playbackRate: var_playbackRate);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextLatencyCategory sse_decode_audio_context_latency_category(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            var tag_ = sse_decode_i_32(deserializer);\n            switch (tag_) { case 0: return AudioContextLatencyCategory_Balanced();case 1: return AudioContextLatencyCategory_Interactive();case 2: return AudioContextLatencyCategory_Playback();case 3: var var_field0 = sse_decode_f_64(deserializer);\nreturn AudioContextLatencyCategory_Custom(var_field0); default: throw UnimplementedError(''); }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextOptions sse_decode_audio_context_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_latencyHint = sse_decode_audio_context_latency_category(deserializer);\nvar var_sampleRate = sse_decode_opt_box_autoadd_f_32(deserializer);\nvar var_sinkId = sse_decode_String(deserializer);\nvar var_renderSizeHint = sse_decode_audio_context_render_size_category(deserializer);\nreturn AudioContextOptions(latencyHint: var_latencyHint, sampleRate: var_sampleRate, sinkId: var_sinkId, renderSizeHint: var_renderSizeHint);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextRenderSizeCategory sse_decode_audio_context_render_size_category(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return AudioContextRenderSizeCategory.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextState sse_decode_audio_context_state(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return AudioContextState.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeImplementor sse_decode_audio_node_implementor(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            var tag_ = sse_decode_i_32(deserializer);\n            switch (tag_) { case 0: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(deserializer);\nreturn AudioNodeImplementor_Variant0(var_field0);case 1: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(deserializer);\nreturn AudioNodeImplementor_Variant1(var_field0);case 2: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(deserializer);\nreturn AudioNodeImplementor_Variant2(var_field0);case 3: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(deserializer);\nreturn AudioNodeImplementor_Variant3(var_field0);case 4: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(deserializer);\nreturn AudioNodeImplementor_Variant4(var_field0);case 5: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\nreturn AudioNodeImplementor_Variant5(var_field0);case 6: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(deserializer);\nreturn AudioNodeImplementor_Variant6(var_field0);case 7: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(deserializer);\nreturn AudioNodeImplementor_Variant7(var_field0);case 8: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(deserializer);\nreturn AudioNodeImplementor_Variant8(var_field0);case 9: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(deserializer);\nreturn AudioNodeImplementor_Variant9(var_field0);case 10: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(deserializer);\nreturn AudioNodeImplementor_Variant10(var_field0);case 11: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn AudioNodeImplementor_Variant11(var_field0);case 12: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(deserializer);\nreturn AudioNodeImplementor_Variant12(var_field0);case 13: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(deserializer);\nreturn AudioNodeImplementor_Variant13(var_field0);case 14: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(deserializer);\nreturn AudioNodeImplementor_Variant14(var_field0);case 15: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(deserializer);\nreturn AudioNodeImplementor_Variant15(var_field0);case 16: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(deserializer);\nreturn AudioNodeImplementor_Variant16(var_field0);case 17: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(deserializer);\nreturn AudioNodeImplementor_Variant17(var_field0);case 18: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(deserializer);\nreturn AudioNodeImplementor_Variant18(var_field0);case 19: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn AudioNodeImplementor_Variant19(var_field0);case 20: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(deserializer);\nreturn AudioNodeImplementor_Variant20(var_field0);case 21: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(deserializer);\nreturn AudioNodeImplementor_Variant21(var_field0);case 22: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(deserializer);\nreturn AudioNodeImplementor_Variant22(var_field0); default: throw UnimplementedError(''); }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeOptions sse_decode_audio_node_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_channelCount = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_channelCountMode = sse_decode_channel_count_mode(deserializer);\nvar var_channelInterpretation = sse_decode_channel_interpretation(deserializer);\nreturn AudioNodeOptions(channelCount: var_channelCount, channelCountMode: var_channelCountMode, channelInterpretation: var_channelInterpretation);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamDescriptor sse_decode_audio_param_descriptor(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_name = sse_decode_String(deserializer);\nvar var_automationRate = sse_decode_automation_rate(deserializer);\nvar var_defaultValue = sse_decode_f_32(deserializer);\nvar var_minValue = sse_decode_f_32(deserializer);\nvar var_maxValue = sse_decode_f_32(deserializer);\nreturn AudioParamDescriptor(name: var_name, automationRate: var_automationRate, defaultValue: var_defaultValue, minValue: var_minValue, maxValue: var_maxValue);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityOptions sse_decode_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_updateInterval = sse_decode_f_64(deserializer);\nreturn AudioRenderCapacityOptions(updateInterval: var_updateInterval);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            var tag_ = sse_decode_i_32(deserializer);\n            switch (tag_) { case 0: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant0(var_field0);case 1: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant1(var_field0);case 2: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant2(var_field0);case 3: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant3(var_field0);case 4: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant4(var_field0);case 5: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant5(var_field0);case 6: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant6(var_field0);case 7: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant7(var_field0);case 8: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant8(var_field0);case 9: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant9(var_field0);case 10: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant10(var_field0);case 11: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant11(var_field0);case 12: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant12(var_field0);case 13: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant13(var_field0);case 14: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant14(var_field0);case 15: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant15(var_field0);case 16: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant16(var_field0);case 17: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant17(var_field0);case 18: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant18(var_field0);case 19: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant19(var_field0);case 20: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant20(var_field0);case 21: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant21(var_field0);case 22: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant22(var_field0);case 23: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant23(var_field0);case 24: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant24(var_field0);case 25: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant25(var_field0);case 26: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant26(var_field0);case 27: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant27(var_field0);case 28: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant28(var_field0);case 29: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant29(var_field0);case 30: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant30(var_field0);case 31: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant31(var_field0); default: throw UnimplementedError(''); }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            var tag_ = sse_decode_i_32(deserializer);\n            switch (tag_) { case 0: var var_field0 = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(deserializer);\nreturn Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum_Variant0(var_field0); default: throw UnimplementedError(''); }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AutomationRate sse_decode_automation_rate(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return AutomationRate.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterOptions sse_decode_biquad_filter_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_q = sse_decode_f_32(deserializer);\nvar var_detune = sse_decode_f_32(deserializer);\nvar var_frequency = sse_decode_f_32(deserializer);\nvar var_gain = sse_decode_f_32(deserializer);\nvar var_type = sse_decode_biquad_filter_type(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn BiquadFilterOptions(q: var_q, detune: var_detune, frequency: var_frequency, gain: var_gain, type: var_type, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BiquadFilterType sse_decode_biquad_filter_type(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return BiquadFilterType.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "bool sse_decode_bool(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getUint8() != 0;"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBufferOptions sse_decode_box_autoadd_audio_buffer_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_audio_buffer_options(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioContextOptions sse_decode_box_autoadd_audio_context_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_audio_context_options(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioNodeImplementor sse_decode_box_autoadd_audio_node_implementor(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_audio_node_implementor(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioParamDescriptor sse_decode_box_autoadd_audio_param_descriptor(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_audio_param_descriptor(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioRenderCapacityOptions sse_decode_box_autoadd_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_audio_render_capacity_options(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double sse_decode_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_f_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double sse_decode_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_f_64(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWaveOptions sse_decode_box_autoadd_periodic_wave_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_periodic_wave_options(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn (sse_decode_u_32(deserializer));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelCountMode sse_decode_channel_count_mode(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return ChannelCountMode.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelInterpretation sse_decode_channel_interpretation(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return ChannelInterpretation.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelMergerOptions sse_decode_channel_merger_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_numberOfInputs = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn ChannelMergerOptions(numberOfInputs: var_numberOfInputs, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ChannelSplitterOptions sse_decode_channel_splitter_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_numberOfOutputs = sse_decode_CastedPrimitive_usize(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn ChannelSplitterOptions(numberOfOutputs: var_numberOfOutputs, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConstantSourceOptions sse_decode_constant_source_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_offset = sse_decode_f_32(deserializer);\nreturn ConstantSourceOptions(offset: var_offset);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "ConvolverOptions sse_decode_convolver_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_buffer = sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(deserializer);\nvar var_disableNormalization = sse_decode_bool(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn ConvolverOptions(buffer: var_buffer, disableNormalization: var_disableNormalization, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DelayOptions sse_decode_delay_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_maxDelayTime = sse_decode_f_64(deserializer);\nvar var_delayTime = sse_decode_f_64(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn DelayOptions(maxDelayTime: var_maxDelayTime, delayTime: var_delayTime, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DistanceModelType sse_decode_distance_model_type(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return DistanceModelType.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "DynamicsCompressorOptions sse_decode_dynamics_compressor_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_attack = sse_decode_f_32(deserializer);\nvar var_knee = sse_decode_f_32(deserializer);\nvar var_ratio = sse_decode_f_32(deserializer);\nvar var_release = sse_decode_f_32(deserializer);\nvar var_threshold = sse_decode_f_32(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn DynamicsCompressorOptions(attack: var_attack, knee: var_knee, ratio: var_ratio, release: var_release, threshold: var_threshold, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double sse_decode_f_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getFloat32();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double sse_decode_f_64(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getFloat64();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "GainOptions sse_decode_gain_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_gain = sse_decode_f_32(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn GainOptions(gain: var_gain, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_i_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getInt32();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PlatformInt64 sse_decode_i_64(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getPlatformInt64();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Level sse_decode_level(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return Level.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<MediaStreamTrack> sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n        var len_ = sse_decode_i_32(deserializer);\n        var ans_ = <MediaStreamTrack>[];\n        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(deserializer)); }\n        return ans_;\n        "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<AudioParamDescriptor> sse_decode_list_audio_param_descriptor(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n        var len_ = sse_decode_i_32(deserializer);\n        var ans_ = <AudioParamDescriptor>[];\n        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_audio_param_descriptor(deserializer)); }\n        return ans_;\n        "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<Float32List> sse_decode_list_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n        var len_ = sse_decode_i_32(deserializer);\n        var ans_ = <Float32List>[];\n        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_list_prim_f_32_strict(deserializer)); }\n        return ans_;\n        "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar len_ = sse_decode_i_32(deserializer);\n                return deserializer.buffer.getFloat32List(len_);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar len_ = sse_decode_i_32(deserializer);\n                return deserializer.buffer.getFloat32List(len_);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar len_ = sse_decode_i_32(deserializer);\n                return deserializer.buffer.getFloat64List(len_);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar len_ = sse_decode_i_32(deserializer);\n                return deserializer.buffer.getFloat64List(len_);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar len_ = sse_decode_i_32(deserializer);\n                return deserializer.buffer.getUint8List(len_);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "LogEntry sse_decode_log_entry(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_timeMillis = sse_decode_CastedPrimitive_i_64(deserializer);\nvar var_msg = sse_decode_String(deserializer);\nvar var_logLevel = sse_decode_level(deserializer);\nvar var_lbl = sse_decode_String(deserializer);\nreturn LogEntry(timeMillis: var_timeMillis, msg: var_msg, logLevel: var_logLevel, lbl: var_lbl);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaStreamTrackState sse_decode_media_stream_track_state(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return MediaStreamTrackState.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "MediaTrackConstraints sse_decode_media_track_constraints(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_sampleRate = sse_decode_opt_box_autoadd_f_32(deserializer);\nvar var_latency = sse_decode_opt_box_autoadd_f_64(deserializer);\nvar var_channelCount = sse_decode_opt_box_autoadd_u_32(deserializer);\nvar var_deviceId = sse_decode_opt_String(deserializer);\nreturn MediaTrackConstraints(sampleRate: var_sampleRate, latency: var_latency, channelCount: var_channelCount, deviceId: var_deviceId);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "String? sse_decode_opt_String(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_String(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AudioBuffer? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWave? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_box_autoadd_f_32(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_box_autoadd_f_64(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_box_autoadd_u_32(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "Float32List? sse_decode_opt_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n            if (sse_decode_bool(deserializer)) {\n                return (sse_decode_list_prim_f_32_strict(deserializer));\n            } else {\n                return null;\n            }\n            "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorOptions sse_decode_oscillator_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_type = sse_decode_oscillator_type(deserializer);\nvar var_frequency = sse_decode_f_32(deserializer);\nvar var_detune = sse_decode_f_32(deserializer);\nvar var_periodicWave = sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn OscillatorOptions(type: var_type, frequency: var_frequency, detune: var_detune, periodicWave: var_periodicWave, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OscillatorType sse_decode_oscillator_type(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return OscillatorType.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "OverSampleType sse_decode_over_sample_type(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return OverSampleType.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PannerOptions sse_decode_panner_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_panningModel = sse_decode_panning_model_type(deserializer);\nvar var_distanceModel = sse_decode_distance_model_type(deserializer);\nvar var_positionX = sse_decode_f_32(deserializer);\nvar var_positionY = sse_decode_f_32(deserializer);\nvar var_positionZ = sse_decode_f_32(deserializer);\nvar var_orientationX = sse_decode_f_32(deserializer);\nvar var_orientationY = sse_decode_f_32(deserializer);\nvar var_orientationZ = sse_decode_f_32(deserializer);\nvar var_refDistance = sse_decode_f_64(deserializer);\nvar var_maxDistance = sse_decode_f_64(deserializer);\nvar var_rolloffFactor = sse_decode_f_64(deserializer);\nvar var_coneInnerAngle = sse_decode_f_64(deserializer);\nvar var_coneOuterAngle = sse_decode_f_64(deserializer);\nvar var_coneOuterGain = sse_decode_f_64(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn PannerOptions(panningModel: var_panningModel, distanceModel: var_distanceModel, positionX: var_positionX, positionY: var_positionY, positionZ: var_positionZ, orientationX: var_orientationX, orientationY: var_orientationY, orientationZ: var_orientationZ, refDistance: var_refDistance, maxDistance: var_maxDistance, rolloffFactor: var_rolloffFactor, coneInnerAngle: var_coneInnerAngle, coneOuterAngle: var_coneOuterAngle, coneOuterGain: var_coneOuterGain, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PanningModelType sse_decode_panning_model_type(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar inner = sse_decode_i_32(deserializer);\n        return PanningModelType.values[inner];"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "PeriodicWaveOptions sse_decode_periodic_wave_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_real = sse_decode_opt_list_prim_f_32_strict(deserializer);\nvar var_imag = sse_decode_opt_list_prim_f_32_strict(deserializer);\nvar var_disableNormalization = sse_decode_bool(deserializer);\nreturn PeriodicWaveOptions(real: var_real, imag: var_imag, disableNormalization: var_disableNormalization);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "(AudioParam,AudioParamId) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_field0 = sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(deserializer);\nvar var_field1 = sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(deserializer);\nreturn (var_field0, var_field1);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "StereoPannerOptions sse_decode_stereo_panner_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_pan = sse_decode_f_32(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn StereoPannerOptions(pan: var_pan, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_u_32(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getUint32();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "int sse_decode_u_8(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getUint8();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_decode_unit(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "BigInt sse_decode_usize(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nreturn deserializer.buffer.getBigUint64();"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "WaveShaperOptions sse_decode_wave_shaper_options(SseDeserializer deserializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nvar var_curve = sse_decode_opt_list_prim_f_32_strict(deserializer);\nvar var_oversample = sse_decode_over_sample_type(deserializer);\nvar var_audioNodeOptions = sse_decode_audio_node_options(deserializer);\nreturn WaveShaperOptions(curve: var_curve, oversample: var_oversample, audioNodeOptions: var_audioNodeOptions);"
            }
          ],
          "body": ""
        }
      ],
      "io": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnyhowException dco_decode_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamId dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelConfig dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_CastedPrimitive_i_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_CastedPrimitive_usize(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(Event) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(OfflineAudioCompletionEvent) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(String) dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "Object dco_decode_DartOpaque(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNode dco_decode_DynTrait_AudioNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamId dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelConfig dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw)",
              "body": null
            },
            {
              "signature": "String dco_decode_String(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNodeExt dco_decode_TraitDef_AnalyserNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNodeExt dco_decode_TraitDef_AudioBufferSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_AudioBufferSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextExt dco_decode_TraitDef_AudioContextExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNodeExt dco_decode_TraitDef_AudioDestinationNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNode dco_decode_TraitDef_AudioNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamExt dco_decode_TraitDef_AudioParamExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioScheduledSourceNode dco_decode_TraitDef_AudioScheduledSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletProcessor dco_decode_TraitDef_AudioWorkletProcessor(dynamic raw)",
              "body": null
            },
            {
              "signature": "BaseAudioContext dco_decode_TraitDef_BaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNodeExt dco_decode_TraitDef_BiquadFilterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNodeExt dco_decode_TraitDef_ChannelMergerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNodeExt dco_decode_TraitDef_ChannelSplitterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNodeExt dco_decode_TraitDef_ConstantSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_ConstantSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNodeExt dco_decode_TraitDef_ConvolverNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNodeExt dco_decode_TraitDef_DelayNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNodeExt dco_decode_TraitDef_DynamicsCompressorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "EventExt dco_decode_TraitDef_EventExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNodeExt dco_decode_TraitDef_GainNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "IIRFilterNodeExt dco_decode_TraitDef_IIRFilterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNodeExt dco_decode_TraitDef_MediaElementAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNodeExt dco_decode_TraitDef_MediaStreamAudioDestinationNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNodeExt dco_decode_TraitDef_MediaStreamAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamExt dco_decode_TraitDef_MediaStreamExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNodeExt dco_decode_TraitDef_MediaStreamTrackAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContextExt dco_decode_TraitDef_OfflineAudioContextExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNodeExt dco_decode_TraitDef_OscillatorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_OscillatorNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNodeExt dco_decode_TraitDef_PannerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNodeExt dco_decode_TraitDef_ScriptProcessorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNodeExt dco_decode_TraitDef_StereoPannerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNodeExt dco_decode_TraitDef_WaveShaperNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNodeMiscExt dco_decode_TraitDef_WaveShaperNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserOptions dco_decode_analyser_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions dco_decode_audio_buffer_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceOptions dco_decode_audio_buffer_source_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextLatencyCategory dco_decode_audio_context_latency_category(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextOptions dco_decode_audio_context_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRenderSizeCategory dco_decode_audio_context_render_size_category(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextState dco_decode_audio_context_state(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor dco_decode_audio_node_implementor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeOptions dco_decode_audio_node_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor dco_decode_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions dco_decode_audio_render_capacity_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "AutomationRate dco_decode_automation_rate(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterOptions dco_decode_biquad_filter_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterType dco_decode_biquad_filter_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "bool dco_decode_bool(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions dco_decode_box_autoadd_audio_buffer_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextOptions dco_decode_box_autoadd_audio_context_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor dco_decode_box_autoadd_audio_node_implementor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor dco_decode_box_autoadd_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions dco_decode_box_autoadd_audio_render_capacity_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_box_autoadd_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_box_autoadd_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions dco_decode_box_autoadd_periodic_wave_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_box_autoadd_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelCountMode dco_decode_channel_count_mode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelInterpretation dco_decode_channel_interpretation(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerOptions dco_decode_channel_merger_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterOptions dco_decode_channel_splitter_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceOptions dco_decode_constant_source_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverOptions dco_decode_convolver_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayOptions dco_decode_delay_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "DistanceModelType dco_decode_distance_model_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorOptions dco_decode_dynamics_compressor_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainOptions dco_decode_gain_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_i_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "PlatformInt64 dco_decode_i_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "Level dco_decode_level(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<MediaStreamTrack> dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<AudioParamDescriptor> dco_decode_list_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<Float32List> dco_decode_list_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<double> dco_decode_list_prim_f_32_loose(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float32List dco_decode_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<double> dco_decode_list_prim_f_64_loose(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float64List dco_decode_list_prim_f_64_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "Uint8List dco_decode_list_prim_u_8_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "LogEntry dco_decode_log_entry(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackState dco_decode_media_stream_track_state(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaTrackConstraints dco_decode_media_track_constraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "String? dco_decode_opt_String(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "int? dco_decode_opt_box_autoadd_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float32List? dco_decode_opt_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorOptions dco_decode_oscillator_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorType dco_decode_oscillator_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "OverSampleType dco_decode_over_sample_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerOptions dco_decode_panner_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "PanningModelType dco_decode_panning_model_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions dco_decode_periodic_wave_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "(AudioParam,AudioParamId) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerOptions dco_decode_stereo_panner_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_u_8(dynamic raw)",
              "body": null
            },
            {
              "signature": "void dco_decode_unit(dynamic raw)",
              "body": null
            },
            {
              "signature": "BigInt dco_decode_usize(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperOptions dco_decode_wave_shaper_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamId sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelConfig sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Object sse_decode_DartOpaque(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNode sse_decode_DynTrait_AudioNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamId sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelConfig sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "String sse_decode_String(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserOptions sse_decode_analyser_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions sse_decode_audio_buffer_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceOptions sse_decode_audio_buffer_source_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextLatencyCategory sse_decode_audio_context_latency_category(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextOptions sse_decode_audio_context_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRenderSizeCategory sse_decode_audio_context_render_size_category(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextState sse_decode_audio_context_state(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor sse_decode_audio_node_implementor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeOptions sse_decode_audio_node_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor sse_decode_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions sse_decode_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AutomationRate sse_decode_automation_rate(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterOptions sse_decode_biquad_filter_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterType sse_decode_biquad_filter_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "bool sse_decode_bool(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions sse_decode_box_autoadd_audio_buffer_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextOptions sse_decode_box_autoadd_audio_context_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor sse_decode_box_autoadd_audio_node_implementor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor sse_decode_box_autoadd_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions sse_decode_box_autoadd_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions sse_decode_box_autoadd_periodic_wave_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelCountMode sse_decode_channel_count_mode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelInterpretation sse_decode_channel_interpretation(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerOptions sse_decode_channel_merger_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterOptions sse_decode_channel_splitter_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceOptions sse_decode_constant_source_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverOptions sse_decode_convolver_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayOptions sse_decode_delay_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DistanceModelType sse_decode_distance_model_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorOptions sse_decode_dynamics_compressor_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainOptions sse_decode_gain_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_i_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PlatformInt64 sse_decode_i_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Level sse_decode_level(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<MediaStreamTrack> sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<AudioParamDescriptor> sse_decode_list_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<Float32List> sse_decode_list_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "LogEntry sse_decode_log_entry(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackState sse_decode_media_stream_track_state(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaTrackConstraints sse_decode_media_track_constraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "String? sse_decode_opt_String(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float32List? sse_decode_opt_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorOptions sse_decode_oscillator_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorType sse_decode_oscillator_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OverSampleType sse_decode_over_sample_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerOptions sse_decode_panner_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PanningModelType sse_decode_panning_model_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions sse_decode_periodic_wave_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "(AudioParam,AudioParamId) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerOptions sse_decode_stereo_panner_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_u_8(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "void sse_decode_unit(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BigInt sse_decode_usize(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperOptions sse_decode_wave_shaper_options(SseDeserializer deserializer)",
              "body": null
            }
          ],
          "body": ""
        }
      ],
      "web": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "AnyhowException dco_decode_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamId dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelConfig dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_CastedPrimitive_i_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_CastedPrimitive_usize(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(Event) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(OfflineAudioCompletionEvent) dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "FutureOr<void> Function(String) dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw)",
              "body": null
            },
            {
              "signature": "Object dco_decode_DartOpaque(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNode dco_decode_DynTrait_AudioNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioListener dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParam dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamId dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "BlobEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelConfig dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "Event dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "IirFilterNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaRecorder dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStream dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "MyMediaElement dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNode dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw)",
              "body": null
            },
            {
              "signature": "String dco_decode_String(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserNodeExt dco_decode_TraitDef_AnalyserNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNodeExt dco_decode_TraitDef_AudioBufferSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_AudioBufferSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextExt dco_decode_TraitDef_AudioContextExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioDestinationNodeExt dco_decode_TraitDef_AudioDestinationNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNode dco_decode_TraitDef_AudioNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamExt dco_decode_TraitDef_AudioParamExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioScheduledSourceNode dco_decode_TraitDef_AudioScheduledSourceNode(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioWorkletProcessor dco_decode_TraitDef_AudioWorkletProcessor(dynamic raw)",
              "body": null
            },
            {
              "signature": "BaseAudioContext dco_decode_TraitDef_BaseAudioContext(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterNodeExt dco_decode_TraitDef_BiquadFilterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerNodeExt dco_decode_TraitDef_ChannelMergerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNodeExt dco_decode_TraitDef_ChannelSplitterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNodeExt dco_decode_TraitDef_ConstantSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_ConstantSourceNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverNodeExt dco_decode_TraitDef_ConvolverNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayNodeExt dco_decode_TraitDef_DelayNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNodeExt dco_decode_TraitDef_DynamicsCompressorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "EventExt dco_decode_TraitDef_EventExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainNodeExt dco_decode_TraitDef_GainNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "IIRFilterNodeExt dco_decode_TraitDef_IIRFilterNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNodeExt dco_decode_TraitDef_MediaElementAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNodeExt dco_decode_TraitDef_MediaStreamAudioDestinationNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNodeExt dco_decode_TraitDef_MediaStreamAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamExt dco_decode_TraitDef_MediaStreamExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNodeExt dco_decode_TraitDef_MediaStreamTrackAudioSourceNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OfflineAudioContextExt dco_decode_TraitDef_OfflineAudioContextExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNodeExt dco_decode_TraitDef_OscillatorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorNodeScheduledSourceNodeMiscExt dco_decode_TraitDef_OscillatorNodeScheduledSourceNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerNodeExt dco_decode_TraitDef_PannerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNodeExt dco_decode_TraitDef_ScriptProcessorNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerNodeExt dco_decode_TraitDef_StereoPannerNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNodeExt dco_decode_TraitDef_WaveShaperNodeExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperNodeMiscExt dco_decode_TraitDef_WaveShaperNodeMiscExt(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnalyserOptions dco_decode_analyser_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions dco_decode_audio_buffer_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceOptions dco_decode_audio_buffer_source_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextLatencyCategory dco_decode_audio_context_latency_category(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextOptions dco_decode_audio_context_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextRenderSizeCategory dco_decode_audio_context_render_size_category(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextState dco_decode_audio_context_state(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor dco_decode_audio_node_implementor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeOptions dco_decode_audio_node_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor dco_decode_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions dco_decode_audio_render_capacity_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "AutomationRate dco_decode_automation_rate(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterOptions dco_decode_biquad_filter_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "BiquadFilterType dco_decode_biquad_filter_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "bool dco_decode_bool(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions dco_decode_box_autoadd_audio_buffer_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioContextOptions dco_decode_box_autoadd_audio_context_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor dco_decode_box_autoadd_audio_node_implementor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor dco_decode_box_autoadd_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions dco_decode_box_autoadd_audio_render_capacity_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_box_autoadd_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_box_autoadd_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions dco_decode_box_autoadd_periodic_wave_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_box_autoadd_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelCountMode dco_decode_channel_count_mode(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelInterpretation dco_decode_channel_interpretation(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelMergerOptions dco_decode_channel_merger_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ChannelSplitterOptions dco_decode_channel_splitter_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConstantSourceOptions dco_decode_constant_source_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "ConvolverOptions dco_decode_convolver_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "DelayOptions dco_decode_delay_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "DistanceModelType dco_decode_distance_model_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorOptions dco_decode_dynamics_compressor_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double dco_decode_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "GainOptions dco_decode_gain_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_i_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "PlatformInt64 dco_decode_i_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "Level dco_decode_level(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<MediaStreamTrack> dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<AudioParamDescriptor> dco_decode_list_audio_param_descriptor(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<Float32List> dco_decode_list_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<double> dco_decode_list_prim_f_32_loose(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float32List dco_decode_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "List<double> dco_decode_list_prim_f_64_loose(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float64List dco_decode_list_prim_f_64_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "Uint8List dco_decode_list_prim_u_8_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "LogEntry dco_decode_log_entry(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackState dco_decode_media_stream_track_state(dynamic raw)",
              "body": null
            },
            {
              "signature": "MediaTrackConstraints dco_decode_media_track_constraints(dynamic raw)",
              "body": null
            },
            {
              "signature": "String? dco_decode_opt_String(dynamic raw)",
              "body": null
            },
            {
              "signature": "AudioBuffer? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWave? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(dynamic raw)",
              "body": null
            },
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "double? dco_decode_opt_box_autoadd_f_64(dynamic raw)",
              "body": null
            },
            {
              "signature": "int? dco_decode_opt_box_autoadd_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "Float32List? dco_decode_opt_list_prim_f_32_strict(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorOptions dco_decode_oscillator_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "OscillatorType dco_decode_oscillator_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "OverSampleType dco_decode_over_sample_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "PannerOptions dco_decode_panner_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "PanningModelType dco_decode_panning_model_type(dynamic raw)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions dco_decode_periodic_wave_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "(AudioParam,AudioParamId) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(dynamic raw)",
              "body": null
            },
            {
              "signature": "StereoPannerOptions dco_decode_stereo_panner_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_u_32(dynamic raw)",
              "body": null
            },
            {
              "signature": "int dco_decode_u_8(dynamic raw)",
              "body": null
            },
            {
              "signature": "void dco_decode_unit(dynamic raw)",
              "body": null
            },
            {
              "signature": "BigInt dco_decode_usize(dynamic raw)",
              "body": null
            },
            {
              "signature": "WaveShaperOptions dco_decode_wave_shaper_options(dynamic raw)",
              "body": null
            },
            {
              "signature": "AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamId sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelConfig sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Object sse_decode_DartOpaque(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNode sse_decode_DynTrait_AudioNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRegistration sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioListener sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParam sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamId sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioProcessingEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacity sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioWorkletNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BlobEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelConfig sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConcreteBaseAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Event sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "IirFilterNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaElementAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaRecorder sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStream sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioDestinationNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamConstraints sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrack sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackAudioSourceNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MyMediaElement sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioCompletionEvent sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OfflineAudioContext sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ScriptProcessorNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperNode sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "String sse_decode_String(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AnalyserOptions sse_decode_analyser_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions sse_decode_audio_buffer_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferSourceOptions sse_decode_audio_buffer_source_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextLatencyCategory sse_decode_audio_context_latency_category(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextOptions sse_decode_audio_context_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextRenderSizeCategory sse_decode_audio_context_render_size_category(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextState sse_decode_audio_context_state(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor sse_decode_audio_node_implementor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeOptions sse_decode_audio_node_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor sse_decode_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions sse_decode_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AutomationRate sse_decode_automation_rate(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterOptions sse_decode_biquad_filter_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BiquadFilterType sse_decode_biquad_filter_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "bool sse_decode_bool(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBufferOptions sse_decode_box_autoadd_audio_buffer_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioContextOptions sse_decode_box_autoadd_audio_context_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioNodeImplementor sse_decode_box_autoadd_audio_node_implementor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioParamDescriptor sse_decode_box_autoadd_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioRenderCapacityOptions sse_decode_box_autoadd_audio_render_capacity_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions sse_decode_box_autoadd_periodic_wave_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelCountMode sse_decode_channel_count_mode(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelInterpretation sse_decode_channel_interpretation(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelMergerOptions sse_decode_channel_merger_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ChannelSplitterOptions sse_decode_channel_splitter_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConstantSourceOptions sse_decode_constant_source_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "ConvolverOptions sse_decode_convolver_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DelayOptions sse_decode_delay_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DistanceModelType sse_decode_distance_model_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "DynamicsCompressorOptions sse_decode_dynamics_compressor_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double sse_decode_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "GainOptions sse_decode_gain_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_i_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PlatformInt64 sse_decode_i_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Level sse_decode_level(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<MediaStreamTrack> sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<AudioParamDescriptor> sse_decode_list_audio_param_descriptor(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<Float32List> sse_decode_list_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "LogEntry sse_decode_log_entry(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaStreamTrackState sse_decode_media_stream_track_state(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "MediaTrackConstraints sse_decode_media_track_constraints(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "String? sse_decode_opt_String(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "AudioBuffer? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWave? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "Float32List? sse_decode_opt_list_prim_f_32_strict(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorOptions sse_decode_oscillator_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OscillatorType sse_decode_oscillator_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "OverSampleType sse_decode_over_sample_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PannerOptions sse_decode_panner_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PanningModelType sse_decode_panning_model_type(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "PeriodicWaveOptions sse_decode_periodic_wave_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "(AudioParam,AudioParamId) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "StereoPannerOptions sse_decode_stereo_panner_options(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_u_32(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "int sse_decode_u_8(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "void sse_decode_unit(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "BigInt sse_decode_usize(SseDeserializer deserializer)",
              "body": null
            },
            {
              "signature": "WaveShaperOptions sse_decode_wave_shaper_options(SseDeserializer deserializer)",
              "body": null
            }
          ],
          "body": ""
        }
      ]
    }
  },
  "dart2rust": {
    "inner": {
      "common": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_String(self.message, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AnalyserNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioContextImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioDestinationNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioListenerImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioParamImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioParamIdImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioProcessingEventImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityEventImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioWorkletNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BiquadFilterNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BlobEventImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelConfigImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelMergerNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelSplitterNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConcreteBaseAudioContextImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConstantSourceNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConvolverNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DelayNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DynamicsCompressorNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as EventImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as GainNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as IirFilterNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaElementAudioSourceNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaRecorderImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioDestinationNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioSourceNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamConstraintsImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackAudioSourceNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MyMediaElementImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioCompletionEventImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioContextImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OscillatorNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PannerNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PeriodicWaveImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ScriptProcessorNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as StereoPannerNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as WaveShaperNodeImpl).frbInternalSseEncode(move: true), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AnalyserNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioProcessingEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BiquadFilterNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BlobEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConstantSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConvolverNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MyMediaElementImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioCompletionEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioContextImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OscillatorNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PannerNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as WaveShaperNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AnalyserNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioContextImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioContextRegistrationImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioDestinationNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioListenerImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioParamImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioProcessingEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioWorkletNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BiquadFilterNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BlobEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelMergerNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelSplitterNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConcreteBaseAudioContextImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConstantSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConvolverNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DelayNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DynamicsCompressorNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as EventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as GainNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as IirFilterNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaElementAudioSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaRecorderImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioDestinationNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackAudioSourceNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MyMediaElementImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioCompletionEventImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioContextImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OscillatorNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PannerNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ScriptProcessorNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as StereoPannerNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as WaveShaperNodeImpl).frbInternalSseEncode(move: false), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_64(sseEncodeCastedPrimitiveI64(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(FutureOr<void> Function(Event) self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_DartOpaque(encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(FutureOr<void> Function(OfflineAudioCompletionEvent) self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_DartOpaque(encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(FutureOr<void> Function(String) self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_DartOpaque(encode_DartFn_Inputs_String_Output_unit_AnyhowException(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_DartOpaque(Object self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize(BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(self, portManager.dartHandlerPort, generalizedFrbRustBinding))).toUnsigned(64), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_DynTrait_AudioNode(AudioNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_node_implementor(\n        (() {\n            if (self is AnalyserNode) {\n                    return AudioNodeImplementor.variant0(self);\n                }\n                if (self is AudioBufferSourceNode) {\n                    return AudioNodeImplementor.variant1(self);\n                }\n                if (self is AudioDestinationNode) {\n                    return AudioNodeImplementor.variant2(self);\n                }\n                if (self is AudioParam) {\n                    return AudioNodeImplementor.variant3(self);\n                }\n                if (self is AudioWorkletNode) {\n                    return AudioNodeImplementor.variant4(self);\n                }\n                if (self is BiquadFilterNode) {\n                    return AudioNodeImplementor.variant5(self);\n                }\n                if (self is ChannelMergerNode) {\n                    return AudioNodeImplementor.variant6(self);\n                }\n                if (self is ChannelSplitterNode) {\n                    return AudioNodeImplementor.variant7(self);\n                }\n                if (self is ConstantSourceNode) {\n                    return AudioNodeImplementor.variant8(self);\n                }\n                if (self is ConvolverNode) {\n                    return AudioNodeImplementor.variant9(self);\n                }\n                if (self is DelayNode) {\n                    return AudioNodeImplementor.variant10(self);\n                }\n                if (self is DynamicsCompressorNode) {\n                    return AudioNodeImplementor.variant11(self);\n                }\n                if (self is GainNode) {\n                    return AudioNodeImplementor.variant12(self);\n                }\n                if (self is IirFilterNode) {\n                    return AudioNodeImplementor.variant13(self);\n                }\n                if (self is MediaElementAudioSourceNode) {\n                    return AudioNodeImplementor.variant14(self);\n                }\n                if (self is MediaStreamAudioDestinationNode) {\n                    return AudioNodeImplementor.variant15(self);\n                }\n                if (self is MediaStreamAudioSourceNode) {\n                    return AudioNodeImplementor.variant16(self);\n                }\n                if (self is MediaStreamTrackAudioSourceNode) {\n                    return AudioNodeImplementor.variant17(self);\n                }\n                if (self is OscillatorNode) {\n                    return AudioNodeImplementor.variant18(self);\n                }\n                if (self is PannerNode) {\n                    return AudioNodeImplementor.variant19(self);\n                }\n                if (self is ScriptProcessorNode) {\n                    return AudioNodeImplementor.variant20(self);\n                }\n                if (self is StereoPannerNode) {\n                    return AudioNodeImplementor.variant21(self);\n                }\n                if (self is WaveShaperNode) {\n                    return AudioNodeImplementor.variant22(self);\n                }\n                \n            throw Exception('not reachable');\n        })()\n        , serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(\n        (() {\n            if (self is AudioParamProxyVariantAudioBufferSourceNodeDetune) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant0(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioBufferSourceNodePlaybackRate) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant1(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerForwardX) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant2(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerForwardY) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant3(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerForwardZ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant4(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerPositionX) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant5(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerPositionY) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant6(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerPositionZ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant7(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerUpX) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant8(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerUpY) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant9(self._upstream);\n                }\n                if (self is AudioParamProxyVariantAudioListenerUpZ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant10(self._upstream);\n                }\n                if (self is AudioParamProxyVariantBiquadFilterNodeDetune) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant11(self._upstream);\n                }\n                if (self is AudioParamProxyVariantBiquadFilterNodeFrequency) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant12(self._upstream);\n                }\n                if (self is AudioParamProxyVariantBiquadFilterNodeGain) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant13(self._upstream);\n                }\n                if (self is AudioParamProxyVariantBiquadFilterNodeQ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant14(self._upstream);\n                }\n                if (self is AudioParamProxyVariantConstantSourceNodeOffset) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant15(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDelayNodeDelayTime) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant16(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDynamicsCompressorNodeAttack) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant17(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDynamicsCompressorNodeKnee) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant18(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDynamicsCompressorNodeRatio) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant19(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDynamicsCompressorNodeRelease) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant20(self._upstream);\n                }\n                if (self is AudioParamProxyVariantDynamicsCompressorNodeThreshold) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant21(self._upstream);\n                }\n                if (self is AudioParamProxyVariantGainNodeGain) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant22(self._upstream);\n                }\n                if (self is AudioParamProxyVariantOscillatorNodeDetune) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant23(self._upstream);\n                }\n                if (self is AudioParamProxyVariantOscillatorNodeFrequency) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant24(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodeOrientationX) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant25(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodeOrientationY) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant26(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodeOrientationZ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant27(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodePositionX) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant28(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodePositionY) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant29(self._upstream);\n                }\n                if (self is AudioParamProxyVariantPannerNodePositionZ) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant30(self._upstream);\n                }\n                if (self is AudioParamProxyVariantStereoPannerNodePan) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum.variant31(self._upstream);\n                }\n                \n            throw Exception('not reachable');\n        })()\n        , serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(MediaStream self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(\n        (() {\n            if (self is MediaStreamProxyVariantMediaStreamAudioDestinationNodeStream) {\n                    return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum.variant0(self._upstream);\n                }\n                \n            throw Exception('not reachable');\n        })()\n        , serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(MediaStream self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nthrow UnimplementedError('Unreachable ()');"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AnalyserNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioBufferSourceNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioContextImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioContextRegistrationImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioDestinationNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioListenerImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioParamImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioParamIdImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioProcessingEventImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioRenderCapacityEventImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as AudioWorkletNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BiquadFilterNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as BlobEventImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelConfigImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelMergerNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ChannelSplitterNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConcreteBaseAudioContextImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConstantSourceNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ConvolverNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DelayNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as DynamicsCompressorNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as EventImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as GainNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as IirFilterNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaElementAudioSourceNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaRecorderImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioDestinationNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamAudioSourceNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamConstraintsImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MediaStreamTrackAudioSourceNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as MyMediaElementImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioCompletionEventImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OfflineAudioContextImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as OscillatorNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PannerNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as PeriodicWaveImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as ScriptProcessorNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as StereoPannerNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_usize((self as WaveShaperNodeImpl).frbInternalSseEncode(move: null), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_StreamSink_log_entry_Sse(RustStreamSink<LogEntry> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_String(self.setupAndSerialize(codec: SseCodec(\n            decodeSuccessData: sse_decode_log_entry,\n            decodeErrorData: sse_decode_AnyhowException,\n        )), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_String(String self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_analyser_options(AnalyserOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_usize(self.fftSize, serializer);\nsse_encode_f_64(self.maxDecibels, serializer);\nsse_encode_f_64(self.minDecibels, serializer);\nsse_encode_f_64(self.smoothingTimeConstant, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_usize(self.numberOfChannels, serializer);\nsse_encode_CastedPrimitive_usize(self.length, serializer);\nsse_encode_f_32(self.sampleRate, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_buffer_source_options(AudioBufferSourceOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(self.buffer, serializer);\nsse_encode_f_32(self.detune, serializer);\nsse_encode_bool(self.loop, serializer);\nsse_encode_f_64(self.loopStart, serializer);\nsse_encode_f_64(self.loopEnd, serializer);\nsse_encode_f_32(self.playbackRate, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_context_latency_category(AudioContextLatencyCategory self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nswitch (self) { case AudioContextLatencyCategory_Balanced(): sse_encode_i_32(0, serializer); case AudioContextLatencyCategory_Interactive(): sse_encode_i_32(1, serializer); case AudioContextLatencyCategory_Playback(): sse_encode_i_32(2, serializer); case AudioContextLatencyCategory_Custom(field0: final field0): sse_encode_i_32(3, serializer); sse_encode_f_64(field0, serializer);\n default: throw UnimplementedError(''); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_context_latency_category(self.latencyHint, serializer);\nsse_encode_opt_box_autoadd_f_32(self.sampleRate, serializer);\nsse_encode_String(self.sinkId, serializer);\nsse_encode_audio_context_render_size_category(self.renderSizeHint, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_context_render_size_category(AudioContextRenderSizeCategory self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_context_state(AudioContextState self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nswitch (self) { case AudioNodeImplementor_Variant0(field0: final field0): sse_encode_i_32(0, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(field0, serializer);\ncase AudioNodeImplementor_Variant1(field0: final field0): sse_encode_i_32(1, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(field0, serializer);\ncase AudioNodeImplementor_Variant2(field0: final field0): sse_encode_i_32(2, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(field0, serializer);\ncase AudioNodeImplementor_Variant3(field0: final field0): sse_encode_i_32(3, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(field0, serializer);\ncase AudioNodeImplementor_Variant4(field0: final field0): sse_encode_i_32(4, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(field0, serializer);\ncase AudioNodeImplementor_Variant5(field0: final field0): sse_encode_i_32(5, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(field0, serializer);\ncase AudioNodeImplementor_Variant6(field0: final field0): sse_encode_i_32(6, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(field0, serializer);\ncase AudioNodeImplementor_Variant7(field0: final field0): sse_encode_i_32(7, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(field0, serializer);\ncase AudioNodeImplementor_Variant8(field0: final field0): sse_encode_i_32(8, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(field0, serializer);\ncase AudioNodeImplementor_Variant9(field0: final field0): sse_encode_i_32(9, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(field0, serializer);\ncase AudioNodeImplementor_Variant10(field0: final field0): sse_encode_i_32(10, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(field0, serializer);\ncase AudioNodeImplementor_Variant11(field0: final field0): sse_encode_i_32(11, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase AudioNodeImplementor_Variant12(field0: final field0): sse_encode_i_32(12, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(field0, serializer);\ncase AudioNodeImplementor_Variant13(field0: final field0): sse_encode_i_32(13, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(field0, serializer);\ncase AudioNodeImplementor_Variant14(field0: final field0): sse_encode_i_32(14, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(field0, serializer);\ncase AudioNodeImplementor_Variant15(field0: final field0): sse_encode_i_32(15, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(field0, serializer);\ncase AudioNodeImplementor_Variant16(field0: final field0): sse_encode_i_32(16, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(field0, serializer);\ncase AudioNodeImplementor_Variant17(field0: final field0): sse_encode_i_32(17, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(field0, serializer);\ncase AudioNodeImplementor_Variant18(field0: final field0): sse_encode_i_32(18, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(field0, serializer);\ncase AudioNodeImplementor_Variant19(field0: final field0): sse_encode_i_32(19, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase AudioNodeImplementor_Variant20(field0: final field0): sse_encode_i_32(20, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(field0, serializer);\ncase AudioNodeImplementor_Variant21(field0: final field0): sse_encode_i_32(21, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(field0, serializer);\ncase AudioNodeImplementor_Variant22(field0: final field0): sse_encode_i_32(22, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(field0, serializer);\n default: throw UnimplementedError(''); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_node_options(AudioNodeOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_usize(self.channelCount, serializer);\nsse_encode_channel_count_mode(self.channelCountMode, serializer);\nsse_encode_channel_interpretation(self.channelInterpretation, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_String(self.name, serializer);\nsse_encode_automation_rate(self.automationRate, serializer);\nsse_encode_f_32(self.defaultValue, serializer);\nsse_encode_f_32(self.minValue, serializer);\nsse_encode_f_32(self.maxValue, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_64(self.updateInterval, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nswitch (self) { case Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant0(field0: final field0): sse_encode_i_32(0, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant1(field0: final field0): sse_encode_i_32(1, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant2(field0: final field0): sse_encode_i_32(2, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant3(field0: final field0): sse_encode_i_32(3, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant4(field0: final field0): sse_encode_i_32(4, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant5(field0: final field0): sse_encode_i_32(5, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant6(field0: final field0): sse_encode_i_32(6, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant7(field0: final field0): sse_encode_i_32(7, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant8(field0: final field0): sse_encode_i_32(8, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant9(field0: final field0): sse_encode_i_32(9, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant10(field0: final field0): sse_encode_i_32(10, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant11(field0: final field0): sse_encode_i_32(11, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant12(field0: final field0): sse_encode_i_32(12, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant13(field0: final field0): sse_encode_i_32(13, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant14(field0: final field0): sse_encode_i_32(14, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant15(field0: final field0): sse_encode_i_32(15, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant16(field0: final field0): sse_encode_i_32(16, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant17(field0: final field0): sse_encode_i_32(17, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant18(field0: final field0): sse_encode_i_32(18, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant19(field0: final field0): sse_encode_i_32(19, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant20(field0: final field0): sse_encode_i_32(20, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant21(field0: final field0): sse_encode_i_32(21, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant22(field0: final field0): sse_encode_i_32(22, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant23(field0: final field0): sse_encode_i_32(23, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant24(field0: final field0): sse_encode_i_32(24, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant25(field0: final field0): sse_encode_i_32(25, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant26(field0: final field0): sse_encode_i_32(26, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant27(field0: final field0): sse_encode_i_32(27, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant28(field0: final field0): sse_encode_i_32(28, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant29(field0: final field0): sse_encode_i_32(29, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant30(field0: final field0): sse_encode_i_32(30, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(field0, serializer);\ncase Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum_Variant31(field0: final field0): sse_encode_i_32(31, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(field0, serializer);\n default: throw UnimplementedError(''); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nswitch (self) { case Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum_Variant0(field0: final field0): sse_encode_i_32(0, serializer); sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(field0, serializer);\n default: throw UnimplementedError(''); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_automation_rate(AutomationRate self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_biquad_filter_options(BiquadFilterOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self.q, serializer);\nsse_encode_f_32(self.detune, serializer);\nsse_encode_f_32(self.frequency, serializer);\nsse_encode_f_32(self.gain, serializer);\nsse_encode_biquad_filter_type(self.type, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_biquad_filter_type(BiquadFilterType self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_bool(bool self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putUint8(self ? 1 : 0);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_buffer_options(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_context_options(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_node_implementor(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_param_descriptor(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_audio_render_capacity_options(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_64(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_periodic_wave_options(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_u_32(self, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_channel_count_mode(ChannelCountMode self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_channel_interpretation(ChannelInterpretation self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_channel_merger_options(ChannelMergerOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_usize(self.numberOfInputs, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_channel_splitter_options(ChannelSplitterOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_usize(self.numberOfOutputs, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_constant_source_options(ConstantSourceOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self.offset, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_convolver_options(ConvolverOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(self.buffer, serializer);\nsse_encode_bool(self.disableNormalization, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_delay_options(DelayOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_64(self.maxDelayTime, serializer);\nsse_encode_f_64(self.delayTime, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_distance_model_type(DistanceModelType self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_dynamics_compressor_options(DynamicsCompressorOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self.attack, serializer);\nsse_encode_f_32(self.knee, serializer);\nsse_encode_f_32(self.ratio, serializer);\nsse_encode_f_32(self.release, serializer);\nsse_encode_f_32(self.threshold, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_f_32(double self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putFloat32(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_f_64(double self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putFloat64(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_gain_options(GainOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self.gain, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_i_32(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putInt32(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putPlatformInt64(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_level(Level self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(List<MediaStreamTrack> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n        for (final item in self) { sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(item, serializer); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_audio_param_descriptor(List<AudioParamDescriptor> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n        for (final item in self) { sse_encode_audio_param_descriptor(item, serializer); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_list_prim_f_32_strict(List<Float32List> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n        for (final item in self) { sse_encode_list_prim_f_32_strict(item, serializer); }"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_prim_f_32_loose(List<double> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n                    serializer.buffer.putFloat32List(self is Float32List ? self : Float32List.fromList(self));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_prim_f_32_strict(Float32List self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n                    serializer.buffer.putFloat32List(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_prim_f_64_loose(List<double> self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n                    serializer.buffer.putFloat64List(self is Float64List ? self : Float64List.fromList(self));"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_prim_f_64_strict(Float64List self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n                    serializer.buffer.putFloat64List(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.length, serializer);\n                    serializer.buffer.putUint8List(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_log_entry(LogEntry self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_CastedPrimitive_i_64(self.timeMillis, serializer);\nsse_encode_String(self.msg, serializer);\nsse_encode_level(self.logLevel, serializer);\nsse_encode_String(self.lbl, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_media_stream_track_state(MediaStreamTrackState self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_media_track_constraints(MediaTrackConstraints self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_opt_box_autoadd_f_32(self.sampleRate, serializer);\nsse_encode_opt_box_autoadd_f_64(self.latency, serializer);\nsse_encode_opt_box_autoadd_u_32(self.channelCount, serializer);\nsse_encode_opt_String(self.deviceId, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_String(String? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_String(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_box_autoadd_f_32(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_box_autoadd_f_64(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_box_autoadd_u_32(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_opt_list_prim_f_32_strict(Float32List? self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n\n                sse_encode_bool(self != null, serializer);\n                if (self != null) {\n                    sse_encode_list_prim_f_32_strict(self, serializer);\n                }\n                "
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_oscillator_options(OscillatorOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_oscillator_type(self.type, serializer);\nsse_encode_f_32(self.frequency, serializer);\nsse_encode_f_32(self.detune, serializer);\nsse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(self.periodicWave, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_oscillator_type(OscillatorType self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_over_sample_type(OverSampleType self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_panner_options(PannerOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_panning_model_type(self.panningModel, serializer);\nsse_encode_distance_model_type(self.distanceModel, serializer);\nsse_encode_f_32(self.positionX, serializer);\nsse_encode_f_32(self.positionY, serializer);\nsse_encode_f_32(self.positionZ, serializer);\nsse_encode_f_32(self.orientationX, serializer);\nsse_encode_f_32(self.orientationY, serializer);\nsse_encode_f_32(self.orientationZ, serializer);\nsse_encode_f_64(self.refDistance, serializer);\nsse_encode_f_64(self.maxDistance, serializer);\nsse_encode_f_64(self.rolloffFactor, serializer);\nsse_encode_f_64(self.coneInnerAngle, serializer);\nsse_encode_f_64(self.coneOuterAngle, serializer);\nsse_encode_f_64(self.coneOuterGain, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_panning_model_type(PanningModelType self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_i_32(self.index, serializer);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_opt_list_prim_f_32_strict(self.real, serializer);\nsse_encode_opt_list_prim_f_32_strict(self.imag, serializer);\nsse_encode_bool(self.disableNormalization, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id((AudioParam,AudioParamId) self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(self.$1, serializer);\nsse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(self.$2, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_stereo_panner_options(StereoPannerOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_f_32(self.pan, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_u_32(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putUint32(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_u_8(int self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putUint8(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_unit(void self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\n"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_usize(BigInt self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nserializer.buffer.putBigUint64(self);"
            }
          ],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_wave_shaper_options(WaveShaperOptions self, SseSerializer serializer)",
              "body": "// Codec=Sse (Serialization based), see doc to use other codecs\nsse_encode_opt_list_prim_f_32_strict(self.curve, serializer);\nsse_encode_over_sample_type(self.oversample, serializer);\nsse_encode_audio_node_options(self.audioNodeOptions, serializer);\n"
            }
          ],
          "body": ""
        }
      ],
      "io": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(FutureOr<void> Function(Event) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(FutureOr<void> Function(OfflineAudioCompletionEvent) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(FutureOr<void> Function(String) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartOpaque(Object self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DynTrait_AudioNode(AudioNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_StreamSink_log_entry_Sse(RustStreamSink<LogEntry> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_String(String self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_analyser_options(AnalyserOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_buffer_source_options(AudioBufferSourceOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_latency_category(AudioContextLatencyCategory self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_render_size_category(AudioContextRenderSizeCategory self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_state(AudioContextState self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_node_options(AudioNodeOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_automation_rate(AutomationRate self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_biquad_filter_options(BiquadFilterOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_biquad_filter_type(BiquadFilterType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_bool(bool self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_count_mode(ChannelCountMode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_interpretation(ChannelInterpretation self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_merger_options(ChannelMergerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_splitter_options(ChannelSplitterOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_constant_source_options(ConstantSourceOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_convolver_options(ConvolverOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_delay_options(DelayOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_distance_model_type(DistanceModelType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_dynamics_compressor_options(DynamicsCompressorOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_f_32(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_f_64(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_gain_options(GainOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_i_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_level(Level self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(List<MediaStreamTrack> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_audio_param_descriptor(List<AudioParamDescriptor> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_list_prim_f_32_strict(List<Float32List> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_32_loose(List<double> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_32_strict(Float32List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_64_loose(List<double> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_64_strict(Float64List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_log_entry(LogEntry self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_media_stream_track_state(MediaStreamTrackState self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_media_track_constraints(MediaTrackConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_String(String? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_list_prim_f_32_strict(Float32List? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_oscillator_options(OscillatorOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_oscillator_type(OscillatorType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_over_sample_type(OverSampleType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_panner_options(PannerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_panning_model_type(PanningModelType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id((AudioParam,AudioParamId) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_stereo_panner_options(StereoPannerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_u_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_u_8(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_unit(void self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_usize(BigInt self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_wave_shaper_options(WaveShaperOptions self, SseSerializer serializer)",
              "body": null
            }
          ],
          "body": ""
        }
      ],
      "web": [
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [],
          "body": ""
        },
        {
          "header": {
            "file_top": "",
            "import": "",
            "part": ""
          },
          "body_top": "",
          "api_class_body": "",
          "api_impl_class_body": "",
          "api_impl_class_methods": [
            {
              "signature": "void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent_Output_unit_AnyhowException(FutureOr<void> Function(Event) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent_Output_unit_AnyhowException(FutureOr<void> Function(OfflineAudioCompletionEvent) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(FutureOr<void> Function(String) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DartOpaque(Object self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_DynTrait_AudioNode(AudioNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode_playback_rate(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_forward_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_position_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener_up_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_gain(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode_q(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode_offset(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode_delay_time(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_attack(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_knee(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_ratio(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_release(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode_threshold(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode_gain(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode_stream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_detune(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode_frequency(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_orientation_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_x(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_y(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode_position_z(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode_pan(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAnalyserNode(AnalyserNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBufferSourceNode(AudioBufferSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContext(AudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioContextRegistration(AudioContextRegistration self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioDestinationNode(AudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioListener(AudioListener self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParam(AudioParam self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamId(AudioParamId self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioProcessingEvent(AudioProcessingEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacity(AudioRenderCapacity self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioRenderCapacityEvent(AudioRenderCapacityEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioWorkletNode(AudioWorkletNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBiquadFilterNode(BiquadFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlobEvent(BlobEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelConfig(ChannelConfig self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelMergerNode(ChannelMergerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChannelSplitterNode(ChannelSplitterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConcreteBaseAudioContext(ConcreteBaseAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstantSourceNode(ConstantSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConvolverNode(ConvolverNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDelayNode(DelayNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDynamicsCompressorNode(DynamicsCompressorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEvent(Event self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGainNode(GainNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIIRFilterNode(IirFilterNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaElementAudioSourceNode(MediaElementAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaRecorder(MediaRecorder self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStream(MediaStream self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioDestinationNode(MediaStreamAudioDestinationNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamAudioSourceNode(MediaStreamAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamConstraints(MediaStreamConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(MediaStreamTrack self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrackAudioSourceNode(MediaStreamTrackAudioSourceNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyMediaElement(MyMediaElement self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioCompletionEvent(OfflineAudioCompletionEvent self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOfflineAudioContext(OfflineAudioContext self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOscillatorNode(OscillatorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPannerNode(PannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerScriptProcessorNode(ScriptProcessorNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStereoPannerNode(StereoPannerNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWaveShaperNode(WaveShaperNode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_StreamSink_log_entry_Sse(RustStreamSink<LogEntry> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_String(String self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_analyser_options(AnalyserOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_buffer_source_options(AudioBufferSourceOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_latency_category(AudioContextLatencyCategory self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_render_size_category(AudioContextRenderSizeCategory self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_context_state(AudioContextState self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_node_options(AudioNodeOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_automation_rate(AutomationRate self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_biquad_filter_options(BiquadFilterOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_biquad_filter_type(BiquadFilterType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_bool(bool self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_buffer_options(AudioBufferOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_context_options(AudioContextOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_node_implementor(AudioNodeImplementor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_param_descriptor(AudioParamDescriptor self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_audio_render_capacity_options(AudioRenderCapacityOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioParamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_media_stream_proxy_enum(Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamProxyEnum self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_count_mode(ChannelCountMode self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_interpretation(ChannelInterpretation self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_merger_options(ChannelMergerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_channel_splitter_options(ChannelSplitterOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_constant_source_options(ConstantSourceOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_convolver_options(ConvolverOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_delay_options(DelayOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_distance_model_type(DistanceModelType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_dynamics_compressor_options(DynamicsCompressorOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_f_32(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_f_64(double self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_gain_options(GainOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_i_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_level(Level self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMediaStreamTrack(List<MediaStreamTrack> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_audio_param_descriptor(List<AudioParamDescriptor> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_list_prim_f_32_strict(List<Float32List> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_32_loose(List<double> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_32_strict(Float32List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_64_loose(List<double> self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_f_64_strict(Float64List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_log_entry(LogEntry self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_media_stream_track_state(MediaStreamTrackState self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_media_track_constraints(MediaTrackConstraints self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_String(String? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAudioBuffer(AudioBuffer? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPeriodicWave(PeriodicWave? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_opt_list_prim_f_32_strict(Float32List? self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_oscillator_options(OscillatorOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_oscillator_type(OscillatorType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_over_sample_type(OverSampleType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_panner_options(PannerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_panning_model_type(PanningModelType self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_periodic_wave_options(PeriodicWaveOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_audio_param_id((AudioParam,AudioParamId) self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_stereo_panner_options(StereoPannerOptions self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_u_32(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_u_8(int self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_unit(void self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_usize(BigInt self, SseSerializer serializer)",
              "body": null
            },
            {
              "signature": "void sse_encode_wave_shaper_options(WaveShaperOptions self, SseSerializer serializer)",
              "body": null
            }
          ],
          "body": ""
        }
      ]
    }
  }
}